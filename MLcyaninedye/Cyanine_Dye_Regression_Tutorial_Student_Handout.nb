(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    236486,       5316]
NotebookOptionsPosition[    198189,       4811]
NotebookOutlinePosition[    200086,       4860]
CellTagsIndexPosition[    199787,       4849]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell["Version Date: 2 August 2023", "Text",
 CellChangeTimes->{{3.8973922486902742`*^9, 3.897392252959588*^9}, {
  3.8986150501701636`*^9, 3.8986150506214113`*^9}, {3.899997334018318*^9, 
  3.899997336875069*^9}},ExpressionUUID->"5d8e92d3-f953-4c86-9914-\
ca5c2ed924a0"],

Cell[CellGroupData[{

Cell["Cyanine Dye Regression Tutorial Student Handout", "Title",
 CellChangeTimes->{{3.8231070081588717`*^9, 3.823107011860821*^9}, 
   3.872242900435793*^9},ExpressionUUID->"e78cea1c-9510-4ff1-b7da-\
1e06c990e6c5"],

Cell["Part I ", "Title",
 CellChangeTimes->{{3.8727711784304447`*^9, 3.8727711796224403`*^9}, 
   3.8731435696344585`*^9},ExpressionUUID->"e4bc22fc-ce52-463f-b9ef-\
47c19cad53f4"],

Cell[CellGroupData[{

Cell["Objectives", "Section",
 Editable->False,
 CellChangeTimes->{{3.822149137032115*^9, 
  3.822149140700242*^9}},ExpressionUUID->"82a53d30-79e3-41e7-90ff-\
5b5600ac9493"],

Cell["\<\
Build regression models that predict the wavelength of maximum absorbance of \
different cyanine dyes.\
\>", "Item",
 CellChangeTimes->{{3.822149146525083*^9, 3.8221491600613403`*^9}, 
   3.8722428892589817`*^9, 3.8728580488551235`*^9, {3.8801290112303*^9, 
   3.880129014236439*^9}, 
   3.883645721169324*^9},ExpressionUUID->"5845d42f-156c-4dc9-98eb-\
7668f1b86f39"],

Cell["\<\
Understand and apply different types of regression models, including simple \
linear regression, multiple regression, penalized regression, and tree models.\
\>", "Item",
 CellChangeTimes->{{3.822149146525083*^9, 3.822149165621443*^9}, 
   3.8722429080598383`*^9, 3.872858055071031*^9, 
   3.8836457236069603`*^9},ExpressionUUID->"7f6147b8-9a0d-446f-b45e-\
50bfb8ca387b"],

Cell["\<\
Use feature selection and the evaluation of feature importance to improve and \
interpret model performance.\
\>", "Item",
 CellChangeTimes->{{3.822149146525083*^9, 3.822149171565956*^9}, 
   3.823008025340351*^9, 3.8722429132811193`*^9, {3.872858061361403*^9, 
   3.8728580780807405`*^9}, 3.8836457197650537`*^9, 
   3.899975731568876*^9},ExpressionUUID->"163625f1-74fb-45fa-948c-\
8f0bb7d0b1d5"],

Cell["\<\
Use regression model analysis as part of the scientific discovery process by \
generating hypotheses for factors that affect cyanine dye absorption.\
\>", "Item",
 CellChangeTimes->{{3.822149146525083*^9, 3.8221491749168243`*^9}, {
   3.822974352685799*^9, 3.8229743536086826`*^9}, 3.872242920409349*^9, {
   3.872858142906238*^9, 3.872858160881381*^9}, {3.880131280969778*^9, 
   3.8801312848505087`*^9}, 
   3.883645718350218*^9},ExpressionUUID->"2f697c54-758b-4d1a-baf4-\
5be606cb27f4"],

Cell["\<\
Gain proficiency in reading and writing Mathematica code in a notebook \
environment.\
\>", "Item",
 CellChangeTimes->{{3.822149146525083*^9, 3.8221491749168243`*^9}, {
   3.822974352685799*^9, 3.8229743536086826`*^9}, 3.872242920409349*^9, {
   3.872858142906238*^9, 3.87285817445758*^9}, 
   3.883645716850095*^9},ExpressionUUID->"d1baa35a-be51-4558-b477-\
5805d3503148"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Getting started", "Section",
 CellChangeTimes->{{3.822149186324263*^9, 3.822149187780306*^9}, 
   3.8230446650335455`*^9},ExpressionUUID->"426ecedc-3f25-4457-b7bf-\
48bdc37e1e02"],

Cell[TextData[{
 StyleBox["If you have limited Mathematica experience,",
  FontWeight->"Bold"],
 " you may wish to watch this screencast (12 minutes) which will help you get \
started by introducing basic concepts, including entering input, \
understanding functions, working with data and matrix operations, and finding \
functions.  ",
 ButtonBox["https://www.wolfram.com/broadcast/video.php?c=86&v=327",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://www.wolfram.com/broadcast/video.php?c=86&v=327"], None},
  ButtonNote->"https://www.wolfram.com/broadcast/video.php?c=86&v=327"]
}], "Item",
 CellChangeTimes->{{3.8230081442832003`*^9, 3.8230082012543187`*^9}, {
  3.82309760833932*^9, 3.8230976155260344`*^9}, {3.8230977081328497`*^9, 
  3.8230978492440367`*^9}, {3.872754943321055*^9, 
  3.8727549465369043`*^9}},ExpressionUUID->"a0d22247-f172-4b29-80a3-\
6a06412b3a3f"],

Cell[TextData[{
 StyleBox["If you have experience in another programming language,", "Item",
  FontWeight->"Bold"],
 StyleBox[" the ", "Item"],
 StyleBox["Fast Introduction for Programmers", "Item",
  FontSlant->"Italic"],
 StyleBox[" is a good way to get started", "Item"],
 ButtonBox[" \
https://www.wolfram.com/language/fast-introduction-for-programmers/en/",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://www.wolfram.com/language/fast-introduction-for-programmers/\
en/"], None},
  ButtonNote->
   "https://www.wolfram.com/language/fast-introduction-for-programmers/en/"]
}], "Item",
 CellChangeTimes->{{3.8230081442832003`*^9, 3.823008203167594*^9}, {
  3.82309779698158*^9, 3.823097799603918*^9}, {3.823097854147244*^9, 
  3.823097888938476*^9}},ExpressionUUID->"ca4f4368-3d17-4bfe-8245-\
80bd9741ca73"],

Cell[TextData[{
 "Mathematica notebooks consist of text cells (like this one) and program \
input and output cells like the ones below. An input cell is evaluated by \
typing ",
 StyleBox["Shift+Enter", "Code"]
}], "Text",
 CellChangeTimes->{{3.823097902138246*^9, 3.823098018407836*^9}, 
   3.8722432314689627`*^9},ExpressionUUID->"cbe30ff3-81ac-4389-a928-\
6550567b9974"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Basic of Mathematica", "Section",
 CellChangeTimes->{{3.8221492038866053`*^9, 
  3.822149206840592*^9}},ExpressionUUID->"a7615bac-c2cf-489b-aa3c-\
865be226f48e"],

Cell[CellGroupData[{

Cell["Variables", "Subsection",
 CellChangeTimes->{{3.8230984808787003`*^9, 
  3.823098481890037*^9}},ExpressionUUID->"7eae000f-7f0f-4b8a-80f5-\
e46b9a61e7ba"],

Cell[TextData[{
 StyleBox["Variables",
  FontWeight->"Bold"],
 " are reserved memory locations that store values.  Think of variables like \
a container that hold data which can be changed later in the program. For \
example to create a variable named \[OpenCurlyDoubleQuote]number\
\[CloseCurlyDoubleQuote] and assign its value as 100:"
}], "Text",
 CellChangeTimes->{{3.823098067218698*^9, 3.823098144840785*^9}, 
   3.823098478657102*^9, {3.832673080899906*^9, 3.832673112860669*^9}},
 FontWeight->"Plain",ExpressionUUID->"4b1ac693-939e-4969-9400-2cafa31ce268"],

Cell[BoxData[
 RowBox[{"number", " ", "=", " ", "100", " "}]], "Input",
 CellChangeTimes->{{3.8223956155801487`*^9, 3.822395616882503*^9}, {
   3.823016807586953*^9, 3.8230168242348433`*^9}, {3.8230169375983586`*^9, 
   3.82301694936567*^9}, 3.823017081155941*^9, {3.823017197234457*^9, 
   3.823017198213146*^9}, {3.8230358823943205`*^9, 3.8230358826313734`*^9}, {
   3.823098156341127*^9, 3.823098175958355*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"a69a7eb4-0588-42ff-9e6d-f459edf5ef6e"],

Cell["This variable can be modified at any time:", "Text",
 CellChangeTimes->{{3.8230981639606953`*^9, 
  3.8230981685473537`*^9}},ExpressionUUID->"5419f0fb-f9ee-489d-b812-\
cc09e315c320"],

Cell[BoxData[{
 RowBox[{"number", " ", "=", " ", "99"}], "\[IndentingNewLine]", 
 RowBox[{"number", " ", "=", " ", "1", " "}]}], "Input",
 CellChangeTimes->{{3.822395633397341*^9, 3.822395641498336*^9}, {
  3.8230171288512506`*^9, 3.8230171626590652`*^9}, {3.823017779522588*^9, 
  3.823017816053735*^9}, {3.8230964137761602`*^9, 3.823096419609075*^9}, {
  3.823098174252268*^9, 3.8230981861053133`*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"56488ee7-ec40-4a2a-9773-9df13e487dd6"],

Cell["The value of number has changed to 1:", "Text",
 CellChangeTimes->{{3.823098191894617*^9, 3.8230981986497803`*^9}, {
  3.823098246818089*^9, 
  3.8230982482874823`*^9}},ExpressionUUID->"67cdca8b-f77b-4eb7-aae0-\
5e6357c270f0"],

Cell[BoxData[
 RowBox[{"number", " ", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "see", " ", "what", " ", "the", " ", "value", " ", "is", " ", "now"}], 
    "..."}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.823098249335236*^9, 3.8230982594888887`*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"6bc22c94-d3df-4b19-8dee-dae36d5074a6"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Functions", "Subsection",
 CellChangeTimes->{{3.823098485925439*^9, 
  3.823098486649734*^9}},ExpressionUUID->"2bba8de4-c060-445a-bfbb-\
4dc0c973df8c"],

Cell[TextData[{
 StyleBox["Functions",
  FontWeight->"Bold"],
 " are sets of operations that take an action on some input.  Functions are \
defined using the delayed assignment (:=) operator, and the names of \
user-provided input values, called ",
 StyleBox["arguments",
  FontWeight->"Bold"],
 ", end with a underscore (\[OpenCurlyDoubleQuote]_\[CloseCurlyDoubleQuote]). \
 \n\nFor example, let\[CloseCurlyQuote]s define an ",
 StyleBox["absoluteValue",
  FontSlant->"Italic"],
 " function as below, which takes one argument, the number for which the \
absolute value should be calculated:"
}], "Text",
 CellChangeTimes->{{3.823098271896504*^9, 3.82309833914855*^9}, {
  3.83007454529137*^9, 3.830074552538457*^9}, {3.872245135121677*^9, 
  3.872245135745368*^9}, {3.872754986816079*^9, 
  3.872754990322309*^9}},ExpressionUUID->"848c2029-db7e-450f-bea1-\
0afc2f9784ac"],

Cell[BoxData[
 RowBox[{
  RowBox[{"absoluteValue", "[", "num_", "]"}], ":=", 
  RowBox[{"If", "[", " ", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"num", " ", "\[GreaterEqual]", " ", "0"}], ")"}], ",", " ", 
    RowBox[{"(*", 
     RowBox[{"condition", " ", "to", " ", "check"}], "*)"}], 
    "\[IndentingNewLine]", "num", ",", " ", 
    RowBox[{"(*", 
     RowBox[{
      RowBox[{"if", " ", "true"}], ",", " ", 
      RowBox[{"returns", " ", "num"}]}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{"-", "num"}]}], " ", 
   RowBox[{"(*", 
    RowBox[{"else", ",", " ", 
     RowBox[{"returns", " ", "-", "num"}]}], "*)"}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.822395652067272*^9, 3.822395693235593*^9}, 
   3.823010144210717*^9, {3.82301717577075*^9, 3.823017205574666*^9}, {
   3.8230172364176383`*^9, 3.823017293102391*^9}, {3.823017330631357*^9, 
   3.8230173940302267`*^9}, {3.8230175311028004`*^9, 
   3.8230175703760557`*^9}, {3.8230179123987246`*^9, 
   3.8230179154744115`*^9}, {3.8230359329172025`*^9, 3.823035933283441*^9}, {
   3.8230359709082127`*^9, 3.8230359712943907`*^9}, {3.8230361980987673`*^9, 
   3.8230362000914593`*^9}, {3.823098345801241*^9, 3.823098356645176*^9}, {
   3.832673136166507*^9, 3.832673139384898*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"8ce4830f-282b-4bd0-a088-3375a6080990"],

Cell["\<\
Functions are called by providing their names, for example, the absolute \
value of 2 is:\
\>", "Text",
 CellChangeTimes->{{3.82309837222108*^9, 
  3.823098414959811*^9}},ExpressionUUID->"2ee95303-b3d6-461d-ba62-\
c69016a7b165"],

Cell[BoxData[
 RowBox[{
  RowBox[{"absoluteValue", "[", "2", "]"}], " "}]], "Input",
 CellChangeTimes->{{3.823010043698063*^9, 3.8230100726339993`*^9}, {
   3.8230175727437572`*^9, 3.823017585182753*^9}, {3.823017895005603*^9, 
   3.8230179052347345`*^9}, {3.8230541645949864`*^9, 3.8230541683730774`*^9}, 
   3.823098362676044*^9, {3.823098394384104*^9, 3.823098398947564*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"8ac5098f-3d1b-4165-a804-1ab828bf636e"],

Cell["And the absolute value of -4 is:", "Text",
 CellChangeTimes->{{3.823098401944828*^9, 
  3.823098413194357*^9}},ExpressionUUID->"96fab1d4-f8d4-4731-895d-\
5c2a296859bc"],

Cell[BoxData[
 RowBox[{"absoluteValue", "[", 
  RowBox[{"-", "4"}], "]"}]], "Input",
 CellChangeTimes->{{3.823098417311329*^9, 3.823098420582196*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"e2925dda-2f6f-4a69-8a09-83b13cba73fa"],

Cell["Functions can also be applied using the `@` operator:", "Text",
 CellChangeTimes->{{3.8230984254205627`*^9, 3.8230984345275583`*^9}, {
  3.82311266664618*^9, 3.823112680151184*^9}, {3.8231132033749332`*^9, 
  3.8231132086192017`*^9}, {3.832673152895005*^9, 
  3.832673154418582*^9}},ExpressionUUID->"ace56d17-9d17-4adb-a4a5-\
a4b7d49b14bb"],

Cell[BoxData[
 RowBox[{"absoluteValue", " ", "@", " ", 
  RowBox[{"-", "4"}]}]], "Input",
 CellChangeTimes->{{3.823054174216381*^9, 3.823054207982397*^9}, {
  3.823098436798739*^9, 3.823098446585104*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"f7895eac-a2f5-430c-acd5-4c435b4f3ca9"],

Cell["\<\
This can be especially useful when we want to apply several functions \
sequentially to some input, such as:\
\>", "Text",
 CellChangeTimes->{{3.8231132111927137`*^9, 3.82311325899857*^9}, {
  3.830074515027478*^9, 3.830074516135653*^9}, {3.872755020698306*^9, 
  3.872755022069807*^9}},ExpressionUUID->"48eb0b2c-5b90-4fdf-9efc-\
41c0b5e94ba1"],

Cell[BoxData[
 RowBox[{"Sqrt", "@", 
  RowBox[{"Exp", "@", 
   RowBox[{"Abs", "@", 
    RowBox[{"Sin", "@", 
     RowBox[{"Tan", "[", "0.2", "]"}]}]}]}]}]], "Input",
 CellChangeTimes->{{3.823113232741788*^9, 3.823113246601519*^9}, {
  3.823113284016675*^9, 3.823113284860978*^9}},
 CellLabel->"In[20]:=",ExpressionUUID->"b736d4f1-1914-4074-ba32-670ae3513301"],

Cell["\<\
This avoids having to write using a set of nested square brackets to achieve \
the same process:\
\>", "Text",
 CellChangeTimes->{{3.8231132606517687`*^9, 3.823113265541319*^9}, {
  3.8300745254775887`*^9, 3.830074532005588*^9}, {3.832673184654729*^9, 
  3.832673198115384*^9}},ExpressionUUID->"eab0bbe8-71ca-4af1-ba6f-\
599a5fdfc63c"],

Cell[BoxData[
 RowBox[{"Sqrt", "[", 
  RowBox[{"Exp", "[", 
   RowBox[{"Abs", "[", 
    RowBox[{"Sin", "[", 
     RowBox[{"Tan", "[", "0.2", "]"}], "]"}], "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.82311326636314*^9, 3.82311329078962*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"a7ac1285-4c7b-468e-acc6-b250fd2b7b68"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Advanced topics", "Subsection",
 CellChangeTimes->{{3.823098536165729*^9, 
  3.823098538154701*^9}},ExpressionUUID->"7dafd19e-ceb7-47c3-8e1e-\
c67bae0a806e"],

Cell[TextData[{
 "The code below uses some other features of variables in Mathematica.  It is \
",
 StyleBox["not",
  FontSlant->"Italic"],
 " necessary to review these now, but you may want to refer to this if you \
need to modify the code."
}], "Text",
 CellChangeTimes->{{3.823098539321776*^9, 
  3.823098625271035*^9}},ExpressionUUID->"65337ce9-5b2a-45e9-9d02-\
f5a57ed78cc2"],

Cell[CellGroupData[{

Cell[TextData[{
 ButtonBox["With",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://reference.wolfram.com/language/ref/With.html"], None},
  ButtonNote->"http://reference.wolfram.com/language/ref/With.html"],
 " defines a local constant.  It is often used in the definition of functions:"
}], "ItemNumbered",
 CellChangeTimes->{{3.8230360148613195`*^9, 3.823036025706134*^9}, {
  3.8230360692923737`*^9, 3.823036094524412*^9}, {3.823098631229024*^9, 
  3.82309864199258*^9}, {3.823107041088027*^9, 3.823107046698374*^9}, {
  3.830074504793816*^9, 3.830074505355762*^9}, {3.872777072573372*^9, 
  3.872777076808907*^9}},ExpressionUUID->"06c255ac-c48f-4fa6-a388-\
0de08730de9f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"number", " ", "=", "1"}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "set", " ", "number", " ", "to", " ", "1", " ", "as", " ", "an", " ", 
    "example"}], "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "a", " ", "private", " ", "copy", " ", "of", " ", "`number`", " ", 
     "inside", " ", "the", " ", "with", " ", "statement", " ", "is", " ", 
     "set", " ", "as", " ", "9"}], ",", " ", 
    RowBox[{
    "so", " ", "t", " ", "is", " ", "assigned", " ", "as", " ", "81"}]}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"number", "=", "9"}], "}"}], ",", 
    RowBox[{"t", "=", 
     RowBox[{"number", "^", "2"}]}]}], "]"}], " ", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"number", "\[Equal]", "1", " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "global", " ", "variable", " ", "number", " ", "is", " ", "still", " ", 
    "1"}], "*)"}]}]}], "Input",
 CellChangeTimes->{{3.8230105058704066`*^9, 3.823010618983302*^9}, {
  3.8230177446675725`*^9, 3.823017770899206*^9}, {3.8230360968430953`*^9, 
  3.8230360972383733`*^9}, {3.8727550670771437`*^9, 3.872755107582131*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"fe5775a6-677f-422f-80cb-181f3b2d3bc9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 ButtonBox["Lists",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://reference.wolfram.com/language/ref/List.html"], None},
  ButtonNote->"http://reference.wolfram.com/language/ref/List.html"],
 " can be used to store a series of values.  The list is defined by the curly \
brackets, {}.  Each entry in a ",
 ButtonBox["List",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://reference.wolfram.com/language/ref/List.html"], None},
  ButtonNote->"http://reference.wolfram.com/language/ref/List.html"],
 " has an address that can be used to identify it.  We will see some \
list-like ways to access Datasets."
}], "ItemNumbered",
 CellChangeTimes->{{3.823036120059204*^9, 3.8230361691013875`*^9}, {
  3.823036299988651*^9, 3.8230363028669853`*^9}, {3.823098660413261*^9, 
  3.823098715408175*^9}, {3.823107051611909*^9, 3.8231070747831287`*^9}, {
  3.872777048859209*^9, 
  3.872777057624839*^9}},ExpressionUUID->"6cd00602-91c4-4c46-a367-\
a5d4a8067005"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"numberList", "  ", "=", 
   RowBox[{"{", 
    RowBox[{"1", ",", " ", "2", ",", " ", 
     RowBox[{"-", "1"}], ",", " ", "1", ",", " ", 
     RowBox[{"-", "2.2"}], ",", " ", 
     RowBox[{"-", "42"}]}], "}"}]}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "here", " ", "is", " ", "an", " ", "alternative", " ", "way", " ", "to", 
    " ", "declare", " ", "a", " ", "list"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"numberList", "[", 
   RowBox[{"[", "5", "]"}], "]"}], " ", "\[Equal]", " ", 
  RowBox[{"-", "2.2", " ", 
   RowBox[{"(*", 
    RowBox[{
    "double", " ", "square", " ", "brackets", " ", "used", " ", "to", " ", 
     "access", " ", "item", " ", "in", " ", "a", " ", "list", " ", "by", " ", 
     "index"}], "*)"}]}]}]}], "Input",
 CellChangeTimes->{{3.823036786323456*^9, 3.82303683253045*^9}, {
   3.823098656144388*^9, 3.823098657415516*^9}, 3.823107056208263*^9, 
   3.832673540232666*^9},
 CellLabel->"In[25]:=",ExpressionUUID->"d0d468f9-12dc-4fdf-bae2-59dbe4ad3caa"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 ButtonBox["Map",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://reference.wolfram.com/language/ref/Map.html"], None},
  ButtonNote->"http://reference.wolfram.com/language/ref/Map.html"],
 " applies a function to every item in a list.  There are several different \
shortcuts for performing this operation, which can all be used \
interchangeably:"
}], "ItemNumbered",
 CellChangeTimes->{{3.8230363068348274`*^9, 3.8230363425352707`*^9}, {
   3.8230986771747*^9, 3.8230986800390244`*^9}, {3.823098717780612*^9, 
   3.823098726436274*^9}, 3.8300745072159243`*^9, {3.8727551475848093`*^9, 
   3.872755170358782*^9}, {3.872759339872325*^9, 3.87275934423225*^9}, {
   3.872777087402009*^9, 
   3.872777087402432*^9}},ExpressionUUID->"85601fc7-a619-466c-a066-\
8ed09f2195a2"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Map", "[", 
   RowBox[{"absoluteValue", ",", " ", "numberList"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "apply", " ", "`absoluteValue`", " ", "to", " ", "every", " ", "item", " ",
     "in", " ", "`numberList`"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"absoluteValue", " ", "/@", " ", "numberList"}], " ", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"`", "/@", "`"}], " ", "is", " ", "a", " ", "shortcut", " ", 
    "for", " ", "`Map`"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Map", "[", "absoluteValue", "]"}], "@", "numberList", " ", 
  RowBox[{"(*", 
   RowBox[{
   "operator", " ", "style", " ", "way", " ", "of", " ", "Maping", " ", "a", 
    " ", "function", " ", "on", " ", "a", " ", "list"}], " ", 
   "*)"}]}]}], "Input",
 CellChangeTimes->{{3.8230112862722425`*^9, 3.82301129545341*^9}, {
  3.8230113352588296`*^9, 3.8230114520054283`*^9}, {3.8230178542510743`*^9, 
  3.82301786066897*^9}, {3.8230179252185473`*^9, 3.8230179673321037`*^9}, {
  3.8230180067478685`*^9, 3.8230181027385006`*^9}, {3.8230343010592847`*^9, 
  3.823034301782214*^9}, {3.823036114235358*^9, 3.8230361181658077`*^9}, {
  3.82303617628937*^9, 3.823036176643631*^9}, {3.8230362220117207`*^9, 
  3.823036295469431*^9}, {3.8230363493822775`*^9, 3.823036355717428*^9}, {
  3.823098735343869*^9, 3.8230987383866997`*^9}, {3.823113102338196*^9, 
  3.8231131031696157`*^9}, {3.872755129271421*^9, 3.872755145018608*^9}},
 CellLabel->"In[27]:=",ExpressionUUID->"ad7bdd12-8b89-4dc5-b450-fbec4be0d88b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Arrows denote a ",
 ButtonBox["Rule",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://reference.wolfram.com/language/ref/Rule.html"], None},
  ButtonNote->"http://reference.wolfram.com/language/ref/Rule.html"],
 "; these are often used to define replacement processes of other relations.  \
The rule symbol \[Rule]  is entered by typing the characters  \
\[OpenCurlyDoubleQuote]",
 StyleBox["->", "CodeText"],
 "\[CloseCurlyDoubleQuote] (the notebook will convert it).  Rules have a \
number of applications, such as replacement patterns:"
}], "ItemNumbered",
 CellChangeTimes->{{3.8230365522599225`*^9, 3.823036561997404*^9}, {
   3.823044212068757*^9, 3.823044213341448*^9}, {3.8230443584005466`*^9, 
   3.8230443600753107`*^9}, 3.8230487286357756`*^9, {3.8230489512048373`*^9, 
   3.8230489812198696`*^9}, {3.823049201532323*^9, 3.8230492187894325`*^9}, {
   3.8230493197716703`*^9, 3.8230493416206446`*^9}, {3.823096431138476*^9, 
   3.8230964620182734`*^9}, {3.823098756952813*^9, 3.823098765987256*^9}, {
   3.8300745658419027`*^9, 3.830074590087557*^9}, {3.8727551777542877`*^9, 
   3.87275520325378*^9}, {3.872759360264737*^9, 3.8727593750720043`*^9}, {
   3.872777102293147*^9, 3.8727771072580214`*^9}, 
   3.8999950976796846`*^9},ExpressionUUID->"90dc95ac-02da-49aa-ae9a-\
fce992270823"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{"x", ",", "y"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "make", " ", "sure", " ", "these", " ", "are", " ", "treated", " ", "as", 
    " ", "undefined", " ", "variables", " ", "rather", " ", "than", " ", 
    "values"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"exampleRule", "=", 
   RowBox[{"x", "\[Rule]", 
    RowBox[{"-", "1"}]}]}], " ", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"give", " ", "pattern", " ", "`x`"}], ",", " ", 
    RowBox[{"return", " ", "-", "1"}]}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"x", "^", "2"}], "+", "y", "+", "1"}], " ", "/.", "exampleRule", 
  " ", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
     RowBox[{
     "replace", " ", "`x`", " ", "in", " ", "the", " ", "preceeding", " ", 
      "expression", " ", "with"}], " ", "-", "1"}], ",", " ", 
    RowBox[{
     RowBox[{"the", " ", "operator", " ", "`"}], "/.", 
     RowBox[{
     "`", " ", "means", " ", "applying", " ", "the", " ", "rule"}]}]}], 
   "*)"}]}]}], "Input",
 CellChangeTimes->{{3.823034303590892*^9, 3.8230343543752375`*^9}, {
   3.8230489887653055`*^9, 3.8230491106951647`*^9}, {3.823049230995871*^9, 
   3.8230493041356616`*^9}, {3.8230493475538282`*^9, 3.8230494014488506`*^9}, 
   3.823098773560217*^9, {3.872759350313663*^9, 3.872759354744506*^9}, {
   3.897730194691893*^9, 3.897730211161912*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"27288820-d70f-4f68-a173-9c53ec6c2c10"]
}, Open  ]],

Cell[TextData[{
 StyleBox["5.  ",
  FontWeight->"Bold"],
 "Rules are also often used to denote optional arguments to functions.  For \
example:"
}], "Text",
 CellChangeTimes->{{3.872243097533516*^9, 3.872243121882008*^9}, {
  3.872759382392543*^9, 
  3.87275938288789*^9}},ExpressionUUID->"b6cf5b94-c872-4ee2-922e-\
c7c547af0364"],

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"Sin", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", 
     RowBox[{"2", " ", "Pi"}]}], "}"}], ",", " ", 
   RowBox[{"PlotStyle", "->", "Red"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.872243124788719*^9, 3.872243140690155*^9}},
 CellLabel->"In[33]:=",ExpressionUUID->"dd6bdd6a-9361-4aab-9509-4c97a871a26a"],

Cell[TextData[{
 StyleBox["5.  ",
  FontWeight->"Bold"],
 ButtonBox["Associations",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://reference.wolfram.com/language/ref/Association.html"], None},
  ButtonNote->"http://reference.wolfram.com/language/ref/Association.html"],
 " (sometimes called \[OpenCurlyQuote]dictionaries\[CloseCurlyQuote] in other \
programming languages) organize groups of entries in terms of key-value \
pairs; this is especially useful when there is no numerical ordering implied, \
but we still want to group data together.  For example, our keys will be \
names of fruits in English, and the values are the corresponding names in \
Spanish:"
}], "Text",
 CellChangeTimes->{{3.8726101315702953`*^9, 3.872610204279051*^9}, {
  3.872610279101162*^9, 3.872610326030534*^9}, {3.8801314076467094`*^9, 
  3.880131408118922*^9}},
 CellTags->"assocHref",ExpressionUUID->"53b37954-8871-4f58-a3a5-587149ae0751"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"translate", "=", 
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<apple\>\"", "->", "\"\<manzana\>\""}], ",", " ", 
      RowBox[{"\"\<orange\>\"", "->", "\"\<naranja\>\""}]}], "|>"}]}], ";"}], 
  " ", 
  RowBox[{"(*", 
   RowBox[{"define", " ", "a", " ", "dictionary"}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.8726102083917437`*^9, 3.872610228348023*^9}, {
  3.872610267330463*^9, 3.872610306222577*^9}, {3.872610379605241*^9, 
  3.8726103892860203`*^9}},
 CellLabel->"In[34]:=",ExpressionUUID->"82409608-e3dd-4f5c-8a6f-6667e1066f57"],

Cell["\<\
We can access the entries by the key name, analogous to entries in a list:\
\>", "Text",
 CellChangeTimes->{{3.872610330343699*^9, 
  3.872610353768683*^9}},ExpressionUUID->"1edf6e51-b931-4ec8-b7a0-\
590dcd679882"],

Cell[BoxData[
 RowBox[{"translate", "[", "\"\<apple\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.8726103402706823`*^9, 3.872610342552593*^9}, {
  3.8726103815528393`*^9, 3.872610382492852*^9}},
 CellLabel->"In[35]:=",ExpressionUUID->"8f39ef8b-83de-4ae4-b015-f666e71ef2e0"],

Cell["\<\
We can also access lists of the keys and value, by applying the relevant \
functions to the association.\
\>", "Text",
 CellChangeTimes->{{3.872610355865161*^9, 3.872610366698859*^9}, {
  3.872777158005124*^9, 
  3.8727771677253942`*^9}},ExpressionUUID->"44a806eb-202e-4e45-9b46-\
52de376f5edd"],

Cell[BoxData[{
 RowBox[{"Keys", "[", "translate", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Values", "[", "translate", "]"}]}], "Input",
 CellChangeTimes->{{3.872610367876828*^9, 3.872610399004281*^9}},
 CellLabel->"In[36]:=",ExpressionUUID->"7e32a5f0-6d9b-43a1-ae49-1bf77c8decf1"],

Cell["\<\
A Map performed on an Association return a new Association where the keys are \
the same and the functions are applied to the values:\
\>", "Text",
 CellChangeTimes->{{3.872610403779121*^9, 3.872610414763023*^9}, {
  3.87261061504352*^9, 3.872610637203293*^9}, {3.872777175444942*^9, 
  3.872777180381184*^9}, {3.8999951586309595`*^9, 
  3.8999951610738125`*^9}},ExpressionUUID->"d3e1d44f-8df7-4c1d-bb8e-\
a3b66d5a1759"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"define", " ", "an", " ", "example", " ", "function"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"lookupImage", "[", "name_", "]"}], ":=", 
    RowBox[{"First", "@", " ", 
     RowBox[{"WebImageSearch", "[", 
      RowBox[{"name", ",", "\"\<Thumbnails\>\"", ",", "1"}], "]"}]}]}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "Map", " ", "applies", " ", "the", " ", "function", " ", "to", " ", 
     "each", " ", "value", " ", "in", " ", "the", " ", "Association"}], 
    "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Map", "[", "lookupImage", "]"}], "@", "translate"}]}]}]], "Input",\

 CellChangeTimes->{{3.872610419493053*^9, 3.872610444114974*^9}, {
  3.872610476370275*^9, 3.8726105109058027`*^9}, {3.872610582283633*^9, 
  3.8726106075419188`*^9}, {3.872755244969692*^9, 3.872755270831553*^9}},
 CellLabel->"In[38]:=",ExpressionUUID->"ae7921ae-1be8-4fba-9a7c-3612442db967"],

Cell[TextData[{
 StyleBox["7. ",
  FontWeight->"Bold"],
 "The symbol % fills in the last output and the symbol %% fills in the \
second-to-last output.  This can be useful in sequential processes."
}], "Text",
 CellChangeTimes->{{3.872774333092882*^9, 
  3.872774364389091*^9}},ExpressionUUID->"589ca580-a120-4938-9aee-\
c8f9c749a530"],

Cell[BoxData[{
 RowBox[{"Sin", "[", "1", "]"}], "\[IndentingNewLine]", 
 RowBox[{"%", "+", "2"}], "\[IndentingNewLine]", 
 RowBox[{"%%", "+", "3"}]}], "Input",
 CellChangeTimes->{{3.8727743711573677`*^9, 3.872774386284697*^9}},
 CellLabel->"In[40]:=",ExpressionUUID->"8e5b797e-cdba-403b-93f2-0afecb0dee7d"],

Cell[TextData[{
 StyleBox["8.  ",
  FontWeight->"Bold"],
 "In addition to using the many built-in Mathematica functions (described in \
the Help browser), it is sometimes useful to make use of user-contributed \
functions in the ",
 ButtonBox["Wolfram Function Repository",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://resources.wolframcloud.com/FunctionRepository/"], None},
  ButtonNote->"https://resources.wolframcloud.com/FunctionRepository/"],
 ".  These are accessed by using the ",
 ButtonBox["ResourceFunction",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://reference.wolfram.com/language/ref/ResourceFunction.html"], 
    None},
  ButtonNote->
   "http://reference.wolfram.com/language/ref/ResourceFunction.html"],
 " function, followed by a name, and any relevant arguments:"
}], "Text",
 CellChangeTimes->{{3.872777765109784*^9, 3.872777809826066*^9}, {
  3.872777950065174*^9, 
  3.872777984709771*^9}},ExpressionUUID->"3b2362d4-671c-4c8d-a243-\
dbcc4ce087fb"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"change", " ", "the", " ", "numbers"}], ",", " ", 
    RowBox[{"run", " ", "the", " ", "function", " ", "again"}], ",", 
    RowBox[{"and", " ", "see", " ", "what", " ", 
     RowBox[{"happens", "!"}]}]}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"ResourceFunction", "[", "\"\<PlayingCardGraphic\>\"", "]"}], "[", 
    RowBox[{"{", 
     RowBox[{"5", ",", "6", ",", "11"}], "}"}], "]"}], 
   "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.872777865438678*^9, 3.872777912301476*^9}, 
   3.872777945118601*^9, {3.872778179686139*^9, 3.872778277381385*^9}, {
   3.8728582117925615`*^9, 3.872858237522772*^9}, {3.8737999408089995`*^9, 
   3.8737999556166086`*^9}, {3.883646180366454*^9, 3.8836461819237967`*^9}, {
   3.897397771786172*^9, 3.897397773229301*^9}},
 CellLabel->"In[43]:=",ExpressionUUID->"6038a2e0-0fdc-4bfa-8e0a-fbbf555b7704"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Get and Preprocess the Data", "Section",
 CellChangeTimes->{{3.822149240497149*^9, 3.822149241346787*^9}, {
  3.823044247962643*^9, 3.8230442498756857`*^9}, {3.8722429476383553`*^9, 
  3.872242954863106*^9}, {3.8731436903501444`*^9, 
  3.8731437049219522`*^9}},ExpressionUUID->"b3fd0f3c-1e3b-4be1-beb4-\
d9d9ffb6a74e"],

Cell[TextData[{
 "Now let\[CloseCurlyQuote]s load in the train and test datasets, which are \
stored on GitHub (a repository for storing and sharing data and software \
code).  We will use the ",
 ButtonBox["Import",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/Import.html"], None},
  ButtonNote->"https://reference.wolfram.com/language/ref/Import.html"],
 " function to read this as a ",
 ButtonBox["Dataset:",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/Dataset.html"], None},
  ButtonNote->"https://reference.wolfram.com/language/ref/Dataset.html"]
}], "Text",
 CellChangeTimes->{{3.823098801622941*^9, 3.823098870776417*^9}, 
   3.8801314996611705`*^9, {3.88364662473407*^9, 
   3.883646639435886*^9}},ExpressionUUID->"7072bdf1-536a-4fae-a541-\
c466db339ce4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"load", " ", "the", " ", "datasets", " ", "from", " ", "GitHub"}], 
   " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"dataset", "=", 
    RowBox[{"Import", "[", "\[IndentingNewLine]", 
     RowBox[{
     "\"\<https://raw.githubusercontent.com/elizabeththrall/MLforPChem/main/\
MLcyaninedye/Data/cyaninedye_dataset.csv\>\"", ",", "\[IndentingNewLine]", 
      "\"\<Dataset\>\"", ",", 
      RowBox[{"HeaderLines", "\[Rule]", "1"}]}], "]"}]}], ";"}]}]], "Input",
 CellChangeTimes->{{3.822149244595151*^9, 3.822149320022242*^9}, {
   3.8221496348463507`*^9, 3.822149637746245*^9}, {3.822150104753182*^9, 
   3.822150107319346*^9}, {3.822395737575264*^9, 3.822395746801917*^9}, {
   3.8224026692393913`*^9, 3.822402672619112*^9}, {3.823018158898672*^9, 
   3.82301816591755*^9}, {3.823018215482975*^9, 3.8230182280027065`*^9}, {
   3.8230442717507553`*^9, 3.8230442721553526`*^9}, {3.823098884689198*^9, 
   3.823098932189242*^9}, 3.832673227364401*^9, {3.83267331434308*^9, 
   3.832673320233966*^9}, {3.8722429902702303`*^9, 3.872243080406748*^9}, {
   3.872243250402711*^9, 3.872243255703845*^9}, {3.8722439196267767`*^9, 
   3.87224396221485*^9}, {3.8727592132417793`*^9, 3.872759217968561*^9}, {
   3.872777211642462*^9, 3.8727772134297113`*^9}, {3.880129612594713*^9, 
   3.8801296290152006`*^9}, {3.8801296999866495`*^9, 3.880129771851968*^9}, 
   3.8973868473658047`*^9, {3.8973871169203157`*^9, 3.8973871297299023`*^9}, {
   3.897391094760109*^9, 3.897391117701394*^9}, {3.897397783236072*^9, 
   3.897397785291934*^9}, {3.8973978171905727`*^9, 3.89739782259085*^9}, 
   3.897729677735998*^9},
 CellLabel->"In[12]:=",ExpressionUUID->"2b6b6293-1ee3-4ad3-93bb-74804bbda6f9"],

Cell[TextData[{
 "(Note that ",
 ButtonBox["Import",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/Import.html"], None},
  ButtonNote->"https://reference.wolfram.com/language/ref/Import.html"],
 " can be used to import data from ",
 StyleBox["anywhere",
  FontSlant->"Italic"],
 ",",
 " including files on your local computer; here we are reading it from an \
internet URL).\n\nLet\[CloseCurlyQuote]s see what these data look like. You \
can display the current contents of a variable by entering its name and \
executing the cell:"
}], "Text",
 CellChangeTimes->{
  3.823098943422268*^9, {3.8231133221984653`*^9, 3.82311334372296*^9}, {
   3.872774408950446*^9, 3.872774410724917*^9}, {3.883646655276353*^9, 
   3.883646657225412*^9}, 
   3.88367510353815*^9},ExpressionUUID->"a926d07b-5745-4550-84c5-\
0e4d0157879f"],

Cell[BoxData[
 RowBox[{"dataset", " ", 
  RowBox[{"(*", 
   RowBox[{
   "display", " ", "the", " ", "contents", " ", "of", " ", "the", " ", 
    "variable", " ", "\"\<dataset\>"}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.822150130291142*^9, 3.8221501360420017`*^9}, {
  3.822402675607505*^9, 3.822402675995195*^9}, {3.823018230007017*^9, 
  3.8230182387987022`*^9}, {3.8230989475066338`*^9, 3.82309896297338*^9}, {
  3.872243999124589*^9, 3.872244012345277*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"c7eceeb2-6a89-46ba-86ff-e4809b7035cb"],

Cell["\<\
Take a look at the structure of this variable (you may need to use the scroll \
buttons to see each row and column, depending on your screen size):\
\>", "Text",
 CellChangeTimes->{
  3.872244054116185*^9, {3.872759233016572*^9, 
   3.872759254408389*^9}},ExpressionUUID->"e8527a4f-df4a-4300-827c-\
94fd8ba1ff38"],

Cell["Each row contains data for a different molecule", "Item",
 CellChangeTimes->{{3.87224410301265*^9, 
  3.872244117503632*^9}},ExpressionUUID->"2216b9fa-170c-4b1e-b0b4-\
1d969c54badd"],

Cell["\<\
The first column contains the molecule SMILES string. SMILES is a \
representation of the atoms and the bonds between them in the form of an \
ASCII string.\
\>", "Item",
 CellChangeTimes->{{3.87224410301265*^9, 3.872244125138968*^9}, {
  3.897388392647245*^9, 3.897388418192935*^9}, {3.8999952523935823`*^9, 
  3.899995252444649*^9}},ExpressionUUID->"e5aad24a-7b27-4507-8a2c-\
03ea1dad2ccf"],

Cell["\<\
The second column contains the molecule InChIKey. InChIKey is another unique \
chemical identifier in the form of an ASCII string.\
\>", "Item",
 CellChangeTimes->{{3.87224410301265*^9, 3.8722441312024508`*^9}, 
   3.897388424235982*^9, {3.8999953023905563`*^9, 
   3.899995302788536*^9}},ExpressionUUID->"2ea6cd70-999f-4306-be1c-\
545a92547dba"],

Cell["\<\
The next 13 columns contain different molecular features (described below). \
These are the variables that we will use to predict the wavelength of maximum \
absorbance. Features are sometimes called \"independent\" or \"predictor\" \
variables.\
\>", "Item",
 CellChangeTimes->{{3.87224410301265*^9, 3.872244138703627*^9}, {
  3.880129134214676*^9, 3.8801291347196856`*^9}, {3.8801298945670137`*^9, 
  3.8801298975420303`*^9}, {3.8801315296874733`*^9, 
  3.8801315335339007`*^9}},ExpressionUUID->"8c07e5ca-2d75-4387-a6a0-\
5a5e574933e6"],

Cell["\<\
The final column contains the wavelength of maximum absorbance \
(MaxAbsorbanceWavelength) for each molecule. This is the target variable that \
we want to predict (sometimes called the \[OpenCurlyDoubleQuote]dependent\
\[CloseCurlyDoubleQuote] or \[OpenCurlyDoubleQuote]response\
\[CloseCurlyDoubleQuote] variable).\
\>", "Item",
 CellChangeTimes->{{3.87224410301265*^9, 3.872244139201701*^9}, {
  3.880129114224469*^9, 3.880129124742642*^9}, {3.8801299031705303`*^9, 
  3.880129905391905*^9}},ExpressionUUID->"fd192e07-8dcc-4365-b9cf-\
eca1aff3c394"],

Cell[TextData[{
 StyleBox["Features:",
  FontWeight->"Bold"],
 "\nOur regression analysis will use the 13 features below, which were \
computed for each molecule in the dataset."
}], "Text",
 CellChangeTimes->{
  3.872244157783339*^9, {3.8801291627017956`*^9, 3.880129175847979*^9}, {
   3.880131541032484*^9, 
   3.8801316155200467`*^9}},ExpressionUUID->"ad58c7bc-5596-41e1-994d-\
7f43caee7f39"],

Cell["AromaticRingCount: Number of aromatic rings in the molecule", "Item",
 CellChangeTimes->{{3.8722441735702553`*^9, 
  3.872244178615464*^9}},ExpressionUUID->"1d104842-c982-4ea2-8ac4-\
3e98f18e9ad0"],

Cell["\<\
HBondDonorCount: Number of hydrogen bond donors in the molecule\
\>", "Item",
 CellChangeTimes->{{3.8722441735702553`*^9, 
  3.872244181898383*^9}},ExpressionUUID->"78bed1c2-9aef-46eb-b8fd-\
f6384f4c4bfb"],

Cell["\<\
HBondAcceptorCount: Number of hydrogen bond acceptors in the molecule\
\>", "Item",
 CellChangeTimes->{{3.8722441735702553`*^9, 
  3.872244184807847*^9}},ExpressionUUID->"42d91439-c943-481f-b4e9-\
9cd1c6691af7"],

Cell["\<\
FractionCarbonSP3: Fraction of carbon atoms in the molecule with sp3 \
hybridization\
\>", "Item",
 CellChangeTimes->{{3.8722441735702553`*^9, 
  3.87224418770755*^9}},ExpressionUUID->"e927f10b-7ed2-41b1-b981-\
d5d12740d6ac"],

Cell[TextData[{
 "HeteroatomCount: Total number of heteroatoms (",
 StyleBox["i.e.",
  FontSlant->"Italic"],
 ", atoms other than carbon) in cyclic rings in the molecule"
}], "Item",
 CellChangeTimes->{{3.8722441735702553`*^9, 
  3.872244191023334*^9}},ExpressionUUID->"464842d3-6351-4e1f-af39-\
4130b98c2e35"],

Cell[TextData[{
 "HeterocycleCount: Total number of heterocyclic rings (",
 StyleBox["i.e.",
  FontSlant->"Italic"],
 ", rings containing atoms other than carbon) in the molecule"
}], "Item",
 CellChangeTimes->{{3.8722441735702553`*^9, 
  3.872244194040449*^9}},ExpressionUUID->"99e074fe-2a23-47f3-a6c7-\
fadcfa34aaa2"],

Cell[TextData[{
 "RotatableBondCount: Number of bonds that can be rotated in the molecule (",
 StyleBox["i.e.",
  FontSlant->"Italic"],
 ", the number of non-cyclic sp3 bonds)"
}], "Item",
 CellChangeTimes->{{3.8722441735702553`*^9, 
  3.872244197000787*^9}},ExpressionUUID->"2590f5f2-2117-445c-a8f0-\
793ae96b22fa"],

Cell["MolecularMass: Mass of the molecule", "Item",
 CellChangeTimes->{{3.8722441735702553`*^9, 
  3.872244200747303*^9}},ExpressionUUID->"b558e433-68ff-4169-8ab3-\
dba37d5a64fd"],

Cell["\<\
DegreeOfUnsaturation: Total number of pi bonds and rings in the molecule\
\>", "Item",
 CellChangeTimes->{{3.8722441735702553`*^9, 
  3.8722442041199903`*^9}},ExpressionUUID->"09b72a7d-b6bc-4020-baef-\
2a4f6df81a01"],

Cell["\<\
MinEllipsoidLength: The major axis length of the smallest volume ellipsoid \
that could contain the molecule\
\>", "Item",
 CellChangeTimes->{{3.8722441735702553`*^9, 3.872244206861334*^9}, 
   3.899995368421809*^9},ExpressionUUID->"0233a284-d162-4631-bc28-\
94aabb4bc425"],

Cell["\<\
MaxDistance: The largest distance between any pair of atoms in the molecule\
\>", "Item",
 CellChangeTimes->{{3.8722441735702553`*^9, 3.872244209410717*^9}, 
   3.899995369495621*^9},ExpressionUUID->"70c25c2a-ee80-41f7-a11f-\
f94b4c56f5c0"],

Cell["\<\
LongestPiChain: Longest continuous path of conjugated pi bonds\
\>", "Item",
 CellChangeTimes->{{3.8722441735702553`*^9, 3.8722442122825127`*^9}, {
  3.8999953710471706`*^9, 
  3.8999953712876368`*^9}},ExpressionUUID->"c6ad8d4b-bb8a-4586-ae90-\
1d8af94e300b"],

Cell["\<\
LinkerLength: Longest conjugated pi chain that is not part of a ring\
\>", "Item",
 CellChangeTimes->{{3.8722441735702553`*^9, 3.8722442119095793`*^9}, {
  3.8801316498647842`*^9, 3.8801316513618064`*^9}, {3.89999537439614*^9, 
  3.8999953746934214`*^9}},ExpressionUUID->"01ee17b9-0c9a-4637-af00-\
062b6f642e69"],

Cell["\<\

Sometimes removing outliers from the dataset can help improve model \
performance.  Outliers are data points that differ drastically from the rest \
of the observations. Machine Learning models generalize from training data to \
make predictions; if they learn from data with extreme outliers, they may \
perform worse.\
\>", "Text",
 CellChangeTimes->{
  3.872244221982106*^9, {3.87276230491533*^9, 3.87276232721093*^9}, {
   3.8727626341845837`*^9, 3.872762635016638*^9}, {3.872774421036778*^9, 
   3.872774455044842*^9}, {3.87277724789375*^9, 3.872777266533442*^9}, {
   3.8728583599732323`*^9, 3.8728583991802654`*^9}, {3.872858567961846*^9, 
   3.872858583966776*^9}, {3.8728586152249217`*^9, 3.8728586290746384`*^9}, {
   3.872858664034958*^9, 
   3.872858755939559*^9}},ExpressionUUID->"534a778f-ba2a-4535-a749-\
e62c29e03d49"],

Cell["https://en.wikipedia.org/wiki/Outlier", "Item",
 CellChangeTimes->{{3.8722441735702553`*^9, 3.8722442041199903`*^9}, {
  3.8728586836152945`*^9, 
  3.872858688114727*^9}},ExpressionUUID->"cee1334a-7793-454f-94f5-\
3f2f2c00a2d3"],

Cell[TextData[{
 "It is always useful to identify possible outliers by charting a ",
 ButtonBox["Histogram",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://reference.wolfram.com/language/ref/Histogram.html"], None},
  ButtonNote->"http://reference.wolfram.com/language/ref/Histogram.html"],
 " of the data.  (The option ",
 ButtonBox["PlotRange",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://reference.wolfram.com/language/ref/PlotRange.html"], None},
  ButtonNote->"http://reference.wolfram.com/language/ref/PlotRange.html"],
 " is set to All, as otherwise Mathematica will focus the attention of the \
plot on the region with the most information.)  A good place to start is by \
examining the output values:"
}], "Text",
 CellChangeTimes->{{3.8728587447365804`*^9, 3.8728587623566895`*^9}, {
  3.872967708823411*^9, 3.872967742728684*^9}, {3.8973877928191*^9, 
  3.897387800130293*^9}},ExpressionUUID->"62fce50f-3d01-49ca-97fc-\
ce0c1946f204"],

Cell[BoxData[
 RowBox[{"Histogram", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"dataset", "[", 
    RowBox[{"All", ",", "\"\<MaxAbsorbanceWavelength\>\""}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"PlotRange", "->", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.872759282737224*^9, 3.872759283733244*^9}, {
  3.8727621727003717`*^9, 3.872762204468397*^9}, {3.872762294715502*^9, 
  3.872762296491613*^9}, {3.872762331307272*^9, 3.872762333091214*^9}, {
  3.8801297924275217`*^9, 3.880129795716565*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"24aa2a75-7347-4cfa-b8e7-1013b36ab1df"],

Cell[TextData[{
 "So far, so good.  Notice how there are different numbers of entries for \
each wavelength, but in general there appear to be a few examples for each \
value and none of the values appears to be extremely different. \n\nIn \
contrast, let\[CloseCurlyQuote]s look at one of the input properties\
\[LongDash]the number of aromatic rings (",
 StyleBox["AromaticRingCount)",
  FontSlant->"Italic"],
 ":"
}], "Text",
 CellChangeTimes->{{3.8727626370963717`*^9, 3.872762647744425*^9}, {
   3.872762858382895*^9, 3.872762877502561*^9}, 3.872774461093462*^9, {
   3.872777275349381*^9, 3.872777289989135*^9}, 3.883645831936167*^9, {
   3.897387803044219*^9, 3.897387867355472*^9}, {3.897388155447549*^9, 
   3.897388171219179*^9}, {3.89738821750975*^9, 3.897388236140316*^9}, {
   3.8973888669524117`*^9, 
   3.8973888798103848`*^9}},ExpressionUUID->"4835dcec-f2b5-49b6-9205-\
b4439c9300fd"],

Cell[BoxData[
 RowBox[{"Histogram", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"dataset", "[", 
    RowBox[{"All", ",", "\"\<AromaticRingCount\>\""}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"PlotRange", "->", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.897387852377046*^9, 3.897387859003093*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"aa1df625-a298-4d0d-9095-8c5996b02c4c"],

Cell["\<\
Notice the outlier\[LongDash]there is one example with 16 aromatic rings, \
which is unlikely to be well represented by the rest of the data, which only \
have 8 or fewer. Outliers can be the result of errors in the dataset or they \
may be genuine \[OpenCurlyDoubleQuote]exceptional\[CloseCurlyDoubleQuote] \
values. In either case, they will not be well described by the model that you \
construct, as there are no other examples with which to compare them.

 In general, it is a good practice to look through each variable to identify \
possible outliers and remove these before proceeding.  One way to remove the \
anomalies is to programmatically based on your investigation:\
\>", "Text",
 CellChangeTimes->{{3.8727626370963717`*^9, 3.872762647744425*^9}, {
   3.872762858382895*^9, 3.872762877502561*^9}, 3.872774461093462*^9, {
   3.872777275349381*^9, 3.872777289989135*^9}, 3.883645831936167*^9, {
   3.897387803044219*^9, 3.8973878428608103`*^9}, {3.897387876677225*^9, 
   3.897387964552905*^9}, {3.8973882583653517`*^9, 3.897388310221437*^9}, {
   3.897389186641012*^9, 3.897389190815488*^9}, {3.89738948747444*^9, 
   3.897389496056088*^9}, {3.897389822811761*^9, 3.897389824258946*^9}, {
   3.897390253899664*^9, 3.8973902799783573`*^9}, {3.897390311773547*^9, 
   3.897390378555552*^9}, {3.897390437010622*^9, 3.897390466446618*^9}, {
   3.8973905666951323`*^9, 3.897390575032201*^9}, {3.8973912297478647`*^9, 
   3.897391233569429*^9}},ExpressionUUID->"510df9a1-eca4-463d-ad1c-\
b7d428dafdcf"],

Cell[BoxData[
 RowBox[{
  RowBox[{"dataset", "=", 
   RowBox[{"dataset", "[", 
    RowBox[{"Select", "[", 
     RowBox[{
      RowBox[{"#AromaticRingCount", "<", "10"}], "&"}], "]"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.897389829773314*^9, 3.897389868750752*^9}, {
   3.89738993301243*^9, 3.897389934484099*^9}, {3.897390015265573*^9, 
   3.897390024233823*^9}, {3.8973902444454117`*^9, 3.897390245571208*^9}, {
   3.897390383031258*^9, 3.897390383262261*^9}, 3.89739122069909*^9},
 CellLabel->"In[16]:=",ExpressionUUID->"43e8e350-0696-407e-9631-8505f1717a8b"],

Cell[TextData[{
 "We can also automatically process the  dataset, analysing it for anomalies, \
and then resetting the ",
 StyleBox["dataset",
  FontSlant->"Italic"],
 " variable to have the \[OpenCurlyDoubleQuote]anomaly free\
\[CloseCurlyDoubleQuote] values: "
}], "Text",
 CellChangeTimes->{{3.8973913078969307`*^9, 
  3.897391310258706*^9}},ExpressionUUID->"730ab11e-9ddc-403e-b11b-\
d2bf41c72ceb"],

Cell[BoxData[
 RowBox[{"dataset", "=", 
  RowBox[{"DeleteAnomalies", "[", "dataset", "]"}]}]], "Input",
 CellChangeTimes->{{3.8727625052904987`*^9, 3.872762558905149*^9}, {
  3.872762681336316*^9, 3.872762714015972*^9}, {3.872762787056046*^9, 
  3.8727627996313763`*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"b47b2894-cfe1-4bd2-90c3-d139ebca0f61"],

Cell[TextData[{
 "(A companion function, ",
 ButtonBox["FindAnomalies",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://reference.wolfram.com/language/ref/FindAnomalies.html"], None},
  ButtonNote->
   "http://reference.wolfram.com/language/ref/FindAnomalies.html"],
 " could be used to extract these anomalies for further investigation and \
visualization). ",
 ButtonBox["DeleteAnomalies",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://reference.wolfram.com/language/ref/DeleteAnomalies.html"], 
    None},
  ButtonNote->
   "http://reference.wolfram.com/language/ref/DeleteAnomalies.html"],
 " removes 3 additional anomalous data points after we have removed the \
outlier previously observed in the histogram:"
}], "Text",
 CellChangeTimes->{{3.8727627820792923`*^9, 3.872762784607341*^9}, {
  3.8727628270309896`*^9, 3.8727628533029137`*^9}, {3.8727659549190702`*^9, 
  3.8727660033426437`*^9}, {3.872774473093182*^9, 3.872774479964917*^9}, {
  3.872777321445278*^9, 3.872777336797441*^9}, {3.897391409578147*^9, 
  3.8973914151104507`*^9}, {3.897391480796238*^9, 3.897391481121539*^9}, {
  3.897391512839005*^9, 
  3.89739154588859*^9}},ExpressionUUID->"ab07599e-d074-406b-8295-\
ae0fbeb4164f"],

Cell[BoxData[
 RowBox[{"Histogram", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"dataset", "[", 
    RowBox[{"All", ",", "\"\<MaxAbsorbanceWavelength\>\""}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"PlotRange", "->", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.872762536889778*^9, 3.87276253749758*^9}, {
  3.87276282498419*^9, 3.872762825911125*^9}, {3.8801298148865533`*^9, 
  3.880129817956973*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"226308c3-4cd0-4a0a-b5f5-3ff0937f6b6a"],

Cell[CellGroupData[{

Cell["Data Selection with Structured Datasets", "Subsection",
 CellChangeTimes->{{3.8230991575903063`*^9, 
  3.823099172045245*^9}},ExpressionUUID->"a4dbb9f8-d8e5-450b-b14e-\
c4fd2d4b678f"],

Cell[TextData[{
 "A tabular dataset can be thought of as storing a collection of values in a \
rectangular \[OpenCurlyDoubleQuote]grid.\[CloseCurlyDoubleQuote]  We can see \
the size of that grid using the ",
 ButtonBox["Dimensions",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/Dimensions.html"], None},
  ButtonNote->"https://reference.wolfram.com/language/ref/Dimensions.html"],
 " function:"
}], "Text",
 CellChangeTimes->{{3.823099370706023*^9, 3.823099396956738*^9}, {
  3.823107114940926*^9, 3.8231071242887897`*^9}, {3.8727773761011753`*^9, 
  3.8727773923731813`*^9}, {3.899995479859625*^9, 
  3.899995480419366*^9}},ExpressionUUID->"f369088d-439c-4768-ae4b-\
9f5b4531d086"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Dimensions", "[", "dataset", "]"}], 
  RowBox[{"(*", 
   RowBox[{"shape", " ", "of", " ", 
    RowBox[{"dataset", "?"}]}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.872248166557942*^9, 3.872248173148755*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"e3e2283b-0261-4e6c-a2fe-16690d8e555a"],

Cell["\<\
(Note:  You can always learn more about built-in Mathematica functions by \
typing ? followed by the function name.  Clicking the \
\[OpenCurlyDoubleQuote]i\[CloseCurlyDoubleQuote] button in the upper right \
hand corner gives more information:\
\>", "Text",
 CellChangeTimes->{{3.8231071267012444`*^9, 
  3.8231071860276337`*^9}},ExpressionUUID->"142181a7-de72-4e99-840b-\
57b9549fa1ec"],

Cell[BoxData[
 RowBox[{"?", "Dimensions"}]], "Input",
 CellChangeTimes->{{3.8231071517366447`*^9, 3.823107154679029*^9}},
 CellLabel->"In[20]:=",ExpressionUUID->"0f837ee5-347c-45fb-b0cc-3bc46d420f27"],

Cell["\<\
We will often need to access the values stored in particular positions in a \
variable. We can do this by specifying the indices corresponding to that \
position:\
\>", "Text",
 CellChangeTimes->{
  3.8230991793421097`*^9, {3.872777405461329*^9, 
   3.872777407613009*^9}},ExpressionUUID->"a395e22c-f560-4c99-aff7-\
cf5419f86f74"],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["variable[[row, column]] ",
  FontSlant->"Italic"],
 "extracts the value at the specified row and column.  "
}], "Item",
 CellChangeTimes->{{3.8230994111126137`*^9, 3.823099426955551*^9}, {
  3.8230995071377172`*^9, 3.823099532222617*^9}, {3.872755314971985*^9, 
  3.872755316708293*^9}, {3.883645847210758*^9, 
  3.883645848583823*^9}},ExpressionUUID->"f8467064-a3f3-4608-a3df-\
125f415b3365"],

Cell["\<\
Note the two square brackets (access the elements in a list of data) as \
opposed to the single brackets used to specify the arguments to a function.\
\>", "Subitem",
 CellChangeTimes->{{3.8230994111126137`*^9, 3.823099426955551*^9}, {
  3.8230995071377172`*^9, 
  3.823099530616314*^9}},ExpressionUUID->"a5286a8d-ea02-4ad8-8184-\
c230f740af52"]
}, Open  ]],

Cell[TextData[{
 "\[OpenCurlyDoubleQuote]",
 StyleBox[";;",
  FontSlant->"Italic"],
 "\[CloseCurlyDoubleQuote] species a range of values."
}], "Item",
 CellChangeTimes->{{3.8230994111126137`*^9, 3.823099440119391*^9}, 
   3.823099612653792*^9, {3.823099705414146*^9, 
   3.8230997054146*^9}},ExpressionUUID->"165057d2-4e9e-462e-89b7-\
a5ba63475291"],

Cell[TextData[{
 StyleBox["\[OpenCurlyDoubleQuote]All\[CloseCurlyDoubleQuote]",
  FontSlant->"Italic"],
 " specifies that we should take all of the values along a dimension."
}], "Item",
 CellChangeTimes->{{3.8230994111126137`*^9, 3.823099440119391*^9}, 
   3.823099612653792*^9, {3.8230997057227163`*^9, 
   3.823099729882*^9}},ExpressionUUID->"ee900886-576d-4edd-b7ee-78b1c6ef6840"],

Cell[TextData[{
 "We can also count the indices from the \[OpenCurlyDoubleQuote]end\
\[CloseCurlyDoubleQuote] using negative numbers, e.g., ",
 StyleBox["variable[[-2]] ",
  FontSlant->"Italic"],
 "returns the second-from-last element."
}], "Item",
 CellChangeTimes->{{3.8230994111126137`*^9, 3.823099455499363*^9}, {
  3.872777413557345*^9, 
  3.872777435789103*^9}},ExpressionUUID->"8e131fae-fed0-481a-aebf-\
32c6a93f2202"],

Cell["\<\
Note that in Mathematica, index values start from 1 (instead of 0 like some \
other programming languages such as C and Python).\
\>", "Item",
 CellChangeTimes->{{3.8230994111126137`*^9, 3.823099475986847*^9}, 
   3.823099609903928*^9, {3.872244290794249*^9, 
   3.8722442932196913`*^9}},ExpressionUUID->"1522bf95-2871-44ec-b209-\
202cb2f7f349"],

Cell["For example:", "Text",
 CellChangeTimes->{
  3.823099484571384*^9},ExpressionUUID->"470e91b1-d5fd-4537-9947-\
164a66e83f21"],

Cell[TextData[{
 StyleBox["dataset[[2;;3, 1]]",
  FontSlant->"Italic"],
 "  take rows 2 and 3 and the first column"
}], "Item",
 CellChangeTimes->{{3.823099634683651*^9, 3.8230996879790497`*^9}, {
  3.823099750980075*^9, 3.823099771059081*^9}, {3.872244270530767*^9, 
  3.8722442713097277`*^9}},ExpressionUUID->"d30a26d8-cd1b-4b9e-b971-\
cedecd08d70c"],

Cell[TextData[{
 StyleBox["dataset[[ All, 1]]",
  FontSlant->"Italic"],
 "  take all rows and the first column"
}], "Item",
 CellChangeTimes->{{3.823099634683651*^9, 3.823099698656006*^9}, {
   3.8230997333036346`*^9, 3.8230997682127657`*^9}, {3.8722442721273518`*^9, 
   3.872244273207196*^9}, 
   3.899996053458552*^9},ExpressionUUID->"418ef362-2638-4c6d-98f8-\
e2029ad32777"],

Cell[TextData[{
 StyleBox["dataset[[All, 3;;5]] ",
  FontSlant->"Italic"],
 " take all rows and third through fifth columns"
}], "Item",
 CellChangeTimes->{{3.823099634683651*^9, 3.823099698656006*^9}, {
  3.8230997333036346`*^9, 3.8230997985175037`*^9}, {3.872244274760743*^9, 
  3.8722442758448143`*^9}},ExpressionUUID->"d5ed92a1-fe4e-4297-b99c-\
3ce969f2f3d2"],

Cell["\<\
Try the following examples.  Can you predict what the output will be?\
\>", "Text",
 CellChangeTimes->{{3.8230998065477543`*^9, 
  3.823099822192205*^9}},ExpressionUUID->"c506b615-8af8-47ce-a8ac-\
55955b3e9adb"],

Cell[BoxData[
 RowBox[{
  RowBox[{"dataset", "[", 
   RowBox[{"[", "1", "]"}], "]"}], " ", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "access", " ", "an", " ", "entry", " ", "by", " ", "its", " ", 
     "indices"}], ",", " ", 
    RowBox[{"using", " ", "double", " ", "square", " ", "brackets"}]}], 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.872608888411932*^9, 3.872608911512705*^9}, 
   3.87277745242982*^9, {3.8801319525285616`*^9, 3.8801319531325493`*^9}, {
   3.883645904801343*^9, 3.8836459054314137`*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"f691a4d8-286f-4272-ad6b-8a4ec042e59e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"dataset", "[", 
   RowBox[{"[", 
    RowBox[{"1", ",", "1"}], "]"}], "]"}], 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"access", " ", "entry", " ", "by", " ", "its", " ", "indices"}], 
    ",", " ", 
    RowBox[{"using", " ", "double", " ", "square", " ", "brackets"}]}], 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.823044475011709*^9, 3.823044535109525*^9}, {
  3.872244266979138*^9, 3.872244267708309*^9}, {3.880131965305663*^9, 
  3.880131965416129*^9}, {3.883645909841445*^9, 3.8836459133816977`*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"9e4ce3d9-c9fe-4b8d-b272-7a7277c12007"],

Cell[BoxData[
 RowBox[{
  RowBox[{"dataset", "[", 
   RowBox[{"[", 
    RowBox[{
     RowBox[{"1", ";;", "3"}], ",", " ", 
     RowBox[{"1", ";;", "10"}]}], "]"}], "]"}], 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "get", " ", "first", " ", "3", " ", "rows", " ", "and", " ", "the", " ", 
     "first", " ", "10", " ", "columns", " ", "using", " ", "`"}], ";;", 
    "`"}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.872244317446878*^9, 3.872244318090406*^9}, {
  3.883645931873567*^9, 3.8836459382133207`*^9}},
 CellLabel->"In[23]:=",ExpressionUUID->"96e79342-33e3-455b-8fb1-16ca0bbac6e9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "predict", " ", "what", " ", "the", " ", "output", " ", "of", " ", "this", 
    " ", "line", " ", "of", " ", "code", " ", "will", " ", "be"}], " ", 
   "*)"}], "\n", 
  RowBox[{"dataset", "[", 
   RowBox[{"[", 
    RowBox[{
     RowBox[{"1", ";;", "3"}], ",", 
     RowBox[{"1", ";;", "3"}]}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.823099845079996*^9, 3.823099861901079*^9}, {
  3.8231003211240873`*^9, 3.8231003239084806`*^9}, {3.872244319210251*^9, 
  3.872244320257564*^9}, {3.87297060077875*^9, 3.872970601578815*^9}},
 CellLabel->"In[24]:=",ExpressionUUID->"e8763933-77d2-4e0c-8d42-6cc902ff954e"],

Cell["\<\
The columns in datasets can also be addressed by name.  For example, the \
SMILES column in the first few rows:\
\>", "Text",
 CellChangeTimes->{{3.823100329295319*^9, 
  3.8231003626459837`*^9}},ExpressionUUID->"67f18ed1-2f06-4e52-8a39-\
526d415d1a2e"],

Cell[BoxData[
 RowBox[{"dataset", "[", 
  RowBox[{"[", 
   RowBox[{
    RowBox[{"1", ";;", "3"}], ",", "\"\<SMILES\>\""}], "]"}], "]"}]], "Input",\

 CellChangeTimes->{{3.823100363733984*^9, 3.823100380545808*^9}, {
  3.872244323432725*^9, 3.87224432575511*^9}},
 CellLabel->"In[25]:=",ExpressionUUID->"4f9e27c8-5a28-4985-8cc7-316fd0ee0b81"],

Cell["\<\
This can also be generalized to select a collection of columns  by providing \
a list as input:\
\>", "Text",
 CellChangeTimes->{{3.872608844138666*^9, 
  3.872608867671411*^9}},ExpressionUUID->"d6713763-bd9d-4272-89ce-\
84165f24090e"],

Cell[BoxData[
 RowBox[{"dataset", "[", 
  RowBox[{"[", 
   RowBox[{
    RowBox[{"1", ";;", "3"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<MolecularMass\>\"", ",", "\"\<MaxAbsorbanceWavelength\>\""}], 
     "}"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.8726088619444313`*^9, 3.8726088622050247`*^9}, {
  3.872608920463801*^9, 3.8726089320335093`*^9}, {3.880129850644046*^9, 
  3.8801298551662846`*^9}},
 CellLabel->"In[26]:=",ExpressionUUID->"e8011728-cbbd-4fd1-bb1e-992b6e31d780"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Visualizing molecular structure", "Subsection",
 CellChangeTimes->{{3.8224062335479193`*^9, 3.8224062364663963`*^9}, {
  3.823076398982312*^9, 3.823076400197507*^9}, {3.8231116305442133`*^9, 
  3.82311163679956*^9}},ExpressionUUID->"def53aa9-b486-4e59-b4fc-\
3c7aae82815f"],

Cell[TextData[{
 "To continue familiarizing ourselves with the dataset, we can visualize the \
structures of the different cyanine dyes.  Before we do so, let\
\[CloseCurlyQuote]s first get a quick overview of making and plotting \
molecules in general in Mathematica.  The ",
 ButtonBox["Molecule",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/Molecule.html"], None},
  ButtonNote->"https://reference.wolfram.com/language/ref/Molecule.html"],
 " function can take input names (either in machine-readable ",
 ButtonBox["SMILES",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://en.wikipedia.org/wiki/Simplified_molecular-input_line-entry_\
system"], None},
  ButtonNote->
   "https://en.wikipedia.org/wiki/Simplified_molecular-input_line-entry_\
system"],
 " or human-readable ",
 ButtonBox["IUPAC name",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://en.wikipedia.org/wiki/IUPAC_nomenclature_of_organic_\
chemistry"], None},
  ButtonNote->
   "https://en.wikipedia.org/wiki/IUPAC_nomenclature_of_organic_chemistry"],
 ") and covert them into a machine representation:"
}], "Text",
 CellChangeTimes->{{3.822406544021036*^9, 3.822406556405654*^9}, {
   3.822408601128043*^9, 3.822408627169105*^9}, {3.823076406397807*^9, 
   3.823076416709776*^9}, {3.8231116393223877`*^9, 3.823111698365699*^9}, {
   3.872777488408393*^9, 3.87277752021838*^9}, {3.873800050451808*^9, 
   3.8738000868314476`*^9}, {3.880131996598996*^9, 3.8801320053010426`*^9}, 
   3.899996110459186*^9},ExpressionUUID->"99ec7554-c192-40bf-abde-\
8d461e746548"],

Cell[BoxData[
 RowBox[{"mol", "=", 
  RowBox[{"Molecule", "[", "\"\<CN(C)C(=N)N(C)C\>\"", "]"}]}]], "Input",
 CellChangeTimes->{{3.8224064736999617`*^9, 3.822406495197997*^9}, {
  3.82311172263205*^9, 3.8231117237085133`*^9}},
 CellLabel->"In[27]:=",ExpressionUUID->"b9d8ee84-b330-427c-9349-bc0f137eb20e"],

Cell[TextData[{
 "The ",
 ButtonBox["MoleculePlot",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/MoleculePlot.html"], None},
  ButtonNote->
   "https://reference.wolfram.com/language/ref/MoleculePlot.html"],
 " function takes a Molecule as an input and returns a two-dimensional figure:"
}], "Text",
 CellChangeTimes->{{3.8231117034337893`*^9, 3.823111755417042*^9}, {
  3.8801320151611805`*^9, 
  3.880132016458391*^9}},ExpressionUUID->"2dd8dcfb-0037-47fc-975a-\
69051713573b"],

Cell[BoxData[
 RowBox[{"MoleculePlot", "[", "mol", "]"}]], "Input",
 CellChangeTimes->{{3.822406517189495*^9, 3.822406521235197*^9}, {
  3.823111706959717*^9, 3.823111728692659*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"c81d5410-8cff-48fe-affb-76c43e572785"],

Cell[TextData[{
 "What do you think ",
 ButtonBox["MoleculePlot3D",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/MoleculePlot3D.html"], 
    None},
  ButtonNote->
   "https://reference.wolfram.com/language/ref/MoleculePlot3D.html"],
 " does?  (After you run the code below, be sure to click and drag the result \
to rotate the molecule!)"
}], "Text",
 CellChangeTimes->{{3.823111762992073*^9, 3.823111778958506*^9}, {
  3.872777529069409*^9, 3.872777542789508*^9}, {3.873800174898383*^9, 
  3.8738002510097666`*^9}, {3.883646223479395*^9, 
  3.883646236271546*^9}},ExpressionUUID->"9f3b5f93-d2a5-4ed2-be45-\
87b536320f37"],

Cell[BoxData[
 RowBox[{"MoleculePlot3D", "[", "mol", "]"}]], "Input",
 CellChangeTimes->{{3.8224065273990593`*^9, 3.822406527929311*^9}, {
  3.823111759467663*^9, 3.8231117611686993`*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"fab79c80-4a14-475d-97d5-224e09951b03"],

Cell[TextData[{
 "(One caveat: this structure is not necessarily the true 3D structure of the \
molecule; rather it is the result of a molecular mechanics calculation, \
selecting a single random conformer.)\n\nNow let\[CloseCurlyQuote]s use these \
tools to visualize some of the molecules in our dataset.  The code block \
below displays the structure of the molecule in the row of our dataset \
corresponding to the specified ",
 StyleBox["molIdx",
  FontSlant->"Italic"],
 " variable. Try changing ",
 StyleBox["molIdx",
  FontSlant->"Italic"],
 " to visualize the structure of a few different molecules:"
}], "Text",
 CellChangeTimes->{{3.872248195493452*^9, 3.872248197707069*^9}, {
  3.8722521108130198`*^9, 3.8722521438470984`*^9}, {3.8730179569247932`*^9, 
  3.873017966052355*^9}, {3.8735592425631404`*^9, 3.873559264793912*^9}, {
  3.87355938022585*^9, 3.873559415746275*^9}, {3.8735594458506184`*^9, 
  3.8735594503385105`*^9}, {3.87380025315361*^9, 3.8738002637060823`*^9}, {
  3.883645989619154*^9, 3.8836460153016167`*^9}, {3.8999961446819425`*^9, 
  3.899996144874606*^9}},ExpressionUUID->"d6682da8-7a65-435a-8dff-\
eca03e823709"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"molIdx", "=", "1"}], ";"}], "  ", 
   RowBox[{"(*", " ", 
    RowBox[{
    "index", " ", "value", " ", "corresponding", " ", "to", " ", "the", " ", 
     "row", " ", "in", " ", "our", " ", "dataset"}], " ", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"MoleculePlot", "@", 
    RowBox[{"Molecule", "@", 
     RowBox[{"dataset", "[", 
      RowBox[{"[", 
       RowBox[{"molIdx", ",", "1"}], "]"}], "]"}], " ", 
     RowBox[{"(*", " ", 
      RowBox[{
      "display", " ", "the", " ", "molecule", " ", "in", " ", "row", " ", 
       "molIdx"}], " ", "*)"}]}]}]}]}]], "Input",
 CellChangeTimes->{{3.872252120664597*^9, 3.8722521315972767`*^9}, {
  3.8735593355000772`*^9, 3.8735593742616262`*^9}, {3.873559424835512*^9, 
  3.873559494802229*^9}, {3.8801320481104107`*^9, 3.8801320543830414`*^9}, {
  3.883646043127768*^9, 3.8836460755088053`*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"aa859fab-497d-4e8d-9bdf-b0fe5001af6f"],

Cell["\<\
Alternatively, we can display a random sample of molecules in the dataset. \
Run the first code block below to define an accessory function, then run the \
second one to display a random selection of 5 molecular structures from the \
dataset:\
\>", "Text",
 CellChangeTimes->{{3.872252269697126*^9, 3.872252285582341*^9}, 
   3.8727775484093857`*^9, {3.8735595123934155`*^9, 3.87355958908407*^9}, {
   3.883646089668704*^9, 
   3.883646090066741*^9}},ExpressionUUID->"510628dd-f643-4749-9e06-\
b2099c99c700"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "define", " ", "a", " ", "function", " ", "to", " ", "perform", " ", "the",
     " ", "sequence", " ", "of", " ", "operations"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"plotMolecules", "[", "smiles_", "]"}], ":=", 
   RowBox[{"MoleculePlot", "@", 
    RowBox[{"Molecule", "[", "smiles", "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.872252287679491*^9, 3.872252304657143*^9}, {
  3.872766045724475*^9, 3.872766078615026*^9}, {3.8738002802570877`*^9, 
  3.8738002821374454`*^9}, {3.8836460819353867`*^9, 3.883646083116994*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"01bc5a84-a261-4cf8-b903-3b901b058126"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "apply", " ", "the", " ", "function", " ", "to", " ", "a", " ", "random", 
    " ", "sample", " ", "of", " ", "5", " ", "molecules"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Map", "[", "plotMolecules", "]"}], "@", 
   RowBox[{"RandomSample", "[", 
    RowBox[{
     RowBox[{"dataset", "[", 
      RowBox[{"[", 
       RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", "5"}], 
    "]"}]}]}]], "Input",
 CellChangeTimes->{3.880132063534249*^9},
 CellLabel->"In[33]:=",ExpressionUUID->"8deeff9e-3920-44fa-b132-f1f53986c12a"],

Cell["\<\
Run the code block above to visualize a few different sets of molecular \
structures; each time you run the code, it will select a different \
RandomSample. How similar are the molecular structures in the dataset? Are \
there any common structural features? Do you notice any closely-related \
molecules in the dataset?\
\>", "Text",
 CellChangeTimes->{{3.8735596612656584`*^9, 3.873559733880747*^9}, {
   3.8738002945848913`*^9, 3.8738003172392163`*^9}, {3.883646099877529*^9, 
   3.883646116528674*^9}, 
   3.899996182206808*^9},ExpressionUUID->"2f56c57c-c217-4f6b-a739-\
9b37b03c16cd"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Identifying dependent (y) and independent variables (X)", "Subsection",
 CellChangeTimes->{{3.87225235543381*^9, 3.872252364291102*^9}, {
   3.8726107089494877`*^9, 3.872610712540204*^9}, {3.872766103126659*^9, 
   3.8727661036225023`*^9}, {3.8801310014081554`*^9, 3.8801310015928392`*^9}, 
   3.8801321101564674`*^9},ExpressionUUID->"69fd5042-9ba6-41ee-a806-\
699169ceb939"],

Cell["\<\
Next we need to split our dataset into dependent and independent variables. \
An independent variable does not depend on other variables, whereas a \
dependent variable is affected by independent variables and changes \
accordingly. Independent and dependent variables are commonly indicated as X \
and y:\
\>", "Text",
 CellChangeTimes->{{3.872766098830611*^9, 3.872766112478738*^9}, 
   3.872858895714513*^9, {3.880132445354288*^9, 3.8801324513583155`*^9}, {
   3.88013251380087*^9, 3.880132599419283*^9}, {3.8801329593553658`*^9, 
   3.8801330498355036`*^9}},ExpressionUUID->"22e2c23d-2937-44b1-83d2-\
ab25b8c03c45"],

Cell[TextData[StyleBox["X is an array of independent variables", "Item"]], \
"Item",
 CellChangeTimes->{{3.872766098830611*^9, 3.872766112478738*^9}, 
   3.872858895714513*^9, {3.8728589265543504`*^9, 3.872858932450983*^9}, {
   3.8801310035183525`*^9, 3.880131003655984*^9}, 
   3.8801321124155183`*^9},ExpressionUUID->"7c8df0f1-df71-4f7f-80b5-\
d184da2b5181"],

Cell[TextData[StyleBox["y is the dependent variable", "Item"]], "Item",
 CellChangeTimes->{{3.872766098830611*^9, 3.872766112478738*^9}, 
   3.872858895714513*^9, {3.8728589265543504`*^9, 3.8728589479140463`*^9}, {
   3.880133017091695*^9, 3.88013301758319*^9}, {3.880133059024516*^9, 
   3.880133059232217*^9}},ExpressionUUID->"b0fdf1d9-4ad0-4f62-afdb-\
4b62c5eef0a5"],

Cell[TextData[{
 "In regression analysis, the dependent variables that we want to predict is \
referred to as a target value. In our dataset, MaxAbsorbanceWavelength is the \
target value (",
 StyleBox["i.e.",
  FontSlant->"Italic"],
 ", the dependent variable, y), and the 13 features are the independent \
variables (",
 StyleBox["i.e.",
  FontSlant->"Italic"],
 ", X)",
 ". We will omit the non-numerical variables in our dataset (the SMILES and \
InChIKey molecular identifiers)."
}], "Text",
 CellChangeTimes->{{3.872766098830611*^9, 3.872766112478738*^9}, 
   3.872858895714513*^9, {3.8728589804795504`*^9, 3.872858984117346*^9}, {
   3.8728590767713747`*^9, 3.8728590814289236`*^9}, {3.8801298637445207`*^9, 
   3.880129866449108*^9}, {3.8801321054422193`*^9, 3.880132147385645*^9}, {
   3.880132179985832*^9, 3.880132181767729*^9}, {3.880133051977749*^9, 
   3.8801330707974625`*^9}},ExpressionUUID->"213f01a9-5ac6-4d86-a36e-\
f554a5b537e1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"xyPairs", " ", "=", 
   RowBox[{"With", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"noIdentifiers", "=", 
       RowBox[{
        RowBox[{"KeyDrop", "[", 
         RowBox[{"{", 
          RowBox[{"\"\<SMILES\>\"", ",", "\"\<InChIKey\>\""}], "}"}], "]"}], 
        "@", "dataset"}]}], "}"}], ",", "\[IndentingNewLine]", " ", 
     RowBox[{
      RowBox[{"ResourceFunction", "[", "\"\<TableToTrainingSet\>\"", "]"}], 
      "[", " ", 
      RowBox[{"noIdentifiers", ",", "\"\<MaxAbsorbanceWavelength\>\""}], 
      "]"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.872252370817403*^9, 3.8722523720602818`*^9}, {
   3.8722525077090673`*^9, 3.872252521176014*^9}, {3.872252565411621*^9, 
   3.8722526028946257`*^9}, {3.8722526380967093`*^9, 3.872252681825602*^9}, {
   3.8722527188004513`*^9, 3.872252744992679*^9}, {3.872252777552635*^9, 
   3.872252831933113*^9}, {3.872252863235839*^9, 3.872252866259233*^9}, {
   3.872252897677009*^9, 3.8722529077621107`*^9}, 3.872252973104417*^9, 
   3.872609583713146*^9, 3.872610078199749*^9, {3.872610700386497*^9, 
   3.872610729987986*^9}, {3.872610885300468*^9, 3.8726108857396708`*^9}, 
   3.8801298806765823`*^9},
 CellLabel->"In[34]:=",ExpressionUUID->"0da29227-5ff1-4f11-a4eb-a8cf62090d58"],

Cell["\<\
The output is in the form of a list of Association --> value rule pairs.  Let \
us display the first two below:\
\>", "Text",
 CellChangeTimes->{{3.8726100838476963`*^9, 3.872610105423666*^9}, {
  3.872755405208975*^9, 
  3.872755414330222*^9}},ExpressionUUID->"0e6d87f7-d65e-4a5c-98d8-\
4d66c1812ef2"],

Cell[BoxData[
 RowBox[{"xyPairs", "[", 
  RowBox[{"[", 
   RowBox[{"1", ";;", "2"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.872252370817403*^9, 3.8722523720602818`*^9}, {
   3.8722525077090673`*^9, 3.872252521176014*^9}, {3.872252565411621*^9, 
   3.8722526028946257`*^9}, {3.8722526380967093`*^9, 3.872252681825602*^9}, {
   3.8722527188004513`*^9, 3.872252744992679*^9}, {3.872252777552635*^9, 
   3.872252831933113*^9}, {3.872252863235839*^9, 3.872252866259233*^9}, {
   3.872252897677009*^9, 3.8722529077621107`*^9}, 3.872252973104417*^9, 
   3.872609583713146*^9, {3.872610078199749*^9, 3.87261008243816*^9}},
 CellLabel->"In[35]:=",ExpressionUUID->"f78608e5-6411-4fca-ac2e-dfa8f89e4578"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Split Train & Test Data", "Subsection",
 CellChangeTimes->{{3.872252915242056*^9, 3.87225291790611*^9}, {
  3.883646538951481*^9, 3.883646564479995*^9}},
 CellTags->"splithref",ExpressionUUID->"5e105410-b066-4c5f-b81b-c04a8a06d8b6"],

Cell["\<\
We will use most of our dataset to train our regression models; this portion \
is the \[OpenCurlyDoubleQuote]training\[CloseCurlyDoubleQuote] dataset. To \
evaluate model performance, however, we will need a test dataset.  We will \
randomly split our data into a training and test set; by default this \
function does an 80/20% split with a random shuffle of the items.  (In order \
to make this reproducible, we define a random number generator \
\[OpenCurlyDoubleQuote]seed\[CloseCurlyDoubleQuote] using the SeedRandom \
function. By calling SeedRandom immediately before we perform the split, we \
make sure that we get the same random result each time you run the notebook.) \
\>", "Text",
 CellChangeTimes->{{3.872253133450953*^9, 3.872253155846546*^9}, 
   3.8726093707251673`*^9, {3.8726094119083147`*^9, 3.872609418984922*^9}, {
   3.872755421598379*^9, 3.872755423488357*^9}, {3.872760871879418*^9, 
   3.8727608734791937`*^9}, {3.8727661290067863`*^9, 3.872766180590971*^9}, {
   3.8728593847295647`*^9, 3.872859391689659*^9}, {3.8728594273267508`*^9, 
   3.8728594517202587`*^9}, {3.872859485300005*^9, 3.872859497299257*^9}, 
   3.8801321917514744`*^9, {3.880132232719516*^9, 3.8801322415584536`*^9}, {
   3.880213534369033*^9, 3.8802135912846613`*^9}, {3.897388974720438*^9, 
   3.89738905595961*^9}},ExpressionUUID->"8d1dcba8-5145-45b4-9094-\
daafe36098f8"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SeedRandom", "[", "1234", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"train", ",", "test"}], "}"}], "=", 
   RowBox[{
    RowBox[{"ResourceFunction", "[", "\"\<TrainTestSplit\>\"", "]"}], "@", 
    "xyPairs"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.8722529232191887`*^9, 3.872252927011814*^9}, {
   3.872252963762579*^9, 3.872252992665698*^9}, 3.87260938756213*^9, {
   3.872609420298476*^9, 3.8726094209913588`*^9}, {3.8726100449506474`*^9, 
   3.872610046123721*^9}, {3.872610702951227*^9, 3.872610703854697*^9}, {
   3.872610928680358*^9, 3.872610930582663*^9}, {3.897388948906852*^9, 
   3.89738895738265*^9}},
 CellLabel->"In[36]:=",ExpressionUUID->"30657f04-13e4-4e73-aac3-289a8efcbdff"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Data Scaling", "Subsection",
 CellChangeTimes->{{3.872253173477819*^9, 
  3.87225317840628*^9}},ExpressionUUID->"c016aab2-4218-40fd-904b-\
ff2d8691f804"],

Cell["\<\
Notice that our features span a wide range of different values, from less \
than 1 to greater than 100. Many machine learning models perform better when \
the variables are on the same scale, so it\[CloseCurlyQuote]s usually a good \
practice to rescale features before performing the analysis.\
\>", "Text",
 CellChangeTimes->{{3.8727614306671267`*^9, 3.8727614440711603`*^9}, {
  3.872761536909959*^9, 3.872761570009626*^9}, {3.872761682416349*^9, 
  3.8727616875361423`*^9}, {3.872761909406543*^9, 3.872761911342017*^9}, {
  3.872766188590856*^9, 3.872766190414858*^9}, {3.8728595265094185`*^9, 
  3.872859527953724*^9}, {3.8728595640453925`*^9, 3.872859592798806*^9}, {
  3.872859650104808*^9, 
  3.8728596509057426`*^9}},ExpressionUUID->"28e5c5af-bf9a-4df2-9a85-\
fcafbb75af96"],

Cell["https://en.wikipedia.org/wiki/Feature_scaling", "Item",
 CellChangeTimes->{3.8728596482121058`*^9, 
  3.872969977661688*^9},ExpressionUUID->"53e4cb0e-b7d3-405b-ac99-\
8ded7c52b29f"],

Cell["\<\
There are many methods that can be used to scale data. Two approaches are:\
\>", "Text",
 CellChangeTimes->{
  3.8728596623872423`*^9, {3.880132256331007*^9, 
   3.880132265024012*^9}},ExpressionUUID->"6c2e66e3-6796-4e90-b258-\
ee615b625342"],

Cell[TextData[{
 "Scaling: Scale our features in a specified range (",
 StyleBox["e.g.",
  FontSlant->"Italic"],
 ", between 0 and 1) without altering the distribution shape"
}], "Item",
 CellChangeTimes->{{3.8728596863804064`*^9, 3.872859709239026*^9}, {
  3.8801948617146482`*^9, 
  3.880194869554172*^9}},ExpressionUUID->"760b96bd-16d6-4c5f-b77c-\
c6937cb27d04"],

Cell["\<\
Normalizing: Scale our features, usually altering the distribution shape\
\>", "Item",
 CellChangeTimes->{{3.8728596863804064`*^9, 
  3.872859707439884*^9}},ExpressionUUID->"0667ec56-45bf-450d-a2fd-\
17b9efc204ef"],

Cell[TextData[{
 "For this analysis, let\[CloseCurlyQuote]s scale all of our features to \
range between 0 and 1, based on the minimum and maximum of the training set.  \
The functions ",
 StyleBox["minMaxFit",
  FontSlant->"Italic"],
 " and ",
 StyleBox["minMaxTransform",
  FontSlant->"Italic"],
 ", defined below, accomplish this task.  You do not need to modify these \
functions."
}], "Text",
 CellChangeTimes->{{3.872859756456582*^9, 3.8728597615847225`*^9}, {
  3.872967799717119*^9, 3.872967871834569*^9}, {3.872970002666725*^9, 
  3.872970014142337*^9}, {3.8836463040136766`*^9, 
  3.8836463117873983`*^9}},ExpressionUUID->"d7f43391-ed43-4a3b-8191-\
83fac739149d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"minMaxFit", "[", "d_List", "]"}], ":=", 
   RowBox[{"With", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"featureNames", " ", "=", " ", 
        RowBox[{"Keys", "@", 
         RowBox[{"First", "@", 
          RowBox[{"Keys", "[", "d", "]"}]}]}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"minMaxPairs", "=", 
        RowBox[{"MinMax", "/@", 
         RowBox[{"Transpose", "@", 
          RowBox[{"Values", "@", 
           RowBox[{"Keys", "[", "d", "]"}]}]}]}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"AssociationThread", "[", 
      RowBox[{"featureNames", "->", "minMaxPairs"}], "]"}]}], "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"rescale", "[", 
   RowBox[{"{", 
    RowBox[{"x_", ",", "minMax_List"}], "}"}], "]"}], ":=", 
  RowBox[{"N", "@", 
   RowBox[{"Rescale", "[", 
    RowBox[{"x", ",", "minMax"}], "]"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"minMaxTransform", "[", "scale_Association", "]"}], "[", 
   RowBox[{"x_Association", "->", "y_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Merge", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x", ",", "scale"}], "}"}], ",", "rescale"}], "]"}], "->", 
   "y"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"minMaxTransform", "[", "scale_Association", "]"}], "[", "l_List", 
   "]"}], ":=", 
  RowBox[{
   RowBox[{"minMaxTransform", "[", "scale", "]"}], "/@", "l"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.872761271239393*^9, 3.872761272783258*^9}, 
   3.872761467911261*^9, {3.8727617300884733`*^9, 3.872761774968581*^9}, {
   3.872761816920045*^9, 3.8727618255116377`*^9}, 3.872761938032195*^9, {
   3.872762033629884*^9, 3.872762056389908*^9}},
 CellLabel->"In[38]:=",ExpressionUUID->"f5d6a6f2-d5ff-4355-954d-cbd5d9e20b0c"],

Cell["\<\
We begin by determining the maximum and minimum of each feature:\
\>", "Text",
 CellChangeTimes->{{3.8727615116628237`*^9, 
  3.872761521837631*^9}},ExpressionUUID->"2524932a-7ce3-4057-a040-\
44a728d63127"],

Cell[BoxData[
 RowBox[{"scale", "=", 
  RowBox[{"minMaxFit", "[", "train", "]"}], " "}]], "Input",
 CellChangeTimes->{{3.872761323391097*^9, 3.8727613355190268`*^9}, {
   3.8727613754551687`*^9, 3.872761419303821*^9}, {3.87276148493495*^9, 
   3.872761524332254*^9}, 3.872766207903804*^9},
 CellLabel->"In[42]:=",ExpressionUUID->"1f90197b-a8bd-4ed2-83d4-c753d4c5a2dc"],

Cell[TextData[{
 "Then we can apply this to transform the training and test sets to have \
input features between 0 and 1.  (",
 StyleBox["Be careful",
  FontWeight->"Bold"],
 ",  as this will replace the values in these datasets with the rescaled \
versions. ",
 StyleBox["You should only run this code once.",
  FontWeight->"Bold"],
 " If you accidentally run it twice, go back and regenerate the training and \
test sets in the section ",
 StyleBox[ButtonBox["Split Train & Test Data",
  BaseStyle->"Hyperlink",
  ButtonData->"splithref"],
  FontWeight->"Bold"],
 StyleBox[".",
  FontSlant->"Italic"],
 ")"
}], "Text",
 CellChangeTimes->{{3.872761507558578*^9, 3.87276153022434*^9}, {
  3.872761947086174*^9, 3.872761964117762*^9}, {3.872967881162163*^9, 
  3.8729678832912483`*^9}, {3.872970828205208*^9, 3.87297084666195*^9}, {
  3.883646325473769*^9, 3.883646367766527*^9}, {3.8836464149024563`*^9, 
  3.883646459602907*^9}, {3.883646584665721*^9, 
  3.883646584666812*^9}},ExpressionUUID->"e30785e0-b54e-49af-b923-\
2a495af03335"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"train", "=", 
   RowBox[{
    RowBox[{"minMaxTransform", "[", "scale", "]"}], "[", "train", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", "=", 
   RowBox[{
    RowBox[{"minMaxTransform", "[", "scale", "]"}], "[", "test", "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{
  3.87276622787311*^9, {3.872774045641385*^9, 3.8727740502533712`*^9}, {
   3.8729707927135963`*^9, 3.8729708220686083`*^9}},
 CellLabel->"In[43]:=",ExpressionUUID->"9f8c50b1-41f1-4752-a926-889cb86dbe4d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"train", "[", 
   RowBox[{"[", 
    RowBox[{"1", ";;", "2"}], "]"}], "]"}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "visualize", " ", "the", " ", "first", " ", "few", " ", "as", " ", "an", 
    " ", "example"}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.872610915109139*^9, 3.872610920194516*^9}, {
  3.872761972214754*^9, 3.872761982117681*^9}},
 CellLabel->"In[45]:=",ExpressionUUID->"273090b1-a844-447a-8be9-c3062e6c8feb"],

Cell["\<\
Note that none of the feature values in the training dataset are smaller than \
0 or greater than 1 now.\
\>", "Text",
 CellChangeTimes->{{3.8738003672055097`*^9, 3.8738003890253515`*^9}, {
  3.880211138532842*^9, 3.88021119855655*^9}, {3.8802120937862267`*^9, 
  3.8802120957479286`*^9}},ExpressionUUID->"f5c97b6d-3113-4e72-89a5-\
d4e73b705fad"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Building Regression Models", "Section",
 CellChangeTimes->{{3.872253398577107*^9, 
  3.872253401203747*^9}},ExpressionUUID->"1a98574f-933a-4714-8e01-\
a56708a1fe66"],

Cell[TextData[{
 "Regression analysis is a process of explaining and defining the \
relationship between dependent and independent variables. In this activity, \
we will train several regression models to predict our target value, \
MaxAbsorbanceWavelength (in this section and later in the ",
 StyleBox[ButtonBox["Penalized Regression",
  BaseStyle->"Hyperlink",
  ButtonData->"penalizedRegressionHref"],
  FontWeight->"Bold"],
 " and ",
 StyleBox[ButtonBox["Tree Models ",
  BaseStyle->"Hyperlink",
  ButtonData->"treeModelsHref"],
  FontWeight->"Bold"],
 "sections). We will use different metrics to evaluate how well the models \
perform (in the ",
 StyleBox[ButtonBox["Model Evaluation",
  BaseStyle->"Hyperlink",
  ButtonData->"modeEvalHref"],
  FontWeight->"Bold"],
 " section). By choosing better independent variables (in the ",
 StyleBox[ButtonBox["Feature Selection",
  BaseStyle->"Hyperlink",
  ButtonData->"featureSelectionHref"],
  FontWeight->"Bold"],
 " section) we can try to improve our model performance. Finally, we can \
interpret our models and gain insight into what features are important (in \
the ",
 StyleBox[ButtonBox["Feature Importance",
  BaseStyle->"Hyperlink",
  ButtonData->"featureImportanceHref"],
  FontWeight->"Bold"],
 " section)."
}], "Text",
 CellChangeTimes->{{3.872253411092428*^9, 3.872253420723687*^9}, {
   3.872859808708824*^9, 3.872859932677449*^9}, {3.880119657269515*^9, 
   3.880119712833778*^9}, 3.8801324266447353`*^9, {3.880133099320368*^9, 
   3.880133132726817*^9}, {3.8801854614292116`*^9, 3.8801854733080235`*^9}, {
   3.88364754149571*^9, 3.883647555744199*^9}, {3.883647595009644*^9, 
   3.8836475950114098`*^9}, {3.8836476318161497`*^9, 3.883647631817844*^9}, {
   3.883647683286824*^9, 
   3.883647683288229*^9}},ExpressionUUID->"712ec36e-fc92-4fb0-8e25-\
a3c6bad15568"],

Cell[CellGroupData[{

Cell["Simple Linear regression", "Subsection",
 CellChangeTimes->{
  3.8722534341795397`*^9},ExpressionUUID->"b983b0b1-aca7-48cb-beba-\
cb3ac6654b10"],

Cell["\<\
Let\[CloseCurlyQuote]s start with the most basic type of regression model. \
Simple linear regression is a method that tries to define the relationship \
between two variables, the dependent variable and a single independent \
variable.\
\>", "Text",
 CellChangeTimes->{{3.872766257367133*^9, 3.8727662623830442`*^9}, {
   3.8727667643282843`*^9, 3.8727667825286617`*^9}, {3.872859954689926*^9, 
   3.8728599724247484`*^9}, 
   3.8728600355244956`*^9},ExpressionUUID->"a48ec159-1aa1-4aa2-991b-\
e2461b338972"],

Cell["https://en.wikipedia.org/wiki/Simple_linear_regression", "Item",
 CellChangeTimes->{{3.872860026538509*^9, 
  3.8728600384950075`*^9}},ExpressionUUID->"ef22add8-94f4-4643-ae26-\
0125f0a09c4f"],

Cell["\<\
https://jakevdp.github.io/PythonDataScienceHandbook/05.06-linear-regression.\
html\
\>", "Item",
 CellChangeTimes->{{3.872860026538509*^9, 
  3.872860046586528*^9}},ExpressionUUID->"ce52fdcd-e0b9-45cb-958f-\
13470a8c9b37"],

Cell["\<\
This relationship can be represented by a well-fitted line that follows:\
\>", "Text",
 CellChangeTimes->{
  3.872860288237076*^9, {3.8801855331032257`*^9, 
   3.8801855332264223`*^9}},ExpressionUUID->"4b665aed-0810-4c07-9cb0-\
34771acc9800"],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{"y", "=", 
   RowBox[{
    SubscriptBox["\[Beta]", "0"], "+", 
    RowBox[{
     SubscriptBox["\[Beta]", "1"], "x"}]}]}], 
  TraditionalForm]],ExpressionUUID->"5f5262bf-b1f4-4348-9ccd-c576148eedff"]], \
"Text",
 CellChangeTimes->{{3.8728599790841565`*^9, 3.8728600560344706`*^9}, 
   3.872860110580801*^9, {3.872860192181012*^9, 3.872860195386731*^9}, {
   3.8728602337006836`*^9, 3.8728602842940035`*^9}, {3.8801272223480034`*^9, 
   3.8801272229842296`*^9}},
 TextAlignment->Center,ExpressionUUID->"e961629e-b917-4561-a3ca-5566660b9fca"],

Cell["where:", "Text",
 CellChangeTimes->{{3.872860686663622*^9, 3.8728606873765926`*^9}, {
  3.8801859692674313`*^9, 
  3.8801859693525243`*^9}},ExpressionUUID->"290086bd-98ea-4830-950c-\
b1920f944301"],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Beta]", "0"], TraditionalForm]],ExpressionUUID->
  "d753d926-f67f-45eb-9960-fced49973f92"],
 ": y-intercept\n",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Beta]", "1"], TraditionalForm]],ExpressionUUID->
  "eaf548f9-63b1-4a19-b9f5-c320e0e00d17"],
 ": slope (called the coefficient or weight in this context)\n\nThe optimal \
slope is generally determined by minimizing the residual sum of squares \
(RSS), which is given by:"
}], "Text",
 CellChangeTimes->{{3.872860694118816*^9, 3.8728607365519714`*^9}, 
   3.872860769902091*^9, {3.8801924080645995`*^9, 
   3.8801924338071356`*^9}},ExpressionUUID->"370a9d34-c8f7-47e8-b091-\
5eac0a42cdca"],

Cell[TextData[Cell[BoxData[
 FormBox[
  TemplateBox[<|"boxes" -> FormBox[
      RowBox[{
        StyleBox["R", "TI"], 
        StyleBox["S", "TI"], 
        StyleBox["S", "TI"], "\[LongEqual]", 
        UnderoverscriptBox["\[Sum]", 
         RowBox[{
           StyleBox["i", "TI"], "\[LongEqual]", "1"}], 
         StyleBox["n", "TI"], LimitsPositioning -> True], 
        SuperscriptBox[
         RowBox[{"(", 
           RowBox[{
             SubscriptBox[
              StyleBox["y", "TI"], 
              StyleBox["i", "TI"]], "-", 
             SubscriptBox[
              OverscriptBox[
               StyleBox["y", "TI"], "^"], 
              StyleBox["i", "TI"]]}], ")"}], "2"]}], TraditionalForm], 
    "errors" -> {}, "input" -> "RSS = \\sum_{i=1}^{n}(y_i - \\hat{y}_i)^2", 
    "state" -> "Boxes"|>,
   "TeXAssistantTemplate"], 
  TraditionalForm]],ExpressionUUID->"583b5b2c-1add-4358-b83c-c00bd3fdcd2b"]], \
"Text",
 CellChangeTimes->{3.8737993617478657`*^9},
 TextAlignment->Center,ExpressionUUID->"2d16106c-2ae5-4181-81e1-50c844556b8e"],

Cell[TextData[{
 "where ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["y", "i"], TraditionalForm]],ExpressionUUID->
  "344b8a15-f32a-433b-9f94-5c85f3ea5c69"],
 " are the actual values and ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\:0177", "i"], TraditionalForm]],ExpressionUUID->
  "28fa5fc9-eec9-463c-92de-6b4cfb9bc1b6"],
 " are the model predictions. This approach is referred to as the ordinary \
least squares (OLS) method.  You can read more about these methods at the \
following links:"
}], "Text",
 CellChangeTimes->{
  3.8728601012894125`*^9, {3.8728603045499983`*^9, 3.872860306034654*^9}, 
   3.872967902187042*^9, {3.8801176072338715`*^9, 3.8801176112075815`*^9}, {
   3.8801855511829762`*^9, 3.8801855514484234`*^9}, {3.8801924904884295`*^9, 
   3.880192533423216*^9}, {3.8801925773809385`*^9, 3.880192586930681*^9}, {
   3.8801926355659976`*^9, 3.8801926664657574`*^9}, {3.8836467584482594`*^9, 
   3.883646768892742*^9}, {3.899996278888869*^9, 
   3.8999962791532965`*^9}},ExpressionUUID->"4be60eb4-9b7f-4e61-8668-\
216a564cfab1"],

Cell["https://en.wikipedia.org/wiki/Residual_sum_of_squares", "Item",
 CellChangeTimes->{3.8728596482121058`*^9, 3.872969977661688*^9, 
  3.8801926938019133`*^9},ExpressionUUID->"e3558a00-d462-4cf4-97a0-\
7b7f0a0abf45"],

Cell["https://en.wikipedia.org/wiki/Ordinary_least_squares", "Item",
 CellChangeTimes->{3.8728596482121058`*^9, 3.872969977661688*^9, 
  3.88019269985138*^9},ExpressionUUID->"5fb79673-958d-474f-a169-0d8a69d0e44f"],

Cell["\<\
Now that we know how a simple linear regression model works, let\
\[CloseCurlyQuote]s train our first machine learning model by selecting one \
feature from our set of independent variables and plotting the line that best \
describes the relationship between our selected feature and the dependent \
variable (Max Absorbance Wavelength).

First let\[CloseCurlyQuote]s define some convenience functions for extracting \
a single feature.  Again,  you do not need to modify these functions, but we \
will use them in the subsequent code:\
\>", "Text",
 CellChangeTimes->{{3.872254260135722*^9, 3.872254267717552*^9}, {
  3.8728599405243545`*^9, 3.8728599439498386`*^9}, {3.87296790707353*^9, 
  3.8729679273573227`*^9}, {3.8801926683892384`*^9, 3.880192672714034*^9}, {
  3.8836467959389057`*^9, 
  3.883646798092979*^9}},ExpressionUUID->"a0d6aa08-b235-4f36-9a5e-\
e4d8085d25b1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "extract", " ", "a", " ", "name", " ", "from", " ", "a", " ", "single", 
    " ", "row"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"extractSingleFeature", "[", "name_String", "]"}], "[", 
     RowBox[{"x_Association", "->", "y_"}], "]"}], ":=", 
    RowBox[{
     RowBox[{"Lookup", "[", 
      RowBox[{"x", ",", "name"}], "]"}], "->", "y"}]}], "\[IndentingNewLine]",
    "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"apply", " ", "to", " ", "the", " ", "entire", " ", "dataset"}], 
    "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"extractSingleFeature", "[", "name_String", "]"}], "[", 
     "data_List", "]"}], ":=", 
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{"extractSingleFeature", "[", "name", "]"}], ",", "data"}], 
     "]"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"convenience", " ", "functions", " ", "for", " ", "plotting"}], 
    "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"toXY", "[", 
     RowBox[{"x_", "->", "y_"}], "]"}], ":=", 
    RowBox[{"{", 
     RowBox[{"x", ",", "y"}], "}"}]}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"toXY", "[", "data_List", "]"}], ":=", 
    RowBox[{"Map", "[", 
     RowBox[{"toXY", ",", "data"}], "]"}]}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.872253810131764*^9, 3.872253929488802*^9}, {
  3.872254055441637*^9, 3.872254071195503*^9}, {3.8722542703637*^9, 
  3.872254275537252*^9}, {3.8722554198121653`*^9, 3.872255491293496*^9}, {
  3.872774179179747*^9, 3.8727742232291803`*^9}, {3.8729707362864847`*^9, 
  3.872970736876638*^9}},
 CellLabel->"In[46]:=",ExpressionUUID->"4358bf76-31ec-4525-a0f6-1a2bedd670ce"],

Cell[TextData[{
 "Because we\[CloseCurlyQuote]ll be working with a few different simple \
linear regression models, we can use associations (see the ",
 StyleBox[ButtonBox["Basics of Mathematica",
  BaseStyle->"Hyperlink",
  ButtonData->"assocHref"],
  FontWeight->"Bold"],
 ButtonBox[" section",
  BaseStyle->"Hyperlink",
  ButtonData->"assocHref"],
 ") to store the training and test data for each model, as well as the \
trained models. First initialize the empty variables (only run this code \
block once):"
}], "Text",
 CellChangeTimes->{{3.8733711194584866`*^9, 3.8733711519043603`*^9}, {
   3.880118856066812*^9, 3.880118865400213*^9}, {3.8801189395784197`*^9, 
   3.880118946169177*^9}, {3.8802122479095573`*^9, 3.8802123524153547`*^9}, 
   3.8802123993997235`*^9, {3.883646874824101*^9, 
   3.883646874825186*^9}},ExpressionUUID->"375d9bcc-fa37-4499-ab96-\
a9152054ff1a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"create", " ", "empty", " ", "associations"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"singleFeatureTrain", "=", 
     RowBox[{"Association", "[", "]"}]}], ";"}], " ", 
   RowBox[{"(*", 
    RowBox[{"single", "-", 
     RowBox[{"variable", " ", "training", " ", "data"}]}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"singleFeatureTest", "=", 
     RowBox[{"Association", "[", "]"}]}], ";"}], " ", 
   RowBox[{"(*", 
    RowBox[{"single", "-", 
     RowBox[{"variable", " ", "test", " ", "data"}]}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"singleFeatureModels", " ", "=", " ", 
     RowBox[{"Association", "[", "]"}]}], ";"}], 
   RowBox[{"(*", 
    RowBox[{"simple", " ", "linear", " ", "regression", " ", "models"}], 
    "*)"}], "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.872257047056616*^9, 3.8722571487573023`*^9}, {
   3.8722582867384443`*^9, 3.872258345224741*^9}, {3.872258381134124*^9, 
   3.872258403899211*^9}, {3.872767191674727*^9, 3.872767194526393*^9}, {
   3.872771273718987*^9, 3.8727712881584797`*^9}, {3.872952062984873*^9, 
   3.872952069820922*^9}, {3.880118872137652*^9, 3.8801188729803295`*^9}, {
   3.880212159111223*^9, 3.880212188897707*^9}, {3.880212228785429*^9, 
   3.8802122437188888`*^9}, {3.88021236494871*^9, 3.8802123964501143`*^9}, 
   3.883646886635405*^9, 3.8973891098689613`*^9},
 CellLabel->"In[50]:=",ExpressionUUID->"684719a9-71f3-4808-b585-8913d1c65389"],

Cell[TextData[{
 "Let\[CloseCurlyQuote]s start by choosing the MolecularMass feature and \
seeing how well it predicts the MaxAbsorbanceWavelength. Run the code block \
below to select the feature, extract the training and testing data for that \
feature, and train the regression model. (Note that to run a simple linear \
regression with another feature, you can simply copy this code block and \
change the ",
 StyleBox["featureName",
  FontSlant->"Italic"],
 " variable.)"
}], "Text",
 CellChangeTimes->{{3.8728603100143642`*^9, 3.8728603187628098`*^9}, 
   3.87296793112964*^9, {3.8801176192557445`*^9, 3.880117626714525*^9}, {
   3.8801178780428867`*^9, 3.8801178813895607`*^9}, {3.8801855677487*^9, 
   3.880185605385022*^9}, {3.8802124322978477`*^9, 3.8802125039294443`*^9}, {
   3.8802125696751757`*^9, 3.8802125957990875`*^9}, {3.8986150752921534`*^9, 
   3.8986150772118807`*^9}},ExpressionUUID->"3596caae-21de-449f-8eb5-\
fcea71f23e94"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"select", " ", "a", " ", "single", " ", "feature"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"featureName", "=", "\"\<MolecularMass\>\""}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "save", " ", "the", " ", "training", " ", "and", " ", "test", " ", "data",
      " ", "for", " ", "that", " ", "feature", " ", "in", " ", "the", " ", 
     "corresponding", " ", "association", " ", "variables"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"singleFeatureTrain", "[", "featureName", "]"}], "=", 
     RowBox[{
      RowBox[{"extractSingleFeature", "[", "featureName", "]"}], "@", 
      "train"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"singleFeatureTest", "[", "featureName", "]"}], "=", 
     RowBox[{
      RowBox[{"extractSingleFeature", "[", "featureName", "]"}], "@", 
      "test"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "train", " ", "a", " ", "simple", " ", "linear", " ", "regression", " ", 
     "for", " ", "that", " ", "feature", " ", "and", " ", "save", " ", "it", 
     " ", "to", " ", "the", " ", "association", " ", "variable"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"singleFeatureModels", "[", "featureName", "]"}], "=", 
    RowBox[{"Predict", "[", 
     RowBox[{
      RowBox[{"singleFeatureTrain", "[", "featureName", "]"}], ",", 
      RowBox[{"Method", "->", "\"\<LinearRegression\>\""}]}], 
     "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.872254289767713*^9, 3.8722544274133244`*^9}, {
   3.8722545576976767`*^9, 3.872254571760755*^9}, {3.87225676322421*^9, 
   3.872256766773451*^9}, {3.8727620942218857`*^9, 3.872762095573022*^9}, {
   3.872766346469019*^9, 3.872766386007913*^9}, {3.8727664261125174`*^9, 
   3.872766426335843*^9}, 3.8727742295015097`*^9, {3.8738005127748966`*^9, 
   3.873800515026887*^9}, {3.8801180744664855`*^9, 3.880118106803405*^9}, {
   3.880212453750064*^9, 3.880212480926388*^9}, {3.880212531902147*^9, 
   3.880212552869835*^9}, {3.8802126184279876`*^9, 3.880212646714055*^9}, {
   3.89738912174529*^9, 3.897389123526372*^9}, {3.8986150691056776`*^9, 
   3.898615071327097*^9}},
 CellLabel->"In[53]:=",ExpressionUUID->"d35daaad-a3ee-4a8a-8927-6ee0c03585df"],

Cell[TextData[{
 "It is useful to summarize the quality of our fit by using the ",
 ButtonBox["PredictorMeasurements",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://reference.wolfram.com/language/ref/PredictorMeasurements.\
html"], None},
  ButtonNote->
   "http://reference.wolfram.com/language/ref/PredictorMeasurements.html"],
 " function.  To get a summary of the model performance, we provide this \
function with two inputs: the trained regression model and the data \
(comprised of x-y pairs) on which it is to be evaluated. \
Let\[CloseCurlyQuote]s start by looking at the performance of the model on \
the training dataset:"
}], "Text",
 CellChangeTimes->{{3.87276664683313*^9, 3.8727667500006647`*^9}, {
  3.8728603251783185`*^9, 3.8728603501927404`*^9}, {3.872970868008697*^9, 
  3.8729708680096607`*^9}, {3.873800564647032*^9, 3.873800574582988*^9}, {
  3.873810949360392*^9, 3.873810949663212*^9}, {3.8801172817620277`*^9, 
  3.8801173052772055`*^9}, {3.8801178933584523`*^9, 3.8801178934262056`*^9}, {
  3.880185615251877*^9, 
  3.8801856154077854`*^9}},ExpressionUUID->"53a4b30e-cf69-48fe-b33e-\
75e55d646b0b"],

Cell[BoxData[
 RowBox[{"PredictorMeasurements", "[", 
  RowBox[{
   RowBox[{"singleFeatureModels", "[", "featureName", "]"}], ",", 
   RowBox[{"singleFeatureTrain", "[", "featureName", "]"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.872256642672916*^9, 3.872256714299913*^9}, {
   3.872256749105832*^9, 3.872256749855322*^9}, 3.872766719194222*^9, 
   3.8738005385229273`*^9, {3.873810786632205*^9, 3.8738107932439284`*^9}, {
   3.880118115217906*^9, 3.880118119066779*^9}, {3.8802126606359067`*^9, 
   3.880212668717367*^9}},
 CellLabel->"In[57]:=",ExpressionUUID->"78558bb8-c70b-434e-ad5a-2cc5880eca56"],

Cell["\<\
The graph above plots the actual wavelength vs. the predicted wavelength for \
the training data. If the model could perfectly explain the variation in the \
training data, all the blue dots would lie along the dashed line. Clearly the \
model is not perfect.

It can also be useful to examine the correlation between the feature used to \
the train the regression model and the target value. Let\[CloseCurlyQuote]s \
plot the actual MaxAbsorbanceWavelength as a function of the value of \
MolecularMass:\
\>", "Text",
 CellChangeTimes->{{3.8738110381841526`*^9, 3.873811045019599*^9}, {
   3.8801173180130486`*^9, 3.8801174834081106`*^9}, {3.8801175200815454`*^9, 
   3.8801175915018454`*^9}, {3.8801176699885187`*^9, 
   3.8801176811808815`*^9}, {3.880117907131158*^9, 3.8801179122085423`*^9}, {
   3.8986151875455737`*^9, 3.8986151894204025`*^9}, 
   3.8999963453806906`*^9},ExpressionUUID->"40494868-0701-4efe-b0dc-\
1d47d7fb6db2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"Plot", " ", "a", " ", "graphical", " ", "representation"}], 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{"Show", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Plot", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"singleFeatureModels", "[", "featureName", "]"}], "[", "x", 
       "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", "0", ",", "1"}], "}"}], ",", 
      RowBox[{"(*", 
       RowBox[{
       "evaluate", " ", "the", " ", "model", " ", "on", " ", "inputs", " ", 
        "ranging", " ", "from", " ", "the", " ", "lowest", " ", "to", " ", 
        "the", " ", "highest", " ", "value"}], "*)"}], "\[IndentingNewLine]", 
      
      RowBox[{"FrameLabel", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
        "\"\<MolecularMass\>\"", ",", 
         "\"\<MaxAbsorbanceWavelength (nm)\>\""}], "}"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Frame", "->", "True"}]}], "]"}], ",", "\[IndentingNewLine]", 
    RowBox[{"ListPlot", "[", 
     RowBox[{
      RowBox[{"toXY", "[", 
       RowBox[{"singleFeatureTrain", "[", "featureName", "]"}], "]"}], ",", 
      RowBox[{"PlotStyle", "->", "Red"}]}], "]"}]}], 
   RowBox[{"(*", 
    RowBox[{"plot", " ", "the", " ", "training", " ", "data", " ", "points"}],
     "*)"}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.8722552336464033`*^9, 3.8722553366074944`*^9}, {
  3.8722555658785067`*^9, 3.872255737459875*^9}, {3.8727665874089327`*^9, 
  3.8727666208648853`*^9}, {3.872774188373934*^9, 3.872774193789448*^9}, {
  3.873800533857314*^9, 3.8738005612704644`*^9}, {3.8738109949361563`*^9, 
  3.873811021180373*^9}, {3.880117498259365*^9, 3.880117510550294*^9}, {
  3.8801176412659917`*^9, 3.8801176776759653`*^9}, {3.880117863231373*^9, 
  3.8801178644226074`*^9}, {3.880118127513631*^9, 3.880118130991352*^9}, {
  3.8802126925439425`*^9, 3.880212709035673*^9}, {3.898615194630282*^9, 
  3.8986151966052303`*^9}},
 CellLabel->"In[58]:=",ExpressionUUID->"938e493b-03c3-4e4e-b00f-fc92255c3b12"],

Cell["\<\
If MolecularMass could explain all the variation in MaxAbsorbanceWavelength, \
the red dots would lie along the blue line. Again we can see that the \
regression model is not perfect.

Now that we\[CloseCurlyQuote]ve evaluated the model performance with the \
training dataset, let\[CloseCurlyQuote]s use this model to predict \
MaxAbsorbanceWavelength for the test dataset and compare our predicted \
wavelengths to the true values. This is the real test of the model\
\[CloseCurlyQuote]s performance.

Run the code block below to perform this analysis and generate a plot of \
actual vs. predicted wavelength.\
\>", "Text",
 CellChangeTimes->{{3.872766812360447*^9, 3.872766835560782*^9}, {
  3.872925974421455*^9, 3.8729259891505356`*^9}, {3.880117695348812*^9, 
  3.880117749022694*^9}, {3.880117784637441*^9, 3.880117858028098*^9}, {
  3.880117940192685*^9, 3.8801179699680815`*^9}, {3.8801858096945868`*^9, 
  3.8801858205482597`*^9}, {3.898615207105802*^9, 
  3.89861521475773*^9}},ExpressionUUID->"96c65c73-58d1-47fc-9a23-\
d1d1835e4746"],

Cell[BoxData[
 RowBox[{"Show", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"PredictorMeasurements", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"singleFeatureModels", "[", "featureName", "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"singleFeatureTest", "[", "featureName", "]"}], ",", 
     "\[IndentingNewLine]", "\"\<ComparisonPlot\>\""}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"PlotLabel", "->", 
    RowBox[{"\"\<Single feature selected: \>\"", "<>", "featureName"}]}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.872254434033053*^9, 3.872254602460208*^9}, {
   3.8722548846203337`*^9, 3.872254885432176*^9}, {3.8801181369306216`*^9, 
   3.8801181383202753`*^9}, {3.880212716232433*^9, 3.880212726880625*^9}, {
   3.8973918046123238`*^9, 3.897391808138023*^9}, 3.8973918399214973`*^9},
 CellLabel->"In[59]:=",ExpressionUUID->"f63d6a64-740f-4a33-8949-07d407f9e534"],

Cell["\<\
If the model predictions were perfect, all the blue dots would lie along the \
dashed line. As we saw before, this model is not perfect. There are \
quantitative ways that we can evaluate the performance of the model, which we\
\[CloseCurlyQuote]ll discuss soon.

For now, go back to the description of the different molecular features in \
our dataset. Use your chemical intuition and think about which ones might be \
correlated with MaxAbsorbanceWavelength. Then write new code to perform and \
visualize a linear regression for a different variable.\
\>", "Text",
 CellChangeTimes->{{3.872254917675205*^9, 3.8722549187985897`*^9}, {
  3.872255810095487*^9, 3.872255810732596*^9}, {3.872766887664832*^9, 
  3.8727668932968903`*^9}, {3.8728605904014006`*^9, 3.872860599752223*^9}, {
  3.880117982342304*^9, 3.880117994742263*^9}, {3.880118636999937*^9, 
  3.880118681062029*^9}, {3.880185841625106*^9, 3.880185843905937*^9}, {
  3.8801858759794254`*^9, 3.880185879306032*^9}, {3.8999963915423408`*^9, 
  3.8999963919190407`*^9}},ExpressionUUID->"eb6e26e9-6c67-479d-b306-\
80d48cba988a"],

Cell[TextData[StyleBox["ADD A CODE BLOCK HERE TO PERFORM A SIMPLE LINEAR \
REGRESSION FOR A DIFFERENT VARIABLE",
 FontWeight->"Bold"]], "Text",
 CellChangeTimes->{
  3.8728606280883684`*^9},ExpressionUUID->"61602891-1751-4552-b5af-\
0c633f6cee4e"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Multiple Regression ", "Subsection",
 CellChangeTimes->{{3.872256874996738*^9, 
  3.872256883600239*^9}},ExpressionUUID->"874fe596-ee56-434e-a4e9-\
e097b492e93d"],

Cell["\<\
When we have more than one independent variable in our dataset, we can make \
use of a multiple regression model. A multiple regression model can perform \
better at predicting the value of a dependent variable since the model has \
more information to use.\
\>", "Text",
 CellChangeTimes->{{3.872766897336905*^9, 3.8727669002006493`*^9}, {
  3.872860782612253*^9, 
  3.872860833147835*^9}},ExpressionUUID->"ead7751f-2f61-48f4-8ce5-\
3a565a600708"],

Cell["\<\
https://en.wikipedia.org/wiki/Linear_regression#Simple_and_multiple_linear_\
regression\
\>", "Item",
 CellChangeTimes->{{3.87286084813509*^9, 
  3.87286084910946*^9}},ExpressionUUID->"f57cdc32-a1f7-4950-9679-\
750baf759a6f"],

Cell["\<\
The formula is an extension of the single-variable simple linear regression:\
\>", "Text",
 CellChangeTimes->{3.872860288237076*^9, 
  3.8728608568896875`*^9},ExpressionUUID->"64ae3b0a-633b-4fd8-bbc0-\
5299872215c5"],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{"y", "=", 
   RowBox[{
    RowBox[{
     RowBox[{
      SubscriptBox["\[Beta]", "0"], "+", 
      RowBox[{
       SubscriptBox["\[Beta]", "1"], 
       SubscriptBox["x", "1"]}], "+", 
      RowBox[{
       SubscriptBox["\[Beta]", "2"], 
       SubscriptBox["x", "2"]}], "+"}], "..."}], "+", 
    RowBox[{
     SubscriptBox["\[Beta]", "k"], 
     SubscriptBox["x", "k"]}]}]}], 
  TraditionalForm]],ExpressionUUID->"3df6d8b7-aabd-4abd-bf18-fff65041a9d8"]], \
"Text",
 CellChangeTimes->{{3.8728599790841565`*^9, 3.8728600560344706`*^9}, 
   3.872860110580801*^9, {3.872860192181012*^9, 3.872860195386731*^9}, {
   3.8728602337006836`*^9, 3.8728602842940035`*^9}, {3.872926005760792*^9, 
   3.8729260435240197`*^9}, {3.8801272307627816`*^9, 
   3.8801272312933598`*^9}, {3.8801859554907956`*^9, 3.8801859554907956`*^9}},
 
 TextAlignment->Center,ExpressionUUID->"6021c4d6-f682-42ed-8d23-860bb125720e"],

Cell["where:", "Text",
 CellChangeTimes->{{3.872860686663622*^9, 3.8728606873765926`*^9}, {
  3.8728609832149963`*^9, 
  3.872860983321015*^9}},ExpressionUUID->"c43043e4-1852-4f20-9bda-\
73c3a5d520d2"],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Beta]", "0"], TraditionalForm]],ExpressionUUID->
  "b67c48a0-07ad-4643-b195-899942d61119"],
 ": y-intercept\n",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Beta]", "k"], TraditionalForm]],ExpressionUUID->
  "d2bed371-f117-4ae4-be64-56deac22ddf6"],
 ": slope corresponding to the ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["k", "th"], TraditionalForm]],ExpressionUUID->
  "3c3c196d-992a-48bb-b76d-8db030c35be7"],
 " feature\n",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "9a016e9c-515d-45e7-a43d-a45355c99d16"],
 ": number of independent features used in the model\n\nAs for the simple \
linear regression, the optimal slopes are determined by minimizing the RSS.\n\
\nNow let\[CloseCurlyQuote]s perform a multiple linear regression using all \
13 molecular features and plot the actual vs. predicted wavelength for the \
test dataset:"
}], "Text",
 CellChangeTimes->{{3.872860694118816*^9, 3.8728607365519714`*^9}, 
   3.872860769902091*^9, {3.872926065077037*^9, 3.8729260901495147`*^9}, {
   3.872926174023297*^9, 3.8729262028128953`*^9}, {3.872926257906521*^9, 
   3.872926297094808*^9}, {3.8801927185086155`*^9, 3.880192764681155*^9}, {
   3.883646963956499*^9, 3.883646968660301*^9}, {3.8999965567885814`*^9, 
   3.8999965599884977`*^9}},ExpressionUUID->"82a14b9f-ceb4-4111-a7cb-\
c9052798ed68"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "train", " ", "a", " ", "multiple", " ", "regression", " ", "model", " ", 
    "without", " ", "any", " ", "regularization", " ", 
    RowBox[{"(", 
     RowBox[{"more", " ", "on", " ", "that", " ", "later"}], ")"}]}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{"multipleRegression", "=", 
   RowBox[{"Predict", "[", 
    RowBox[{"train", ",", "\[IndentingNewLine]", 
     RowBox[{"Method", "->", 
      RowBox[{"{", 
       RowBox[{"\"\<LinearRegression\>\"", ",", 
        RowBox[{"\"\<L1Regularization\>\"", "->", "0"}], ",", 
        RowBox[{"\"\<L2Regularization\>\"", "->", "0"}]}], "}"}]}]}], 
    "]"}]}]}]], "Input",
 CellChangeTimes->{{3.872256879660989*^9, 3.872256956439415*^9}, {
  3.872766798353076*^9, 3.8727668033614187`*^9}, {3.880186000291168*^9, 
  3.8801860105366583`*^9}},
 CellLabel->"In[60]:=",ExpressionUUID->"c83ae3c8-bd0e-47f2-9d22-38ff9c03c03a"],

Cell[BoxData[
 RowBox[{"PredictorMeasurements", "[", 
  RowBox[{"multipleRegression", ",", "test", ",", "\"\<ComparisonPlot\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.872256971968004*^9, 3.872256984172842*^9}, {
  3.872257052959553*^9, 3.872257054990301*^9}},
 CellLabel->"In[61]:=",ExpressionUUID->"5394e4dd-d574-4704-adbb-14b4b0bff701"],

Cell["\<\
As for the single-variable case, perfect model performance would be indicated \
by all the blue dots lying along the dashed line. Although this model isn\
\[CloseCurlyQuote]t perfect, its performance looks qualitatively better than \
the MolecularMass simple linear regression, and the predicted wavelengths \
span a wider range of values. Thus we can see that providing the model with \
more information improved the performance, as expected.\
\>", "Text",
 CellChangeTimes->{{3.8729264232207813`*^9, 3.8729264505495663`*^9}, {
  3.873559822782647*^9, 3.8735599018333473`*^9}, {3.880186029523355*^9, 
  3.8801860917217264`*^9}, {3.880186125282959*^9, 3.880186133610935*^9}, {
  3.8801950168196583`*^9, 3.8801950173765364`*^9}, {3.8986152360905685`*^9, 
  3.898615239005937*^9}},ExpressionUUID->"2a7c865b-d5c4-4eb9-a34f-\
5745c943f4a1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Model Evaluation", "Section"]], "Subsection",
 CellChangeTimes->{{3.872257037412108*^9, 3.8722570389221897`*^9}},
 CellTags->
  "modeEvalHref",ExpressionUUID->"c3fa0085-d290-411b-8963-da6560275fc2"],

Cell[TextData[{
 "By plotting actual vs. predicted wavelength, we could make a qualitative \
assessment of model performance. But how can we quantify the performance of a \
particular model, or quantitatively compare two different models? To do this, \
we can evaluate performance metrics using our test data.\n\nLet\
\[CloseCurlyQuote]s consider the following four metrics to quantify the \
agreement between our model predictions ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    SubscriptBox["\:0177", "i"]}], TraditionalForm]],ExpressionUUID->
  "90d499da-9ba0-47a6-a565-fe67d4fc4e40"],
 ") and the actual values ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    SubscriptBox["y", "i"]}], TraditionalForm]],ExpressionUUID->
  "d709af3a-c643-44ce-8d42-d9c8ec4e0f02"],
 "):"
}], "Text",
 CellChangeTimes->{{3.872257117050241*^9, 3.872257120338274*^9}, {
   3.872766922568865*^9, 3.872766927713377*^9}, {3.872766991088992*^9, 
   3.8727670123452187`*^9}, 3.8729264808967304`*^9, {3.872926562057176*^9, 
   3.8729266657302866`*^9}, {3.8729267804606915`*^9, 3.872926790453837*^9}, {
   3.8729614592467923`*^9, 3.8729614751038895`*^9}, {3.8729615254368105`*^9, 
   3.872961573024605*^9}, {3.872968008608967*^9, 3.8729680116794024`*^9}, 
   3.872970926586423*^9, {3.8730179874555335`*^9, 3.873018010507471*^9}, {
   3.8733690374507074`*^9, 3.8733690379752955`*^9}, 3.873369881031869*^9, {
   3.8733704456731596`*^9, 3.873370462247366*^9}, {3.873371277156395*^9, 
   3.8733712779527254`*^9}, 3.8735653288598995`*^9, 3.8735653618592706`*^9, {
   3.880123668341769*^9, 3.8801236688079596`*^9}, {3.880127342377316*^9, 
   3.880127373702694*^9}, {3.880127415969363*^9, 3.880127420883523*^9}, {
   3.880127614232685*^9, 3.880127634179121*^9}, {3.8801860986383753`*^9, 
   3.880186150539946*^9}, {3.880186182344858*^9, 3.8801862211640873`*^9}, {
   3.880214024512805*^9, 3.8802140431109743`*^9}, {3.89999660809231*^9, 
   3.8999966113191566`*^9}},ExpressionUUID->"08f602d1-d5ad-4168-a8d5-\
dcdc93549912"],

Cell["\<\
Mean Absolute Error (MAE): MAE is the average of the absolute difference \
between the actual and predicted values. The lower the error, the better the \
model performance.\[LineSeparator]https://en.wikipedia.org/wiki/Mean_absolute_\
error\
\>", "ItemNumbered",
 CellChangeTimes->{{3.873369058610963*^9, 3.8733690629255505`*^9}, {
  3.8733698104784546`*^9, 3.873369810489947*^9}, {3.873369907200796*^9, 
  3.873369941694352*^9}, {3.8733700173635993`*^9, 3.8733700186477604`*^9}, {
  3.873370073871985*^9, 3.8733700986305532`*^9}, {3.873799195709483*^9, 
  3.87379921495421*^9}, {3.873799333827676*^9, 
  3.8737993345320034`*^9}},ExpressionUUID->"85524f0d-149c-4407-ae6a-\
03491821b104"],

Cell[TextData[Cell[BoxData[
 FormBox[
  TemplateBox[<|"boxes" -> FormBox[
      RowBox[{
        StyleBox["M", "TI"], 
        StyleBox["A", "TI"], 
        StyleBox["E", "TI"], "\[LongEqual]", 
        FractionBox["1", 
         StyleBox["n", "TI"]], 
        UnderoverscriptBox["\[Sum]", 
         RowBox[{
           StyleBox["i", "TI"], "\[LongEqual]", "1"}], 
         StyleBox["n", "TI"], LimitsPositioning -> True], "|", 
        SubscriptBox[
         StyleBox["y", "TI"], 
         StyleBox["i", "TI"]], "-", 
        SubscriptBox[
         OverscriptBox[
          StyleBox["y", "TI"], "^"], 
         StyleBox["i", "TI"]], "|"}], TraditionalForm], "errors" -> {}, 
    "input" -> "MAE = \\frac{1}{n}\\sum_{i=1}^{n}|y_i - \\hat{y}_i|", "state" -> 
    "Boxes"|>,
   "TeXAssistantTemplate"], 
  TraditionalForm]],ExpressionUUID->"fc81457b-0b29-430d-aa3f-840bc37bd642"]], \
"Text",
 CellChangeTimes->{
  3.873799338728633*^9, {3.880191642879861*^9, 3.8801916498796997`*^9}},
 TextAlignment->Center,ExpressionUUID->"4789ebf4-0396-4577-b77a-9d53b30bf7f7"],

Cell["\<\
Mean Squared Error (MSE): MSE is the average of the squared difference \
between the actual and predicted values. As before, the lower the error, the \
better the model performance. MSE is one of the most used metrics for this \
kind of model.\[LineSeparator]https://en.wikipedia.org/wiki/Mean_squared_error\
\>", "ItemNumbered",
 CellChangeTimes->{{3.873369058610963*^9, 3.8733690629255505`*^9}, {
  3.8733698108086486`*^9, 3.8733698147089357`*^9}, {3.873370008528861*^9, 
  3.8733700314858694`*^9}, {3.873370093105838*^9, 3.873370095518402*^9}, {
  3.883675344264584*^9, 
  3.883675344545209*^9}},ExpressionUUID->"d9a4f453-9f92-4e2d-addd-\
b8a2a6d5b631"],

Cell[TextData[Cell[BoxData[
 FormBox[
  TemplateBox[<|"boxes" -> FormBox[
      RowBox[{
        StyleBox["M", "TI"], 
        StyleBox["S", "TI"], 
        StyleBox["E", "TI"], "\[LongEqual]", 
        FractionBox["1", 
         StyleBox["n", "TI"]], 
        UnderoverscriptBox["\[Sum]", 
         RowBox[{
           StyleBox["i", "TI"], "\[LongEqual]", "1"}], 
         StyleBox["n", "TI"], LimitsPositioning -> True], 
        SuperscriptBox[
         RowBox[{"(", 
           RowBox[{
             SubscriptBox[
              StyleBox["y", "TI"], 
              StyleBox["i", "TI"]], "-", 
             SubscriptBox[
              OverscriptBox[
               StyleBox["y", "TI"], "^"], 
              StyleBox["i", "TI"]]}], ")"}], "2"]}], TraditionalForm], 
    "errors" -> {}, "input" -> 
    "MSE = \\frac{1}{n}\\sum_{i=1}^{n}(y_i - \\hat{y}_i)^2", "state" -> 
    "Boxes"|>,
   "TeXAssistantTemplate"], 
  TraditionalForm]],ExpressionUUID->"34a7b08a-abc6-4e2a-a153-319320053219"]], \
"Text",
 CellChangeTimes->{3.8737993617478657`*^9},
 TextAlignment->Center,ExpressionUUID->"983be94f-64aa-43aa-a100-46800e1e99a9"],

Cell["\<\
Root Mean Squared Error (RMSE): RMSE is the square root of the MSE. As \
before, the lower the error, the better the model performance. It is \
conceptually similar to the standard \
deviation.\[LineSeparator]https://en.wikipedia.org/wiki/Root-mean-square_\
deviation\
\>", "ItemNumbered",
 CellChangeTimes->{{3.873369058610963*^9, 3.8733690629255505`*^9}, {
  3.8733698108086486`*^9, 3.8733698206308384`*^9}, {3.873370181556913*^9, 
  3.873370184402119*^9}, {3.8733702501269455`*^9, 3.873370254690047*^9}, {
  3.880127150408841*^9, 
  3.8801271582773275`*^9}},ExpressionUUID->"efa9b1bd-734e-4512-9c77-\
2c3e28308807"],

Cell[TextData[Cell[BoxData[
 FormBox[
  TemplateBox[<|"boxes" -> FormBox[
      RowBox[{
        StyleBox["R", "TI"], 
        StyleBox["M", "TI"], 
        StyleBox["S", "TI"], 
        StyleBox["E", "TI"], "\[LongEqual]", 
        SqrtBox[
         FractionBox[
          RowBox[{
            UnderoverscriptBox["\[Sum]", 
             RowBox[{
               StyleBox["i", "TI"], "\[LongEqual]", "1"}], 
             StyleBox["n", "TI"], LimitsPositioning -> True], 
            SuperscriptBox[
             RowBox[{"(", 
               RowBox[{
                 SubscriptBox[
                  StyleBox["y", "TI"], 
                  StyleBox["i", "TI"]], "-", 
                 SubscriptBox[
                  OverscriptBox[
                   StyleBox["y", "TI"], "^"], 
                  StyleBox["i", "TI"]]}], ")"}], "2"]}], 
          StyleBox["n", "TI"]]]}], TraditionalForm], "errors" -> {}, "input" -> 
    "RMSE = \\sqrt{\\frac{\\sum_{i=1}^{n}(y_i - \\hat{y}_i)^2}{n}}", "state" -> 
    "Boxes"|>,
   "TeXAssistantTemplate"], 
  TraditionalForm]],ExpressionUUID->"659dc0dd-3408-42aa-8f3c-7a56ea458fac"]], \
"Text",
 CellChangeTimes->{3.8737993751966825`*^9},
 TextAlignment->Center,ExpressionUUID->"eb7350f5-4ae4-4f6d-abe0-daced19476de"],

Cell[TextData[{
 "Coefficient of Determination ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    SuperscriptBox["R", "2"], ")"}], TraditionalForm]],ExpressionUUID->
  "4c7cbdfe-35aa-401b-a267-a30d3ceab531"],
 ": ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["R", "2"], TraditionalForm]],ExpressionUUID->
  "f88fdd85-7fa4-4b54-99d4-dd3dbf30e9be"],
 " reports how well the model is fitted to the data by comparing it to the \
average line of the dependent variable. In other words, it measures the \
degree to which the model explains the variability of the observed data. For \
example, a coefficient of determination of 80% indicates that the regression \
model explains 80% of the variability seen in the dependent variable.\
\[LineSeparator]https://en.wikipedia.org/wiki/Coefficient_of_determination"
}], "ItemNumbered",
 CellChangeTimes->{{3.873369058610963*^9, 3.8733690629255505`*^9}, {
  3.8733698108086486`*^9, 3.873369837433402*^9}, {3.8733703489723496`*^9, 
  3.8733703673241134`*^9}, {3.8737994731192036`*^9, 3.8737994761102276`*^9}, {
  3.8801862560679255`*^9, 
  3.8801862574665623`*^9}},ExpressionUUID->"2e9ebfa9-9479-451b-986c-\
d2f118139f78"],

Cell[TextData[Cell[BoxData[
 FormBox[
  TemplateBox[<|"boxes" -> FormBox[
      RowBox[{
        SuperscriptBox[
         StyleBox["R", "TI"], "2"], "\[LongEqual]", "1", "-", 
        FractionBox[
         RowBox[{
           UnderoverscriptBox["\[Sum]", 
            RowBox[{
              StyleBox["i", "TI"], "\[LongEqual]", "1"}], 
            StyleBox["n", "TI"], LimitsPositioning -> True], 
           SuperscriptBox[
            RowBox[{"(", 
              RowBox[{
                SubscriptBox[
                 StyleBox["y", "TI"], 
                 StyleBox["i", "TI"]], "-", 
                SubscriptBox[
                 OverscriptBox[
                  StyleBox["y", "TI"], "^"], 
                 StyleBox["i", "TI"]]}], ")"}], "2"]}], 
         RowBox[{
           UnderoverscriptBox["\[Sum]", 
            RowBox[{
              StyleBox["i", "TI"], "\[LongEqual]", "1"}], 
            StyleBox["n", "TI"], LimitsPositioning -> True], 
           SuperscriptBox[
            RowBox[{"(", 
              RowBox[{
                SubscriptBox[
                 StyleBox["y", "TI"], 
                 StyleBox["i", "TI"]], "-", 
                OverscriptBox[
                 StyleBox["y", "TI"], "_"]}], ")"}], "2"]}]]}], 
      TraditionalForm], "errors" -> {}, "input" -> 
    "R^2 = 1- \
\\frac{\\sum_{i=1}^{n}(y_i-\\hat{y}_i)^2}{\\sum_{i=1}^{n}(y_i-\\bar{y})^2}", 
    "state" -> "Boxes"|>,
   "TeXAssistantTemplate"], 
  TraditionalForm]],ExpressionUUID->"0274a69e-0ca8-43b8-bbab-19be4410cbce"]], \
"Text",
 CellChangeTimes->{{3.8737994932580533`*^9, 3.873799495535105*^9}},
 TextAlignment->Center,ExpressionUUID->"07d3cbb6-f760-46ed-9984-a207533bc4a9"],

Cell["\<\
Although these quantitative metrics are informative, it is a good practice to \
see how the data behave with our own eyes through data visualization. \
Sometimes a single number or metric cannot explain the whole picture, or can \
even be misleading. (Anscombe\[CloseCurlyQuote]s quartet is a famous \
illustration of that point: https://en.wikipedia.org/wiki/Anscombe%27s_quartet

Mathematica has built-in functions for calculating a number of different \
metrics.  Let\[CloseCurlyQuote]s see what properties are available:\
\>", "Text",
 CellChangeTimes->{{3.8733703893112793`*^9, 3.873370428680998*^9}, {
   3.873370479070176*^9, 3.873370502807695*^9}, {3.8733710892567406`*^9, 
   3.8733710900173435`*^9}, {3.8737994550663033`*^9, 
   3.8737994572026267`*^9}, {3.8801238179987335`*^9, 
   3.8801238327798014`*^9}, {3.880123951562607*^9, 3.8801239688757277`*^9}, {
   3.880123999173832*^9, 3.8801240468527365`*^9}, 
   3.883675367496492*^9},ExpressionUUID->"e706cddb-e98f-44e1-96b6-\
b055336db3b1"],

Cell[BoxData[
 RowBox[{"PredictorMeasurements", "[", 
  RowBox[{"multipleRegression", ",", "test", ",", "\"\<Properties\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.872257102366701*^9, 3.8722571137089167`*^9}},
 CellLabel->"In[62]:=",ExpressionUUID->"b5f3f1c4-496e-47af-8d8a-130c2a01eff7"],

Cell["We can request a single property using the code below:", "Text",
 CellChangeTimes->{{3.8727670306571207`*^9, 3.87276703150518*^9}, {
  3.8733705072462597`*^9, 3.8733705192444673`*^9}, {3.873371092320306*^9, 
  3.8733710939374466`*^9}},ExpressionUUID->"8ecee30d-7fe5-4684-a840-\
a619f295c513"],

Cell[BoxData[
 RowBox[{"PredictorMeasurements", "[", 
  RowBox[{"multipleRegression", ",", "test", ",", "\"\<MeanSquare\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8727670157693987`*^9, 3.872767029441279*^9}},
 CellLabel->"In[63]:=",ExpressionUUID->"294163f5-dc0a-4caf-b2ac-31bf279771e5"],

Cell["We can also request multiple properties at the same time:", "Text",
 CellChangeTimes->{{3.872767033753124*^9, 3.872767072977312*^9}, {
  3.872771241334708*^9, 
  3.872771255302373*^9}},ExpressionUUID->"13936d19-f491-470b-b093-\
fc6b6c870428"],

Cell[BoxData[
 RowBox[{"PredictorMeasurements", "[", 
  RowBox[{"multipleRegression", ",", "test", ",", 
   RowBox[{"{", 
    RowBox[{
    "\"\<MeanDeviation\>\"", ",", "\"\<MeanSquare\>\"", ",", 
     "\"\<StandardDeviation\>\"", ",", "\"\<RSquared\>\""}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{3.872767136030038*^9},
 CellLabel->"In[64]:=",ExpressionUUID->"a212aa3a-4ae0-4c96-838f-4c5600b8f121"],

Cell["\<\
Let\[CloseCurlyQuote]s make life easy by defining a convenience function that \
takes the model and a test set and calculates our four metrics of interest:\
\>", "Text",
 CellChangeTimes->{{3.872771258582221*^9, 3.8727712698874063`*^9}, {
  3.8727742738214483`*^9, 3.872774275156654*^9}, {3.873371097748966*^9, 
  3.873371107039508*^9}},ExpressionUUID->"719925a9-876f-4f15-881b-\
ddc99c38411d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"modelEvaluation", "[", 
   RowBox[{"model_", ",", "testSet_"}], "]"}], ":=", 
  RowBox[{"With", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"properties", "=", 
      RowBox[{"{", 
       RowBox[{
       "\"\<MeanDeviation\>\"", ",", "\"\<MeanSquare\>\"", ",", 
        "\"\<StandardDeviation\>\"", ",", "\"\<RSquared\>\""}], "}"}]}], 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"AssociationThread", "[", 
     RowBox[{"properties", "->", 
      RowBox[{"PredictorMeasurements", "[", 
       RowBox[{"model", ",", "testSet", ",", "properties"}], "]"}]}], "]"}]}],
    "]"}]}]], "Input",
 CellChangeTimes->{{3.8722583473517437`*^9, 3.872258386396242*^9}, {
   3.872258448476935*^9, 3.872258498042356*^9}, {3.872258528566804*^9, 
   3.872258530338586*^9}, {3.872767056769744*^9, 3.872767113913916*^9}, {
   3.87276715342564*^9, 3.872767186105986*^9}, 3.872771238323173*^9},
 CellLabel->"In[65]:=",ExpressionUUID->"008dcec5-e00f-43f6-847e-fef2e72c0f85"],

Cell[TextData[{
 "Now we can store these results in a variable called ",
 StyleBox["metrics",
  FontSlant->"Italic"],
 " and add the results for the simple linear regression and multiple \
regression models. First initialize the empty ",
 StyleBox["metrics",
  FontSlant->"Italic"],
 " variable (only run this code block once):"
}], "Text",
 CellChangeTimes->{{3.8733711194584866`*^9, 3.8733711519043603`*^9}, {
  3.880118856066812*^9, 3.880118865400213*^9}, {3.8801189395784197`*^9, 
  3.880118946169177*^9}, {3.8836753912055964`*^9, 
  3.883675408971242*^9}},ExpressionUUID->"e9a0cbbb-c9ae-42c3-b8e4-\
d2732434a0a6"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"metrics", "=", 
    RowBox[{"Association", "[", "]"}]}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "create", " ", "an", " ", "empty", " ", "association", " ", "to", " ", 
    "store", " ", "results"}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.872257047056616*^9, 3.8722571487573023`*^9}, {
  3.8722582867384443`*^9, 3.872258345224741*^9}, {3.872258381134124*^9, 
  3.872258403899211*^9}, {3.872767191674727*^9, 3.872767194526393*^9}, {
  3.872771273718987*^9, 3.8727712881584797`*^9}, {3.872952062984873*^9, 
  3.872952069820922*^9}, {3.880118872137652*^9, 3.8801188729803295`*^9}},
 CellLabel->"In[66]:=",ExpressionUUID->"d49cd77e-f387-495e-8af1-b10a4eb76911"],

Cell[TextData[{
 "Then we can add the results for the models tested to the ",
 StyleBox["metrics",
  FontSlant->"Italic"],
 " variable. (Note that we have to provide the appropriate test dataset for \
each model.)"
}], "Text",
 CellChangeTimes->{{3.880118882408546*^9, 3.8801189769711576`*^9}, {
  3.880119019019823*^9, 3.88011906153087*^9}, {3.880186627188138*^9, 
  3.880186706748713*^9}, {3.8801901131148796`*^9, 3.8801901264974437`*^9}, {
  3.883647068094056*^9, 
  3.8836470687012863`*^9}},ExpressionUUID->"3e244f4c-c5a5-4867-953e-\
f3978885b8b9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "calculate", " ", "the", " ", "performance", " ", "metrics", " ", "for", 
     " ", "the", " ", "MolecularMass", " ", "simple", " ", "linear", " ", 
     "regression", " ", "using", " ", "the", " ", "corresponding", " ", 
     "single"}], "-", 
    RowBox[{"variable", " ", "test", " ", "data"}]}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"metrics", "[", "\"\<Simple LR (MolecularMass)\>\"", "]"}], "=", 
    RowBox[{"modelEvaluation", "[", 
     RowBox[{
      RowBox[{"singleFeatureModels", "[", "featureName", "]"}], ",", 
      RowBox[{"singleFeatureTest", "[", "featureName", "]"}]}], "]"}]}], " ", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "calculate", " ", "the", " ", "performance", " ", "metrics", " ", "for", 
     " ", "the", " ", "multiple", " ", "regression", " ", "using", " ", "the",
      " ", "full", " ", "test", " ", "data"}], "*)"}], "\[IndentingNewLine]", 
   
   RowBox[{
    RowBox[{"metrics", "[", "\"\<Multiple LR\>\"", "]"}], "=", 
    RowBox[{"modelEvaluation", "[", 
     RowBox[{"multipleRegression", ",", "test"}], "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.8801189094200583`*^9, 3.880118925628496*^9}, {
   3.88011900533515*^9, 3.8801190159173303`*^9}, {3.8801866028573585`*^9, 
   3.8801866079537916`*^9}, {3.8801867095478735`*^9, 
   3.8801867612296343`*^9}, {3.880190101069706*^9, 3.880190101725733*^9}, {
   3.880195035024621*^9, 3.8801950381685905`*^9}, {3.8802127548222027`*^9, 
   3.8802127638096294`*^9}, 3.897731305261242*^9, {3.898615254447274*^9, 
   3.898615260327055*^9}},
 CellLabel->"In[67]:=",ExpressionUUID->"1f2fbe7e-9449-44f4-a8f6-3900b2d08e28"],

Cell[TextData[{
 "We can use the ",
 ButtonBox["Dataset",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://reference.wolfram.com/language/ref/Dataset.html"], None},
  ButtonNote->"http://reference.wolfram.com/language/ref/Dataset.html"],
 " command to organize the metrics into a tabular format:"
}], "Text",
 CellChangeTimes->{{3.873371165802764*^9, 3.873371205432106*^9}, {
  3.883647078144409*^9, 3.883647082735937*^9}, {3.883647728900663*^9, 
  3.883647729032811*^9}, {3.883647780190064*^9, 
  3.88364778019133*^9}},ExpressionUUID->"21aedda3-028f-4bbc-9fd8-\
6419af23fcc1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Dataset", "[", "metrics", "]"}], " ", 
  RowBox[{"(*", 
   RowBox[{"pretty", " ", "print", " ", "the", " ", "results"}], 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.872258412648326*^9, 3.8722584369576817`*^9}, {
  3.872771290686871*^9, 3.8727712959024467`*^9}},
 CellLabel->"In[69]:=",ExpressionUUID->"f13933c6-601d-479c-903c-57a08dc0c1bb"],

Cell[TextData[{
 "When we compare the MolecularMass simple linear regression and the multiple \
regression, we can see that multiple regression works better according to \
both the eye test and the quantitative performance metrics.\n\nNow add a code \
block below to calculate these performance metrics for a simple linear \
regression with the single feature that you tested above, add them to the ",
 StyleBox["metrics",
  FontSlant->"Italic"],
 " variable, and display the results in table. How did your new model perform?"
}], "Text",
 CellChangeTimes->{{3.872926748105898*^9, 3.872926764107586*^9}, {
  3.8733712114096775`*^9, 3.8733712343997035`*^9}, {3.8801867937535534`*^9, 
  3.8801868298241653`*^9}, {3.8801900627275953`*^9, 3.880190066155918*^9}, {
  3.880190135012829*^9, 3.880190147975577*^9}, {3.880195050816234*^9, 
  3.880195060059703*^9}, {3.8986152686512775`*^9, 
  3.898615271591114*^9}},ExpressionUUID->"fe70b076-feea-42f2-8ff0-\
fec105a29044"],

Cell[TextData[StyleBox["ADD A CODE BLOCK HERE TO CALCULATE THE PERFORMANCE \
METRICS FOR A SIMPLE LINEAR REGRESSION USING A DIFFERENT VARIABLE AND ADD \
THEM TO THE METRICS TABLE",
 FontWeight->"Bold"]], "Text",
 CellChangeTimes->{{3.8729268630889997`*^9, 3.872926866614791*^9}, {
  3.8801901603531723`*^9, 
  3.8801901658791447`*^9}},ExpressionUUID->"cb8c5f1c-2e67-498a-9e4c-\
a24adeafd5cc"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Avoiding Model Overfitting", "Section",
 CellChangeTimes->{{3.87225719097307*^9, 3.872257193943548*^9}, {
  3.872767243025653*^9, 
  3.8727672468897953`*^9}},ExpressionUUID->"7392dc4f-b054-48d9-bb72-\
edad10809c24"],

Cell[TextData[{
 "Overfitting refers to a situation when a model has become too specific to \
the training data and fails to generalize well to new test data. Overfitting \
generally occurs when there are too many variables in the model compared to \
the number of observations (",
 StyleBox["i.e.",
  FontSlant->"Italic"],
 ", the model is overly complicated and/or the training set is too small)."
}], "Text",
 CellChangeTimes->{{3.8729268966323595`*^9, 3.872926934286234*^9}, {
  3.8733784872942533`*^9, 3.873378578399423*^9}, {3.8735600060811343`*^9, 
  3.873560006641949*^9}, {3.8801902102368155`*^9, 
  3.8801902251315727`*^9}},ExpressionUUID->"59aaa868-281b-4fc8-8037-\
a581352d88da"],

Cell["\<\
https://jakevdp.github.io/PythonDataScienceHandbook/05.03-hyperparameters-and-\
model-validation.html#The-Bias-variance-trade-off\
\>", "Item",
 CellChangeTimes->{{3.8733785412036104`*^9, 
  3.8733785519890194`*^9}},ExpressionUUID->"16e7d91f-d991-4892-ad14-\
83ecba0f00c8"],

Cell["https://en.wikipedia.org/wiki/Overfitting", "Item",
 CellChangeTimes->{{3.8733785412036104`*^9, 
  3.8733785512182717`*^9}},ExpressionUUID->"e6c0ba78-9c0a-461d-851d-\
d2a1bfba806c"],

Cell["\<\
There are a few ways to avoid overfitting. We\[CloseCurlyQuote]ll try two \
approaches here:\
\>", "Text",
 CellChangeTimes->{
  3.8729269795247383`*^9},ExpressionUUID->"47140bec-c33b-420c-91a2-\
66e88c3e4b01"],

Cell["Identifying the best correlated feature(s)", "ItemNumbered",
 CellChangeTimes->{{3.8729269971178756`*^9, 
  3.8729269979530244`*^9}},ExpressionUUID->"0f3bf4f6-f0b5-4980-a8ed-\
519dc027d8cf"],

Cell["Using a penalized regression model", "ItemNumbered",
 CellChangeTimes->{{3.8729269971178756`*^9, 
  3.8729270068273215`*^9}},ExpressionUUID->"99e70f25-4ff6-442c-9ac9-\
a8f929325935"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Feature Selection", "Section",
 CellChangeTimes->{{3.87314500534538*^9, 3.8731450071283135`*^9}},
 CellTags->
  "featureSelectionHref",ExpressionUUID->"556598a1-e3f8-48ac-aef2-\
49f23c8627b9"],

Cell["\<\
Feature selection entails choosing better features for the model by \
eliminating some of the available independent variables. Reducing the number \
of features can help the algorithm perform better by eliminating misleading \
variables or preventing overfitting. For an overview, see the following \
article:\
\>", "Text",
 CellChangeTimes->{
  3.8729270244576974`*^9, {3.8801902792242126`*^9, 3.880190332722784*^9}, {
   3.88364712423993*^9, 3.8836471294704733`*^9}, 
   3.88364761990619*^9},ExpressionUUID->"e2aeb52c-8dad-4e8d-b26a-\
f090a1ea3b81"],

Cell["https://en.wikipedia.org/wiki/Feature_selection", "Item",
 CellChangeTimes->{{3.872927037581405*^9, 3.87292704196243*^9}, {
  3.873378600745878*^9, 
  3.873378602125603*^9}},ExpressionUUID->"172a7d62-1810-4e72-b721-\
79dd26ccb31c"],

Cell["\<\
To identify appropriate features for our model, let\[CloseCurlyQuote]s use \
the Pearson Correlation technique.\
\>", "Text",
 CellChangeTimes->{
  3.872927053033386*^9},ExpressionUUID->"12bbb5f1-78b0-4858-b2de-\
92c7e3809be1"],

Cell[CellGroupData[{

Cell["Pearson Correlation", "Subsection",
 CellChangeTimes->{{3.872257204391584*^9, 
  3.872257214575993*^9}},ExpressionUUID->"87dcf77a-99d7-4bc3-a131-\
13bf9d601531"],

Cell["\<\
The Pearson Correlation Coefficient is one way to determine what values are \
relevant for our machine learning model. This value ranges from -1 to 1 and \
can be interpreted as follows:\
\>", "Text",
 CellChangeTimes->{{3.872257323650795*^9, 3.872257324442773*^9}, {
  3.8727672947221518`*^9, 3.872767297457775*^9}, {3.8729270973432245`*^9, 
  3.8729271209727497`*^9}, {3.8801917411281357`*^9, 3.88019174840514*^9}, {
  3.880191778852663*^9, 3.8801917831918926`*^9}, {3.88019347245857*^9, 
  3.8801934742039146`*^9}},ExpressionUUID->"80c6bd28-fd80-4c14-87e0-\
fb102c8fed60"],

Cell["If the value is exactly 0, it means no correlation at all", "Item",
 CellChangeTimes->{{3.872927156619134*^9, 3.8729271590502*^9}, {
  3.8801917623753014`*^9, 
  3.8801917768852625`*^9}},ExpressionUUID->"1de67431-788a-4b4d-a533-\
d0818e0f772c"],

Cell["If the value is closer to 0, it means weaker correlation", "Item",
 CellChangeTimes->{{3.872927156619134*^9, 3.8729271590502*^9}, {
  3.880191764860462*^9, 
  3.8801917649472885`*^9}},ExpressionUUID->"cd6b0ac1-229e-4a1c-b508-\
037768c45f25"],

Cell["\<\
If the value is closer to 1, it means stronger positive correlation\
\>", "Item",
 CellChangeTimes->{{3.872927156619134*^9, 
  3.872927187318858*^9}},ExpressionUUID->"f791fa14-6f5d-4796-b6bd-\
99d555e2c6d4"],

Cell["\<\
If the value is closer to -1, it means stronger negative correlation\
\>", "Item",
 CellChangeTimes->{{3.872927156619134*^9, 
  3.872927191481598*^9}},ExpressionUUID->"91562561-587b-4e9d-a1f2-\
f010fc8a119f"],

Cell["\<\
We are only concerned about the absolute value of the correlation as the \
direction is not relevant for this exercise.\
\>", "Text",
 CellChangeTimes->{{3.872767298621828*^9, 3.872767303025816*^9}, {
  3.872771436310536*^9, 3.872771523490622*^9}, {3.872927075924164*^9, 
  3.87292711731033*^9}, {3.8729271484788*^9, 3.872927163583126*^9}, {
  3.8729271945208993`*^9, 3.8729272023704824`*^9}, {3.873378627430462*^9, 
  3.8733786298720226`*^9}, {3.873378705141339*^9, 
  3.8733787328456883`*^9}},ExpressionUUID->"3469f1be-45f0-4809-b453-\
2d17c95aa6aa"],

Cell["\<\
For more information on correlation, see: \
https://en.wikipedia.org/wiki/Correlation\
\>", "Item",
 CellChangeTimes->{
  3.873378730598691*^9, {3.8836471433049498`*^9, 
   3.883647151154026*^9}},ExpressionUUID->"1db7e209-3bfa-41d7-bb92-\
0a8ba8c39918"],

Cell[TextData[{
 "We can evaluate the Pearson correlation coefficient using the ",
 ButtonBox["Correlation",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/Correlation.html"], None},
  
  ButtonNote->"https://reference.wolfram.com/language/ref/Correlation.html"],
 " function, which takes two vectors as inputs.\n\nTo get some intuition, let\
\[CloseCurlyQuote]s create a small example and test the results.  What do you \
think the correlation should be between ",
 StyleBox["v1",
  FontSlant->"Italic"],
 " and the subsequent vectors defined below? "
}], "Text",
 CellChangeTimes->{
  3.873378720214852*^9, {3.880190379938409*^9, 3.8801904489333243`*^9}, {
   3.8801934780129385`*^9, 
   3.880193479995733*^9}},ExpressionUUID->"d0029ca9-4a54-4a04-93b1-\
01426b435140"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"v1", "=", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8",
      ",", "9", ",", "10"}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"v2", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
    "10", ",", "20", ",", "30", ",", "40", ",", "50", ",", "60", ",", "70", 
     ",", "80", ",", "90", ",", "100"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"v3", "=", 
   RowBox[{"Reverse", "[", "v2", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"v4", "=", 
   RowBox[{"RandomReal", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}], ",", "10"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.872767304146987*^9, 3.872767315481964*^9}, {
  3.8727673500344667`*^9, 3.87276736935429*^9}, {3.8727715053879557`*^9, 
  3.872771509539205*^9}, {3.872771587271076*^9, 3.872771649923098*^9}},
 CellLabel->"In[70]:=",ExpressionUUID->"843012bd-0649-43ff-ab4b-13ab8727cd66"],

Cell["\<\
The first two vectors should be highly correlated, as they correspond to \
merely multiplying by 10:\
\>", "Text",
 CellChangeTimes->{{3.872771525227001*^9, 
  3.8727715472748203`*^9}},ExpressionUUID->"88fb4a3e-8025-4136-b615-\
e24af103e0a4"],

Cell[BoxData[
 RowBox[{"Correlation", "[", 
  RowBox[{"v1", ",", "v2"}], "]"}]], "Input",
 CellChangeTimes->{{3.872767319301176*^9, 3.872767322602091*^9}},
 CellLabel->"In[74]:=",ExpressionUUID->"9e086916-372b-4636-9dc5-8f30cebfe23a"],

Cell["The first and third vectors should be anticorrelated:", "Text",
 CellChangeTimes->{{3.87277155001865*^9, 3.872771560434703*^9}, {
  3.880213044628832*^9, 
  3.880213047231615*^9}},ExpressionUUID->"d8c39ed8-41e1-4468-bbf2-\
558788e5b297"],

Cell[BoxData[
 RowBox[{"Correlation", "[", 
  RowBox[{"v1", ",", "v3"}], "]"}]], "Input",
 CellChangeTimes->{{3.8727673561304913`*^9, 3.872767358738387*^9}},
 CellLabel->"In[75]:=",ExpressionUUID->"7d4c1ef3-5842-4421-b7d6-eb42c5099a3c"],

Cell["\<\
We don\[CloseCurlyQuote]t quite know what will happen with the fourth vector, \
as it is being drawn randomly. However,  it should approach zero in the limit \
of an infinitely long vector\
\>", "Text",
 CellChangeTimes->{{3.872771568018731*^9, 3.872771583850573*^9}, {
  3.8727716582509623`*^9, 
  3.872771666419888*^9}},ExpressionUUID->"3480e052-4b6d-4670-89b9-\
639c0c0c6b4a"],

Cell[BoxData[
 RowBox[{"Correlation", "[", 
  RowBox[{"v1", ",", "v4"}], "]"}]], "Input",
 CellChangeTimes->{{3.872767372762656*^9, 3.87276737700242*^9}},
 CellLabel->"In[76]:=",ExpressionUUID->"3c11dbce-2763-41e9-b9a3-5c48bd91a4f0"],

Cell["\<\
We can see what the behavior is by plotting the list of pairs of points:\
\>", "Text",
 CellChangeTimes->{{3.872771672826892*^9, 
  3.872771710274824*^9}},ExpressionUUID->"2139ae1b-e122-4f1e-87e9-\
b66b3080f37f"],

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{
   RowBox[{"Transpose", "[", 
    RowBox[{"{", 
     RowBox[{"v1", ",", "v4"}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"AxesLabel", "->", 
    RowBox[{"{", 
     RowBox[{"\"\<v1\>\"", ",", "\"\<v4\>\""}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8727716002592077`*^9, 3.87277162185118*^9}, {
  3.8727716824036093`*^9, 3.8727716987155046`*^9}},
 CellLabel->"In[77]:=",ExpressionUUID->"f1331749-60d0-4953-aaac-96be148a45e1"],

Cell["\<\
Let\[CloseCurlyQuote]s define an accessory function to calculate the Pearson \
Correlation Coefficient for all 13 features in our dataset  with the \
MaxAbsorbanceWavelength dependent variable, then perform the calculation:\
\>", "Text",
 CellChangeTimes->{{3.872767339666111*^9, 3.872767342162218*^9}, {
  3.872771713947027*^9, 3.872771717698848*^9}, {3.872927248721831*^9, 
  3.8729272995490103`*^9}, {3.8999744442154284`*^9, 
  3.8999744466400623`*^9}},ExpressionUUID->"8b99ed2f-f074-414b-820f-\
15de41eaa18d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"featureCorrelation", "[", "data_", "]"}], ":=", 
  RowBox[{"With", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"featureNames", "=", 
       RowBox[{"Keys", "@", 
        RowBox[{"First", "@", 
         RowBox[{"Keys", "[", "data", "]"}]}]}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"x", "=", 
       RowBox[{"Keys", "[", "data", "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"y", "=", 
       RowBox[{"Values", "[", "data", "]"}]}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"AssociationMap", "[", " ", 
      RowBox[{
       RowBox[{"Correlation", "[", 
        RowBox[{
         RowBox[{"Lookup", "[", 
          RowBox[{"x", ",", "#"}], "]"}], ",", "y"}], "]"}], "&"}], "]"}], 
     "@", "featureNames"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.872767388602845*^9, 3.872767403615376*^9}, {
   3.872767437218528*^9, 3.872767480887929*^9}, {3.872767524580206*^9, 
   3.87276766743487*^9}, {3.872771727616683*^9, 3.8727717295315533`*^9}, 
   3.872771900656187*^9},
 CellLabel->"In[78]:=",ExpressionUUID->"95499a59-12a1-4a1f-83ae-4c0ae3d7de45"],

Cell[BoxData[
 RowBox[{"featureCorrelation", "[", "train", "]"}]], "Input",
 CellChangeTimes->{{3.872767643901888*^9, 3.872767645770392*^9}, {
  3.872771731027705*^9, 3.872771733019064*^9}},
 CellLabel->"In[79]:=",ExpressionUUID->"8c531bf2-d014-4e46-8b4f-2048ff2f095f"],

Cell[TextData[{
 "We can visualize the correlations sorted by value in a ",
 ButtonBox["Bar Chart",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/BarChart.html"], None},
  ButtonNote->"https://reference.wolfram.com/language/ref/BarChart.html"],
 ":"
}], "Text",
 CellChangeTimes->{{3.872771988563086*^9, 3.872771991202942*^9}, {
  3.8729273373434005`*^9, 3.8729273531072607`*^9}, {3.883647795092793*^9, 
  3.883647825779768*^9}},ExpressionUUID->"d462593b-e193-4439-9a1a-\
221dd6f82cc8"],

Cell[BoxData[
 RowBox[{"BarChart", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Sort", "@", 
    RowBox[{"featureCorrelation", "[", "train", "]"}]}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"ChartLabels", "\[Rule]", "Automatic"}], ",", 
   RowBox[{"BarOrigin", "->", "Left"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.872771985419251*^9, 3.872771985810965*^9}},
 CellLabel->"In[80]:=",ExpressionUUID->"67a4f1cf-730b-48a5-a814-3906d8df32d9"],

Cell["\<\
Think about which features show strong positive or negative correlations. \
Does your chemical intuition say that any of these properties might be \
physically meaningful in determining cyanine dye absorption?\
\>", "Text",
 CellChangeTimes->{{3.8729273985550766`*^9, 3.8729274543257236`*^9}, {
  3.873800923445252*^9, 
  3.873800929218112*^9}},ExpressionUUID->"1180aa49-256f-4d71-b096-\
db62abb2ad6d"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Applying Pearson Correlation", "Subsection",
 CellChangeTimes->{{3.872257204391584*^9, 3.872257214575993*^9}, {
  3.8729273825904865`*^9, 
  3.8729273836583796`*^9}},ExpressionUUID->"a570b489-af8f-4efe-99eb-\
94816fafec58"],

Cell["\<\
Now let\[CloseCurlyQuote]s try training a simple linear regression model \
using only the feature with the highest correlation. Add code blocks below to \
train the model, plot the actual vs. predicted wavelengths, and generate \
performance metrics. (Hint: as before, you can do this by copying and modify \
code blocks from above.) How do the results compare to your previous simple \
linear regression models?\
\>", "Text",
 CellChangeTimes->{{3.872257323650795*^9, 3.872257324442773*^9}, {
   3.8727672947221518`*^9, 3.872767297457775*^9}, {3.8729270973432245`*^9, 
   3.8729271209727497`*^9}, 3.8729273910197735`*^9, 3.872927428902238*^9, {
   3.8836754679872885`*^9, 3.8836754760881915`*^9}, {3.8999120685542026`*^9, 
   3.899912072236585*^9}},ExpressionUUID->"ddd33171-90d8-4647-a45c-\
e2853df9921f"],

Cell[TextData[StyleBox["ADD A CODE BLOCK TO PERFORM A SIMPLE LINEAR \
REGRESSION FOR A SINGLE HIGHLY CORRELATED VARIABLE, PLOT THE RESULTS, AND \
CALCULATE PERFORMANCE METRICS",
 FontWeight->"Bold"]], "Text",
 CellChangeTimes->{{3.8727677132496233`*^9, 3.8727677216337233`*^9}, {
  3.8727678408006763`*^9, 3.872767842448318*^9}, {3.8729274898862085`*^9, 
  3.87292750864338*^9}},ExpressionUUID->"1050dfd8-eebf-4b79-93d0-\
a51283785b0a"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Regularized (or Penalized) Regression", "Section",
 CellChangeTimes->{{3.872257347765011*^9, 3.872257350814156*^9}, {
  3.873018044864685*^9, 3.8730180469562736`*^9}},
 CellTags->
  "penalizedRegressionHref",ExpressionUUID->"3ae17e3c-b934-45dc-a795-\
bc484c1baaf3"],

Cell["\<\
Another approach we can take to prevent overfitting is adding a tuning \
parameter (regularization) that penalizes model complexity. In other words, \
this penalty tends to keep the model coefficients smaller and minimizes the \
effect of extreme values in the training dataset. These types of models are \
referred to as regularized or penalized regression.\
\>", "Text",
 CellChangeTimes->{{3.872257359738714*^9, 3.872257360253676*^9}, {
  3.87276773400147*^9, 3.872767738705893*^9}, {3.872927647889533*^9, 
  3.872927653210908*^9}, {3.8729616145964956`*^9, 3.8729616416391926`*^9}, {
  3.872968062123786*^9, 3.872968065460429*^9}, {3.8729680964917917`*^9, 
  3.872968164002595*^9}, {3.8730180540647926`*^9, 3.873018076619439*^9}, {
  3.8733787767293234`*^9, 3.873378777071443*^9}, {3.8801905997130933`*^9, 
  3.88019061307646*^9}, {3.880190685558214*^9, 
  3.880190720669941*^9}},ExpressionUUID->"85f57e61-c5df-4dc9-bd35-\
2d0098f2d256"],

Cell["\<\
https://jakevdp.github.io/PythonDataScienceHandbook/05.06-linear-regression.\
html#Regularization\
\>", "Item",
 CellChangeTimes->{{3.873378760654842*^9, 
  3.873378767555664*^9}},ExpressionUUID->"e5c9416e-b248-4e7e-aa5c-\
38f2e7be30b1"],

Cell["https://en.wikipedia.org/wiki/Regularization_(mathematics)", "Item",
 CellChangeTimes->{{3.873378760654842*^9, 
  3.8733787742178802`*^9}},ExpressionUUID->"7c71521c-1cde-4786-9c25-\
9dc705f13cc3"],

Cell["\<\
There are several types of regularization penalties that can be applied. Let' \
s test two different types of regularized regression models:\
\>", "Text",
 CellChangeTimes->{{3.872927619988098*^9, 3.872927625409015*^9}, {
   3.8730180802025356`*^9, 3.873018081428237*^9}, {3.8801907272481146`*^9, 
   3.8801907359844217`*^9}, 
   3.8836754895409765`*^9},ExpressionUUID->"89456c1e-69b4-40fc-8d1e-\
e3ab3bf8118b"],

Cell[TextData[{
 "Ridge Regression (",
 StyleBox["a.k.a.",
  FontSlant->"Italic"],
 " L2 regularization)"
}], "ItemNumbered",
 CellChangeTimes->{{3.872927664085682*^9, 
  3.8729277015415993`*^9}},ExpressionUUID->"7e8c22ff-7151-4050-99ce-\
a55979f1a0fb"],

Cell[TextData[{
 "Lasso Regression (",
 StyleBox["a.k.a.",
  FontSlant->"Italic"],
 " L1 regularization)"
}], "ItemNumbered",
 CellChangeTimes->{{3.872927664085682*^9, 3.8729276684167237`*^9}, {
  3.872927711161298*^9, 
  3.8729277125105104`*^9}},ExpressionUUID->"0437c23b-63aa-4583-95b8-\
e46a4ae0f83c"],

Cell[CellGroupData[{

Cell["Ridge Regression", "Subsection",
 CellChangeTimes->{{3.872257352510067*^9, 
  3.872257355258635*^9}},ExpressionUUID->"8da5c946-9317-44bd-b320-\
fc9dbde82a1e"],

Cell["\<\
Ridge Regression uses a penalty given by a regularization parameter (which we\
\[CloseCurlyQuote]ll call alpha) multiplied by the sum of the squared model \
coefficients:\
\>", "Text",
 CellChangeTimes->{{3.872257361608255*^9, 3.872257362170928*^9}, {
   3.872258786886207*^9, 3.872258790912706*^9}, {3.8729277191252565`*^9, 
   3.872927797112623*^9}, {3.873378790065545*^9, 3.8733787985439315`*^9}, {
   3.8801911176221867`*^9, 3.8801911837311106`*^9}, {3.88019121445612*^9, 
   3.8801912929083548`*^9}, 
   3.8801913243768015`*^9},ExpressionUUID->"c7455113-db23-45cb-b00c-\
02526d881216"],

Cell[TextData[Cell[BoxData[
 FormBox[
  TemplateBox[<|"boxes" -> FormBox[
      RowBox[{
        StyleBox["P", "TI"], "\[LongEqual]", "\[Alpha]", 
        UnderoverscriptBox["\[Sum]", 
         RowBox[{
           StyleBox["i", "TI"], "\[LongEqual]", "1"}], 
         StyleBox["k", "TI"], LimitsPositioning -> True], 
        SubsuperscriptBox["\[Beta]", 
         StyleBox["i", "TI"], "2"]}], TraditionalForm], "errors" -> {}, 
    "input" -> "P = \\alpha\\sum_{i=1}^{k}\\beta_i^{2}", "state" -> "Boxes"|>,
   
   "TeXAssistantTemplate"], 
  TraditionalForm]],ExpressionUUID->"15dee082-e2ca-474f-9342-77b9f8185995"]], \
"Text",
 CellChangeTimes->{3.873799338728633*^9},
 TextAlignment->Center,ExpressionUUID->"9af25c6c-76a8-4fd4-bc7a-7ba3c576c95e"],

Cell["\<\
This penalty is then added to the normal RSS term. Addition of this penalty \
term has the effect of shrinking the model coefficients, helping to reduce \
model complexity and prevent overfitting.\
\>", "Text",
 CellChangeTimes->{{3.880191290702391*^9, 3.8801913329745417`*^9}, {
  3.8801918242633686`*^9, 3.880191829641125*^9}, {3.8801927794983764`*^9, 
  3.8801927809817047`*^9}},ExpressionUUID->"9251f432-e3b8-4d60-9074-\
b75a7863dd11"],

Cell["\<\
https://jakevdp.github.io/PythonDataScienceHandbook/05.06-linear-regression.\
html#Ridge-regression-($L_2$-Regularization)\
\>", "Item",
 CellChangeTimes->{{3.873378829396372*^9, 
  3.8733788355492043`*^9}},ExpressionUUID->"07caca55-917f-43a5-8d46-\
208a84cd212e"],

Cell["https://en.wikipedia.org/wiki/Ridge_regression", "Item",
 CellChangeTimes->{{3.873378829396372*^9, 
  3.8733788417131186`*^9}},ExpressionUUID->"8c22a711-f676-49da-be89-\
e4ebd0ed7059"],

Cell[TextData[{
 "Let\[CloseCurlyQuote]s look how Ridge Regression performs using all the \
features. Note that you can tune the weight of the penalty by adjusting the \
",
 StyleBox["alphaValueRidge",
  FontSlant->"Italic"],
 " parameter in the code below. Reducing alpha to 0 makes the penalty 0 and \
turns this model back into a normal multiple regression.\n\nRun the code \
block below perform Ridge Regression analysis. (Start with the default value \
of alpha, but later you can test how changing alpha affects the results.)"
}], "Text",
 CellChangeTimes->{
  3.8733787923295584`*^9, {3.8733790184615417`*^9, 3.8733790196137114`*^9}, {
   3.8801912244247956`*^9, 
   3.880191229425617*^9}},ExpressionUUID->"177d1001-a6f1-4a74-978b-\
4d09ea8f8cb9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"alphaValueRidge", "=", "1"}], ";"}]], "Input",
 CellChangeTimes->{{3.8729513015057116`*^9, 3.8729513083340225`*^9}},
 CellLabel->"In[81]:=",ExpressionUUID->"0d59e6eb-ec06-4c27-9ff0-9b9cec1f5e63"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"ridgeRegressor1", "=", 
    RowBox[{"Predict", "[", 
     RowBox[{"train", ",", "\[IndentingNewLine]", 
      RowBox[{"Method", "->", 
       RowBox[{"{", 
        RowBox[{"\"\<LinearRegression\>\"", ",", 
         RowBox[{"\"\<L1Regularization\>\"", "->", "0"}], ",", 
         RowBox[{"\"\<L2Regularization\>\"", "->", "alphaValueRidge"}]}], 
        "}"}]}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"metrics", "[", "\"\<Ridge (1)\>\"", "]"}], "=", 
  RowBox[{"modelEvaluation", "[", 
   RowBox[{"ridgeRegressor1", ",", "test"}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.872257402061903*^9, 3.872257420651643*^9}, {
  3.872258553601685*^9, 3.8722585933108387`*^9}, {3.87225870521698*^9, 
  3.872258711548051*^9}, {3.872767759338169*^9, 3.872767768274007*^9}, {
  3.872767948192403*^9, 3.872767949151988*^9}, {3.8729513186851625`*^9, 
  3.8729513215982275`*^9}, {3.880192116839382*^9, 3.8801921193547406`*^9}},
 CellLabel->"In[82]:=",ExpressionUUID->"0b9d20a1-238e-4edb-9cfe-c518a2d7ee39"],

Cell["\<\
It is also possible to let Mathematica attempt to automatically determine the \
regularization parameter by setting the value of the parameter to Automatic. \
(By default, if neither regularization option is specified, Mathematica\
\[CloseCurlyQuote]s default to L2Regularization \[RightArrow] Automatic.)

The code block below performs automatic Ridge Regression and displays the \
performance metrics.\
\>", "Text",
 CellChangeTimes->{{3.872258721258106*^9, 3.8722587329176207`*^9}, {
   3.872961657808404*^9, 3.8729616955807343`*^9}, {3.872968193268655*^9, 
   3.872968308987158*^9}, {3.87297014471257*^9, 3.872970150511404*^9}, 
   3.872970657460175*^9, {3.8733788550962753`*^9, 3.8733789516296816`*^9}, {
   3.883647237467917*^9, 
   3.883647244264378*^9}},ExpressionUUID->"ec54f288-8c24-4eec-894f-\
22a3a10b1357"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"ridgeRegressorAuto", "=", 
    RowBox[{"Predict", "[", 
     RowBox[{"train", ",", "\[IndentingNewLine]", 
      RowBox[{"Method", "->", 
       RowBox[{"{", 
        RowBox[{"\"\<LinearRegression\>\"", ",", 
         RowBox[{"\"\<L1Regularization\>\"", "->", "0"}], ",", 
         RowBox[{"\"\<L2Regularization\>\"", "->", "Automatic"}]}], "}"}]}]}],
      "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"metrics", "[", "\"\<Ridge (Auto)\>\"", "]"}], "=", 
  RowBox[{"modelEvaluation", "[", 
   RowBox[{"ridgeRegressorAuto", ",", "test"}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.872258603456767*^9, 3.872258645161957*^9}, {
  3.8722587164628696`*^9, 3.872258719157493*^9}, {3.872767772289884*^9, 
  3.8727677733626738`*^9}, {3.8727679440649023`*^9, 3.872767959688366*^9}, {
  3.8801921292567797`*^9, 3.8801921546314564`*^9}},
 CellLabel->"In[84]:=",ExpressionUUID->"6ffeb883-d870-494f-9881-cf0b9e6a7336"],

Cell[TextData[{
 "Now let\[CloseCurlyQuote]s plot the actual vs. predicted wavelength  for \
the test dataset with the Ridge Regression model with ",
 StyleBox["alphaValueRidge",
  FontSlant->"Italic"],
 " = 1."
}], "Text",
 CellChangeTimes->{{3.873378968668543*^9, 3.87337899399603*^9}, {
  3.880213141331636*^9, 
  3.880213150562295*^9}},ExpressionUUID->"bce5dbe4-190a-42de-88e4-\
8081c6e514b2"],

Cell[BoxData[
 RowBox[{"PredictorMeasurements", "[", 
  RowBox[{"ridgeRegressor1", ",", "test", ",", "\"\<ComparisonPlot\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.872767862272895*^9, 3.872767864417753*^9}},
 CellLabel->"In[86]:=",ExpressionUUID->"3e399ee7-0413-4eb1-a08d-0535ce81dba0"],

Cell["\<\
From the performance metrics, we can see that the Ridge Regression model \
performs slightly better than the the Multiple Linear Regression without a \
penalty in this case.

Now try tuning the value of alpha and see how it affects the results. Add a \
code block below to train new Ridge Regression models and test different \
values of alpha.\
\>", "Text",
 CellChangeTimes->{{3.8727678916562777`*^9, 3.8727679017924147`*^9}, {
   3.872771772194703*^9, 3.872771774011085*^9}, {3.8729514211699286`*^9, 
   3.8729514859283037`*^9}, {3.8801918879334936`*^9, 3.880191891713417*^9}, {
   3.8801919225303993`*^9, 3.880191930415311*^9}, 
   3.8999968522979827`*^9},ExpressionUUID->"4440334d-f836-43eb-8ea5-\
8a31a6b5a742"],

Cell[TextData[StyleBox["Test alpha = 0", "ItemNumbered"]], "ItemNumbered",
 CellChangeTimes->{{3.8729514837380805`*^9, 
  3.87295150869407*^9}},ExpressionUUID->"157ff4bc-c8f7-49e7-b01e-\
bc034592e9b0"],

Cell[TextData[StyleBox["Test a few intermediate values of alpha", \
"ItemNumbered"]], "ItemNumbered",
 CellChangeTimes->{{3.8729514837380805`*^9, 
  3.872951508891507*^9}},ExpressionUUID->"f55e31af-8506-4246-bf07-\
e24a6f05dd12"],

Cell["\<\
Calculate the performance metrics for each model and compare to the results \
for an unpenalized multiple linear regression and the Ridge Regression with \
the highest penalty (alpha = 1). Which model gives the best performance?\
\>", "Text",
 CellChangeTimes->{{3.872951471175906*^9, 
  3.8729515133891*^9}},ExpressionUUID->"a2aafd03-9394-46ad-89ee-bbbc6e211284"],

Cell[TextData[StyleBox["ADD CODE BLOCKS HERE TO PERFORM RIDGE REGRESSION \
ANALYSIS USING DIFFERENT VALUES OF ALPHA. ALSO PLOT THE RESULTS AND CALCULATE \
PERFORMANCE METRICS.",
 FontWeight->"Bold"]], "Text",
 CellChangeTimes->{3.8729515330167847`*^9, 
  3.8733790299619055`*^9},ExpressionUUID->"3563ad0f-2aa5-40f0-8e4a-\
62b26cd02755"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Lasso Regression", "Subsection",
 CellChangeTimes->{{3.8722587731053457`*^9, 3.8722587737406483`*^9}, {
  3.872951544794594*^9, 
  3.8729515459442415`*^9}},ExpressionUUID->"681aaeba-0c02-4d9d-9c25-\
bc3d9b4efc5c"],

Cell["\<\
Lasso Regression uses a penalty given by a regularization parameter (again we\
\[CloseCurlyQuote]ll call it alpha) multiplied by the absolute value of the \
model coefficients:\
\>", "Text",
 CellChangeTimes->{{3.872257361608255*^9, 3.872257362170928*^9}, {
   3.872258786886207*^9, 3.872258790912706*^9}, {3.8729277191252565`*^9, 
   3.872927797112623*^9}, {3.873378790065545*^9, 3.8733787985439315`*^9}, {
   3.8801911176221867`*^9, 3.8801911837311106`*^9}, {3.88019121445612*^9, 
   3.8801912929083548`*^9}, 3.8801913243768015`*^9, {3.880191604821266*^9, 
   3.8801916184793816`*^9}, {3.880191655865185*^9, 3.8801916577188997`*^9}, {
   3.880191945685832*^9, 
   3.880191947656424*^9}},ExpressionUUID->"ff3abbce-eb39-4fb9-9e0c-\
2aef7558d922"],

Cell[TextData[Cell[BoxData[
 FormBox[
  TemplateBox[<|"boxes" -> FormBox[
      RowBox[{
        StyleBox["P", "TI"], "\[LongEqual]", "\[Alpha]", 
        UnderoverscriptBox["\[Sum]", 
         RowBox[{
           StyleBox["i", "TI"], "\[LongEqual]", "1"}], 
         StyleBox["k", "TI"], LimitsPositioning -> True], "|", 
        SubscriptBox["\[Beta]", 
         StyleBox["i", "TI"]], "|"}], TraditionalForm], "errors" -> {}, 
    "input" -> "P = \\alpha\\sum_{i=1}^{k}|\\beta_i|", "state" -> "Boxes"|>,
   "TeXAssistantTemplate"], 
  TraditionalForm]],ExpressionUUID->"7f332ef1-bbdf-421b-9011-d1c61dae5191"]], \
"Text",
 CellChangeTimes->{
  3.873799338728633*^9, {3.880191680387351*^9, 3.8801916808473377`*^9}},
 TextAlignment->Center,ExpressionUUID->"7869b203-336a-4022-b2eb-40ba25ca48da"],

Cell["\<\
Like for Ridge regression, this penalty term is added to the RSS term and has \
the effect of shrinking the model coefficients.\
\>", "Text",
 CellChangeTimes->{{3.880191290702391*^9, 3.8801913329745417`*^9}, {
  3.8801919834781475`*^9, 3.880192010662013*^9}, {3.880192791718646*^9, 
  3.880192798387982*^9}},ExpressionUUID->"bcaf8d26-bbdc-4867-a5ec-\
c6b21825d64c"],

Cell["\<\
https://jakevdp.github.io/PythonDataScienceHandbook/05.06-linear-regression.\
html#Lasso-regression-($L_1$-regularization)\
\>", "Item",
 CellChangeTimes->{{3.8733790651395655`*^9, 
  3.8733790673635883`*^9}},ExpressionUUID->"6c88b74b-9859-4c56-b1c8-\
2a3680978f1e"],

Cell["https://en.wikipedia.org/wiki/Lasso_(statistics)", "Item",
 CellChangeTimes->{{3.8733790651395655`*^9, 
  3.8733790712961173`*^9}},ExpressionUUID->"5cfbdad2-5e2a-40bf-b634-\
062d1ea26290"],

Cell["\<\
The syntax for Lasso Regression is the same as for Ridge Regression, but this \
time with the \[OpenCurlyDoubleQuote]L1Regularization\[CloseCurlyDoubleQuote] \
parameter as the relevant hyperparameter. Try writing a code block to train a \
Lasso Regression model, plot the actual vs. predicted wavelength, and \
calculate the performance metrics. Start with the maximum penalty value \
(alpha = 1) and then test a few different values, as you did for Ridge \
Regression. (Hint: be sure that you set the \
\[OpenCurlyDoubleQuote]L2Regularization\[CloseCurlyDoubleQuote] parameter \
back to 0.)\
\>", "Text",
 CellChangeTimes->{
  3.873379041310573*^9, {3.883647283172196*^9, 3.883647314790697*^9}, {
   3.883647352094949*^9, 3.8836473537067947`*^9}, {3.899911598960888*^9, 
   3.899911602586031*^9}},ExpressionUUID->"4ef18f13-e64d-48c4-89a4-\
9a2893bd98bc"],

Cell[TextData[{
 StyleBox["ADD A CODE BLOCK BELOW TO TRAIN A LASSO REGRESSION MODEL, PLOT THE \
RESULTS, AND CALCULATE PERFORMANCE METRICS. THEN DO THE SAME THING FOR A FEW \
DIFFERENT VALUES OF THE ALPHA PARAMETER.  ADD YOUR RESULTS TO THE ",
  FontWeight->"Bold"],
 StyleBox["metrics",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 StyleBox[" ASSOCIATION, AS DEMONSTRATED ABOVE.",
  FontWeight->"Bold"]
}], "Text",
 CellChangeTimes->{
  3.872951773535174*^9, {3.872968395366102*^9, 3.8729684132377234`*^9}, {
   3.873379091829764*^9, 
   3.873379101310193*^9}},ExpressionUUID->"3ec5b188-efed-4337-87bd-\
6c5e38d7a891"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Model Evaluation", "Subsection"]], "Section",
 CellChangeTimes->{{3.872768048414981*^9, 3.8727680558786*^9}, {
  3.8729518289995565`*^9, 
  3.8729518347854548`*^9}},ExpressionUUID->"e2d13518-2cb1-4b99-9ddd-\
3b37b7ca67ee"],

Cell["\<\
Let\[CloseCurlyQuote]s now review all the developed models to see which \
perform the best.\
\>", "Text",
 CellChangeTimes->{
  3.8729518197187214`*^9, {3.8729519321360807`*^9, 3.872951942113229*^9}, {
   3.880214158221017*^9, 3.880214187572736*^9}, {3.8802143283928905`*^9, 
   3.8802143359560175`*^9}, {3.8986993906754913`*^9, 
   3.8986993913286657`*^9}},ExpressionUUID->"f5be6bfa-3b09-473e-8b5e-\
fa1316045f46"],

Cell[BoxData[
 RowBox[{"Dataset", "[", "metrics", "]"}]], "Input",
 CellChangeTimes->{{3.872258865119705*^9, 3.872258871073477*^9}},
 CellLabel->"In[87]:=",ExpressionUUID->"b77b2d44-6941-4187-a69b-0c6f81136a47"],

Cell[TextData[{
 "Ensure that the table above includes all the models that you tested. If it \
doesn\[CloseCurlyQuote]t, go back and save the missing performance metrics to \
the ",
 StyleBox["metrics",
  FontSlant->"Italic"],
 " variable.\n\nAlthough the model performance isn\[CloseCurlyQuote]t \
perfect, you can see that choosing a well-correlated feature can give better \
results than a poorly-correlated feature, and that using a penalized \
regression model can often improve on the performance of an unpenalized \
multiple regression."
}], "Text",
 CellChangeTimes->{{3.8729519805947623`*^9, 3.8729520268844943`*^9}, 
   3.8729521037966127`*^9, {3.8801922500709867`*^9, 3.8801922997857237`*^9}, {
   3.8802135083458047`*^9, 
   3.880213524096733*^9}},ExpressionUUID->"a794447e-f796-488e-8bde-\
c145c3711217"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Feature Importance", "Section",
 CellChangeTimes->{{3.872768048414981*^9, 3.8727680558786*^9}},
 CellTags->
  "featureImportanceHref",ExpressionUUID->"171a1058-a0a8-4970-93b1-\
dde6c6d99fb1"],

Cell["\<\
In addition to using a regression model to make quantitative predictions of \
our target value, we can also use it to gain insight into the system that we \
are studying. In other words, we can use regression models to generate \
hypotheses about what factors are important for cyanine dye absorption. One \
way to do this is to assess which of the independent variables make the \
largest contribution to determining the predicted result in our regression \
models. We refer to this property as feature importance.\
\>", "Text",
 CellChangeTimes->{{3.872771194406344*^9, 3.872771198318343*^9}, {
  3.8727717777953663`*^9, 3.872771779874847*^9}, {3.872952124895295*^9, 
  3.8729521312137265`*^9}, {3.8729521652427187`*^9, 3.872952165729244*^9}, {
  3.8729522675424414`*^9, 3.8729522687470484`*^9}, {3.8801928979572487`*^9, 
  3.8801931456446447`*^9}, {3.8999741956114435`*^9, 
  3.899974196083516*^9}},ExpressionUUID->"d174c8f4-735f-488b-9b98-\
9b826d96f6da"],

Cell[CellGroupData[{

Cell["Feature Importance Using Coefficients", "Subsection",
 CellChangeTimes->{{3.8729523955649424`*^9, 
  3.872952399630885*^9}},ExpressionUUID->"bef9533e-aacd-4542-ba5f-\
14b3c92eb70c"],

Cell["\<\
There is a simple approach for interpreting feature importance in linear \
regression models with normalized features, like the ones \
we\[CloseCurlyQuote]ve used so far. Coefficients with larger magnitudes \
correspond to features that are playing a larger role in the model. Run the \
code blocks below to plot the coefficients associated with each feature in \
the multiple regression model:\
\>", "Text",
 CellChangeTimes->{{3.87295227460213*^9, 3.8729523721528735`*^9}, {
  3.872952484147154*^9, 3.8729525075623956`*^9}, {3.880193154216956*^9, 
  3.880193156887534*^9}, {3.883647395539487*^9, 3.883647395830859*^9}, {
  3.899471918327902*^9, 
  3.8994719187800517`*^9}},ExpressionUUID->"3c428353-41fb-47e6-85f1-\
dcb349728fc9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"extractLinearModelCoefficients", "[", "model_", "]"}], ":=", 
  RowBox[{"With", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"featureNames", "=", 
       RowBox[{
        RowBox[{"model", "[", 
         RowBox[{"[", 
          RowBox[{
          "1", ",", "\"\<Input\>\"", ",", "\"\<Preprocessor\>\"", ",", "2", 
           ",", "\"\<Input\>\""}], "]"}], "]"}], "//", "Keys"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"weights", "=", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"Information", "[", " ", 
           RowBox[{
            RowBox[{"model", "[", 
             RowBox[{"[", 
              RowBox[{
              "1", ",", "\"\<Model\>\"", ",", "\"\<MeanFunction\>\""}], "]"}],
              "]"}], ",", " ", "\"\<Arrays\>\""}], "]"}], "[", 
          RowBox[{"[", 
           RowBox[{"Key", "[", 
            RowBox[{"{", "\"\<Weights\>\"", "}"}], "]"}], "]"}], "]"}], "//", 
         "First"}], "//", "Normal"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"AssociationThread", "[", 
     RowBox[{"featureNames", "->", "weights"}], "]"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.872770270145664*^9, 3.8727702851122303`*^9}, {
   3.87277051080029*^9, 3.872770581816579*^9}, 3.872770614616353*^9, {
   3.872770717240106*^9, 3.872770834559963*^9}},
 CellLabel->"In[88]:=",ExpressionUUID->"494a4b12-e12e-466b-8924-2867d8fc0ae8"],

Cell[BoxData[
 RowBox[{"resultsMR", "=", 
  RowBox[{
  "extractLinearModelCoefficients", "[", "multipleRegression", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.872771093095155*^9, 3.872771098839087*^9}, {
  3.873902195589571*^9, 3.873902198544673*^9}, {3.8801932058323565`*^9, 
  3.880193205889144*^9}},
 CellLabel->"In[89]:=",ExpressionUUID->"270a789c-608a-4bb9-8a5b-ed4f1cec0e4e"],

Cell[BoxData[
 RowBox[{"BarChart", "[", 
  RowBox[{"resultsMR", ",", "\[IndentingNewLine]", 
   RowBox[{"ChartLabels", "\[Rule]", "Automatic"}], ",", 
   RowBox[{"BarOrigin", "->", "Left"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.872771080230814*^9, 3.872771113742741*^9}, {
  3.880193221418731*^9, 3.880193221490259*^9}},
 CellLabel->"In[90]:=",ExpressionUUID->"18a8083b-ecc2-418f-a6ce-43866e00d4a1"],

Cell["\<\
To make the results even clearer, we can sort by coefficient value.\
\>", "Text",
 CellChangeTimes->{{3.8727710853272867`*^9, 3.872771122782662*^9}, {
  3.872952177518093*^9, 3.872952209371789*^9}, {3.897392025812921*^9, 
  3.897392027779066*^9}},ExpressionUUID->"ed3f1bf0-48c4-4721-89c9-\
5b6e494e6c21"],

Cell[BoxData[
 RowBox[{"BarChart", "[", " ", 
  RowBox[{
   RowBox[{"Sort", "[", "resultsMR", "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"ChartLabels", "\[Rule]", "Automatic"}], ",", 
   RowBox[{"BarOrigin", "->", "Left"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.872770793451437*^9, 3.87277079767258*^9}, {
  3.872770848383881*^9, 3.872770870423234*^9}, {3.8727709059677887`*^9, 
  3.8727709082948437`*^9}, {3.872771015280102*^9, 3.872771054231019*^9}, {
  3.872771125919386*^9, 3.872771130742676*^9}, {3.872771810347281*^9, 
  3.872771813475039*^9}, {3.880193226048273*^9, 3.880193226355928*^9}},
 CellLabel->"In[91]:=",ExpressionUUID->"162be6cb-1a78-4bbd-9cc1-44f15d34e7fe"],

Cell["\<\
You might notice that the features with the highest weights are not the same \
as the features that were best correlated with the MaxAbsorbanceWavelength \
according to the Pearson Correlation analysis. That discrepancy can arise \
because the Pearson Correlation analysis looks at the correlation between \
each independent variable and the dependent variable separately, whereas this \
analysis is looking at the contribution of each independent variable to the \
model that includes all 13 independent variables together. This is an \
important caveat, and it means that sometimes feature importance analysis \
based on the coefficients can be misleading.

Now let\[CloseCurlyQuote]s look at the feature importance for the Ridge and \
Lasso Regression models. Modify the code blocks above to generate plots of \
the coefficients for each of those models.\
\>", "Text",
 CellChangeTimes->{{3.872771141198518*^9, 3.872771141694345*^9}, {
  3.8729522296676292`*^9, 3.872952231672674*^9}, {3.880128996227318*^9, 
  3.8801290015596595`*^9}, {3.8801933149067287`*^9, 
  3.8801933445633645`*^9}},ExpressionUUID->"2115cdd5-6dd4-4dcd-8da7-\
266c5dcfc6fd"],

Cell[TextData[StyleBox["ADD A CODE BLOCK BELOW TO PLOT THE FEATURE \
COEFFICIENTS FOR THE RIDGE AND LASSO REGRESSION MODELS WITH ALPHA = 1",
 FontWeight->"Bold"]], "Text",
 CellChangeTimes->{3.872952541484203*^9, 
  3.873902168278903*^9},ExpressionUUID->"7aaeb365-93e1-461c-8175-\
692d5ee75c2d"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Gaining Insight from Regression Models", "Section",
 CellChangeTimes->{{3.872771146558547*^9, 
  3.872771176518754*^9}},ExpressionUUID->"63834e50-8412-4017-bb9e-\
27c3a68749bc"],

Cell["\<\
Look back at the results of all the regression models that you\
\[CloseCurlyQuote]ve trained so far. Also consider the Pearson Correlation \
analysis and the feature importance analysis.

None of our 13 features can fully explain the differences in wavelength of \
maximum absorbance for all the cyanine dyes in our dataset. But now, use your \
chemical intuition and try to generate a hypothesis that is grounded in \
quantum chemistry, using any insight that you can take from the regression \
models. (Hint: think about the quantum chemistry models that you\
\[CloseCurlyQuote]ve studied so far in your physical chemistry course.)\
\>", "Text",
 CellChangeTimes->{
  3.8729526087472515`*^9, {3.873145206689577*^9, 3.8731452169383125`*^9}, {
   3.88019335194267*^9, 
   3.880193367557928*^9}},ExpressionUUID->"1b1d8bdb-314e-4c9e-beab-\
5f3edd51b95e"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Part II ", "Title",
 CellChangeTimes->{{3.8727711784304447`*^9, 
  3.8727711796224403`*^9}},ExpressionUUID->"e8c7acfa-d0ca-4ea1-ba98-\
ca5db73b1671"],

Cell[CellGroupData[{

Cell["Feature Engineering ", "Section",
 CellChangeTimes->{{3.872772027834909*^9, 3.872772030403035*^9}, {
  3.8729596037813263`*^9, 
  3.87295960779191*^9}},ExpressionUUID->"423bcf50-2e7d-477a-b016-\
2928078e0c4d"],

Cell["\<\
So far we\[CloseCurlyQuote]ve only considered the 13 features in our dataset. \
But we can also make combinations of these individual features to try to \
improve model performance. This process of creating new features from the \
ones we already have, either combining them or applying other operations, is \
called feature engineering.\
\>", "Text",
 CellChangeTimes->{{3.8727720570268517`*^9, 3.872772060090994*^9}, {
   3.8729526428737426`*^9, 3.872952675746061*^9}, {3.8729596109487495`*^9, 
   3.8729596117370434`*^9}, 3.8729617576147814`*^9, {3.8733791576311593`*^9, 
   3.873379158135811*^9}, {3.880193405646891*^9, 
   3.8801934070420303`*^9}},ExpressionUUID->"7325ecf6-3e40-4a70-a919-\
b5f839f61ffd"],

Cell["\<\
https://jakevdp.github.io/PythonDataScienceHandbook/05.04-feature-engineering.\
html\
\>", "Item",
 CellChangeTimes->{{3.873379139829521*^9, 
  3.8733791504298887`*^9}},ExpressionUUID->"2e7535a4-e952-40d1-8b6c-\
7a31090cf17f"],

Cell["https://en.wikipedia.org/wiki/Feature_engineering", "Item",
 CellChangeTimes->{{3.873379139829521*^9, 
  3.873379156040101*^9}},ExpressionUUID->"a878a7ac-b29c-4130-bff1-\
90681d06d55e"],

Cell["\<\
Let\[CloseCurlyQuote]s try making a new feature that is the product of the \
number of heteroatoms and the number of heterocycles in the molecules and \
then use that new feature in a model.\
\>", "Text",
 CellChangeTimes->{{3.872772083955091*^9, 3.872772106562817*^9}, 
   3.8729596807602177`*^9},ExpressionUUID->"3210526b-0434-4ba1-922b-\
c317b00aca72"],

Cell[TextData[{
 "The following adds a new feature, named HACxHCC to each row, take the \
current value of the row (represented by the placeholder ",
 ButtonBox["Slot variable #",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://reference.wolfram.com/language/ref/Slot.html"], None},
  ButtonNote->"http://reference.wolfram.com/language/ref/Slot.html"],
 ") , looking up the value of the named columns in each row."
}], "Text",
 CellChangeTimes->{{3.87277293327501*^9, 3.872772938058979*^9}, {
   3.872959683601548*^9, 3.872959686668006*^9}, {3.8729618212534027`*^9, 
   3.8729619749941845`*^9}, {3.87297023043874*^9, 3.8729702807040863`*^9}, {
   3.872970380355246*^9, 3.872970474938607*^9}, {3.8729709864642553`*^9, 
   3.872970987260646*^9}, {3.87301815035913*^9, 3.8730181594413404`*^9}, 
   3.8733792986822233`*^9},ExpressionUUID->"ec19ce3a-530d-40d8-a359-\
7ac836738ee5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"expandedDataset", "=", 
   RowBox[{"dataset", "[", 
    RowBox[{"All", ",", " ", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"<|", 
       RowBox[{"#", ",", 
        RowBox[{"\"\<HACxHCC\>\"", "->", 
         RowBox[{
          RowBox[{"#", "[", "\"\<HeteroatomCount\>\"", "]"}], "*", 
          RowBox[{"#", "[", "\"\<HeterocycleCount\>\"", "]"}]}]}]}], "|>"}], 
      "&"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8727725597084846`*^9, 3.8727725866595707`*^9}, {
   3.872772617483858*^9, 3.872772654755371*^9}, 3.872772741755917*^9, 
   3.872772930555875*^9, {3.872970306612988*^9, 3.872970307058422*^9}, {
   3.872970348343933*^9, 3.872970362819376*^9}},
 CellLabel->"In[92]:=",ExpressionUUID->"b9a048ba-e0e1-492b-a090-e042373961bd"],

Cell["\<\
Now repeat this process by combining two or more features of your choice (by \
addition, multiplication, subtraction, etc). For example, you could pick two \
of the features with highest correlation in the Pearson analysis, or you \
could pick two features that your chemical intuition says might be important. \
Add a code block below to generate a new feature.\
\>", "Text",
 CellChangeTimes->{{3.8733792520550365`*^9, 
  3.8733793132193637`*^9}},ExpressionUUID->"38b74fe4-6b65-41af-b465-\
f553132dca8c"],

Cell[TextData[StyleBox["ADD A CODE BLOCK BELOW TO CREATE A NEW FEATURE BY \
COMBINING FEATURES FROM THE ORIGINAL DATASET",
 FontWeight->"Bold"]], "Text",
 CellChangeTimes->{
  3.872952541484203*^9, {3.873379303314228*^9, 3.873379324378559*^9}, 
   3.8733795798531523`*^9},ExpressionUUID->"44bda71e-c72b-4b1a-b8a6-\
519755fd4a33"],

Cell["\<\
Now try running simple linear regression analyses separately with HACxHCC and \
your new feature. You will need to go through the preprocessing data steps \
(separating x and y values, splitting, rescaling, etc) before performing the \
regression.\
\>", "Text",
 CellChangeTimes->{{3.872772982483013*^9, 3.872773016547098*^9}, {
  3.8729618065626173`*^9, 3.8729618071465693`*^9}, {3.8730181379955773`*^9, 
  3.8730181403121696`*^9}, {3.8730181703696637`*^9, 3.8730181952399683`*^9}, {
  3.8733791868565273`*^9, 3.873379237552374*^9}, {3.8733793283249807`*^9, 
  3.873379345150128*^9}, {3.8733794929347243`*^9, 
  3.873379549462469*^9}},ExpressionUUID->"cc18223a-86dc-4e33-b5fd-\
b7e1633b43a6"],

Cell[TextData[StyleBox["ADD A CODE BLOCK BELOW TO REPEAT THE DATA \
PREPROCESSING, PERFORM A SIMPLE LINEAR REGRESSION FOR THE TWO NEW FEATURES, \
VISUALIZE THE RESULTS, AND CALCULATE PERFORMANCE METRICS",
 FontWeight->"Bold"]], "Text",
 CellChangeTimes->{{3.87337950225708*^9, 3.873379518782818*^9}, {
  3.8733795540747905`*^9, 3.87337958128337*^9}, {3.8733798644299603`*^9, 
  3.8733799093656797`*^9}},ExpressionUUID->"73e1fbfc-f210-41de-b613-\
f22cd3f7b558"],

Cell["How well did HACxHCC and your new feature perform?", "Text",
 CellChangeTimes->{
  3.8733793687271123`*^9, {3.873379488094654*^9, 
   3.8733794891889687`*^9}},ExpressionUUID->"9dff8c53-2f7b-4982-878b-\
78899325e566"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Tree Models", "Section",
 CellChangeTimes->{{3.8727730269236927`*^9, 3.872773028123358*^9}},
 CellTags->
  "treeModelsHref",ExpressionUUID->"6a5faae0-f57e-4b21-a9f9-d04ff224d6ce"],

Cell["\<\
Tree models make decisions using a tree-like structure with nodes, branches, \
and leaves. They can be used for either regression or classification analyses.

The most common tree-based models for regression problems are:\
\>", "Text",
 CellChangeTimes->{{3.872959894145397*^9, 3.872959896772546*^9}, {
  3.872960020590821*^9, 3.872960037294549*^9}, {3.872960169944504*^9, 
  3.872960211864704*^9}},ExpressionUUID->"0addd1dc-8122-4b3d-84e3-\
7fd8d0bbcf5c"],

Cell["Decision Tree", "ItemNumbered",
 CellChangeTimes->{{3.8729602250802493`*^9, 
  3.8729602283242507`*^9}},ExpressionUUID->"6f7692d9-c8d9-4415-a416-\
65c497a36893"],

Cell["Random Forest", "ItemNumbered",
 CellChangeTimes->{{3.8729602250802493`*^9, 
  3.872960229889063*^9}},ExpressionUUID->"ae7b1519-28d8-4801-b9a3-\
2fa25d31462e"],

Cell[CellGroupData[{

Cell["Decision Tree Regression", "Subsection",
 CellChangeTimes->{{3.872773033635099*^9, 
  3.8727730364350777`*^9}},ExpressionUUID->"393c525e-17f6-4fb7-9277-\
fbe018893303"],

Cell["\<\
The Decision Tree algorithm uses a single tree to make predictions. It models \
the data in a tree structure in which each leaf node leads to the prediction \
for the dependent variable. Although easy to implement, Decision Tree models \
can be prone to overfitting.\
\>", "Text",
 CellChangeTimes->{{3.8727730428915033`*^9, 3.872773044226859*^9}, {
  3.872960288776902*^9, 3.872960318689319*^9}, {3.872960444568816*^9, 
  3.8729604568432574`*^9}, {3.8729604936802793`*^9, 3.8729605210175447`*^9}, {
  3.872963048547505*^9, 3.872963144293993*^9}, {3.872968488950979*^9, 
  3.872968507515708*^9}, {3.8729704895215387`*^9, 3.872970491646703*^9}, {
  3.873018279433672*^9, 3.873018296046733*^9}, {3.873379633928226*^9, 
  3.873379658158442*^9}},ExpressionUUID->"850445a9-ef68-4028-90e5-\
b7b647d7d458"],

Cell["\<\
https://jakevdp.github.io/PythonDataScienceHandbook/05.08-random-forests.html\
\
\>", "Item",
 CellChangeTimes->{{3.873379694345158*^9, 
  3.873379708816065*^9}},ExpressionUUID->"64c7f920-7172-46f5-ab7a-\
c2cb04ad2e99"],

Cell["https://en.wikipedia.org/wiki/Decision_tree_learning", "Item",
 CellChangeTimes->{{3.873379694345158*^9, 
  3.873379713732209*^9}},ExpressionUUID->"842f9036-2368-42d4-a7bc-\
bfdc938f0f92"],

Cell["\<\
The code block below trains a Decision Tree model and visualizes the tree \
structure. Run this analysis, then add a code block to plot the actual vs. \
predicted wavelength and to calculate the performance metrics.\
\>", "Text",
 CellChangeTimes->{
  3.8733796553841314`*^9, {3.8733797266705565`*^9, 3.873379727737636*^9}, {
   3.8999120476955075`*^9, 
   3.899912051683577*^9}},ExpressionUUID->"471afb6b-8392-49ea-b6b0-\
2cddd1da9b9b"],

Cell[BoxData[
 RowBox[{"decisionT", "=", 
  RowBox[{"Predict", "[", 
   RowBox[{"train", ",", 
    RowBox[{"Method", "->", "\"\<DecisionTree\>\""}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.872773048851861*^9, 3.872773068131392*^9}, {
  3.873018313430002*^9, 3.873018329235777*^9}, {3.8733800899788094`*^9, 
  3.8733800924403353`*^9}},
 CellLabel->"In[93]:=",ExpressionUUID->"e4051ce5-b29a-4cf4-ad00-ea7bf86e7da3"],

Cell["Let\[CloseCurlyQuote]s visualize how well this model fits the training \
data:", "Text",
 CellChangeTimes->{{3.872773095923464*^9, 3.8727731036750813`*^9}, {
  3.873379756802355*^9, 
  3.8733797800359154`*^9}},ExpressionUUID->"3163f39c-4971-4cb8-87bb-\
15179432382a"],

Cell[BoxData[
 RowBox[{"PredictorMeasurements", "[", 
  RowBox[{"decisionT", ",", "train"}], "]"}]], "Input",
 CellChangeTimes->{{3.872773076608974*^9, 3.87277308300362*^9}, {
  3.873380098830345*^9, 3.8733801002236958`*^9}},
 CellLabel->"In[94]:=",ExpressionUUID->"42342caf-6d39-415c-ad50-b01b82244be5"],

Cell["\<\
Now let\[CloseCurlyQuote]s visualize how well this model predicts the test \
data:\
\>", "Text",
 CellChangeTimes->{{3.872773106547101*^9, 3.872773115075329*^9}, {
  3.873379786071398*^9, 
  3.8733798000555215`*^9}},ExpressionUUID->"016bf3b7-aa98-450a-8669-\
5545c5fb83d9"],

Cell[BoxData[
 RowBox[{"PredictorMeasurements", "[", 
  RowBox[{"decisionT", ",", "test"}], "]"}]], "Input",
 CellChangeTimes->{{3.8727730910195723`*^9, 3.8727730912673264`*^9}, {
  3.873380104080825*^9, 3.8733801056877794`*^9}},
 CellLabel->"In[95]:=",ExpressionUUID->"0b3c926c-4f46-4965-84aa-e2c55577e97e"],

Cell[TextData[{
 "Now add a code block to include the performance metrics for the Decision \
Tree regression in our ",
 StyleBox["metrics",
  FontSlant->"Italic"],
 " Association."
}], "Text",
 CellChangeTimes->{{3.8733798187639685`*^9, 
  3.8733798509212193`*^9}},ExpressionUUID->"773ff85b-8018-4ad7-9cb8-\
caece0c127c0"],

Cell[TextData[StyleBox["ADD A CODE BLOCK HERE TO PLOT THE DECISION TREE \
RESULTS AND CALCULATE PERFORMANCE METRICS",
 FontWeight->"Bold"]], "Text",
 CellChangeTimes->{{3.872960406229286*^9, 
  3.872960409542653*^9}},ExpressionUUID->"a0a7682d-749e-44ee-903e-\
bd67dbaa0ffa"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Random Forest Regression", "Subsection",
 CellChangeTimes->{{3.872773033635099*^9, 3.8727730364350777`*^9}, {
  3.8729603869952617`*^9, 
  3.872960389600374*^9}},ExpressionUUID->"2c0b70d5-aae2-4e09-879a-\
37587e647e03"],

Cell["\<\
Random Forest builds a collection of Decision Trees, where each tree is \
trained with a random subset of training instances and a random subset of \
features. The final prediction is determined as the average output among the \
collection of trees. The Random Forest algorithm is less prone to overfitting \
data than the Decision Tree algorithm.\
\>", "Text",
 CellChangeTimes->{{3.8727730428915033`*^9, 3.872773044226859*^9}, {
   3.872960288776902*^9, 3.872960318689319*^9}, 3.8729604370918865`*^9, 
   3.872960579165857*^9, {3.87296308019528*^9, 3.8729630962470913`*^9}, {
   3.8730183047209425`*^9, 3.8730183058430066`*^9}, {3.8730183525151525`*^9, 
   3.873018565286152*^9}, {3.8733799222292876`*^9, 
   3.8733799461783967`*^9}},ExpressionUUID->"75cca9ba-06b9-48b2-9dea-\
03b08fbf6f59"],

Cell["\<\
https://jakevdp.github.io/PythonDataScienceHandbook/05.08-random-forests.html#\
Random-Forest-Regression\
\>", "Item",
 CellChangeTimes->{{3.8733799523250465`*^9, 
  3.873379957425902*^9}},ExpressionUUID->"14a2d590-1745-44f9-a38c-\
60f805693d59"],

Cell["https://en.wikipedia.org/wiki/Random_forest", "Item",
 CellChangeTimes->{{3.8733799523250465`*^9, 
  3.8733799632091446`*^9}},ExpressionUUID->"0dedf8fa-a6c4-488e-8121-\
0654e1ebc60a"],

Cell[TextData[{
 "To train a Random Forest model, you can simply change the \
\[OpenCurlyDoubleQuote]Method\[CloseCurlyDoubleQuote] to \
\[OpenCurlyDoubleQuote]RandomForest\[CloseCurlyDoubleQuote] in the ",
 ButtonBox["Predict",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/Predict.html"], None},
  ButtonNote->"https://reference.wolfram.com/language/ref/Predict.html"],
 " function. Add a code block below to train a Random Forest model, plot the \
actual vs. predicted wavelength, and calculate the performance metrics."
}], "Text",
 CellChangeTimes->{
  3.873379924706942*^9, {3.8801937498963203`*^9, 3.880193800114571*^9}, {
   3.8999120586674175`*^9, 
   3.8999120623473663`*^9}},ExpressionUUID->"09ddaa22-f89e-4b36-84a5-\
400685228a7b"],

Cell[TextData[StyleBox["ADD A CODE BLOCK HERE TO TRAIN A RANDOM FOREST MODEL, \
PLOT THE RESULTS, RESULTS AND CALCULATE PERFORMANCE METRICS ",
 FontWeight->"Bold"]], "Text",
 CellChangeTimes->{{3.872960616512312*^9, 3.87296062265821*^9}, {
  3.8730185704788685`*^9, 
  3.8730185774155426`*^9}},ExpressionUUID->"86c4612f-d718-41d1-827d-\
c25c02c05ff7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Feature Importance using SHapley Additive \
exPlanations (SHAP)", "Section"]], "Subsection",
 CellChangeTimes->{{3.872773126275247*^9, 
  3.872773136275125*^9}},ExpressionUUID->"cc614a22-1692-4853-9464-\
d4a1340bfb65"],

Cell["\<\
For the linear regression models in Part I of this activity, we used the \
coefficients to determine which features were most important in the model. \
But for non-linear models, like DecisionTree or RandomForest, determining \
feature importance can be more difficult. There are a few model-specific \
approaches that can be used, but here we will implement a general approach \
called SHapley Additive exPlanations (SHAP).

SHAP is a method derived from Game Theory (a topic in Economics) that brings \
interpretability to machine learning models, showing the contribution of each \
feature in a model-agnostic way. For more information see:\
\>", "Text",
 CellChangeTimes->{{3.872773137611163*^9, 3.872773139331484*^9}, {
  3.872773871387892*^9, 3.872773892044042*^9}, {3.8729607129325504`*^9, 
  3.8729607628776875`*^9}, {3.8729607978193693`*^9, 3.872960811505104*^9}, {
  3.873380048387024*^9, 3.8733800491177692`*^9}, {3.8801938173158226`*^9, 
  3.880193848709999*^9}, {3.883647893173605*^9, 
  3.883647901818825*^9}},ExpressionUUID->"3eb140ed-ed95-40a6-99d7-\
fdb9f53966a1"],

Cell["\<\
Original report (\[OpenCurlyDoubleQuote]A Unified Approach to Interpreting \
Model Predictions\[CloseCurlyDoubleQuote] by Scott M. Lundberg and Su-In \
Lee): https://papers.nips.cc/paper/2017/hash/8a20a8621978632d76c43dfd28b67767-\
Abstract.html\
\>", "Item",
 CellChangeTimes->{{3.8733799978551664`*^9, 3.8733800198707123`*^9}, {
  3.880124687667261*^9, 3.8801247168006067`*^9}, {3.8801938619523163`*^9, 
  3.8801938913701954`*^9}},ExpressionUUID->"7887d003-e413-4c72-81c2-\
2ed878f4c8f0"],

Cell["https://shap.readthedocs.io/en/latest/index.html", "Item",
 CellChangeTimes->{{3.8733799978551664`*^9, 3.8733800031706877`*^9}, {
  3.873380051132555*^9, 3.8733800621365886`*^9}, {3.873560025680029*^9, 
  3.8735600437008324`*^9}},ExpressionUUID->"066e0d5a-ae2a-4523-bb46-\
2251b94cb802"]
}, Open  ]],

Cell[CellGroupData[{

Cell["SHAP Analysis for Decision Tree Regression", "Subsection",
 CellChangeTimes->{{3.8733802911819515`*^9, 
  3.8733802970826416`*^9}},ExpressionUUID->"424c011d-4690-4dcb-a3c3-\
21156d720794"],

Cell["\<\
Now let\[CloseCurlyQuote]s try to understand our Decision Tree model using \
the SHAP approach. The code block below performs SHAP analysis on our \
Decision Tree model and displays a plot of feature importance:\
\>", "Text",
 CellChangeTimes->{{3.8729608157962713`*^9, 3.872960881404893*^9}, {
  3.872970510404625*^9, 3.872970513494508*^9}, {3.873380073920251*^9, 
  3.8733800766612315`*^9}, {3.873814226442066*^9, 
  3.8738142370629544`*^9}},ExpressionUUID->"047cdf4e-1be5-403a-be4c-\
d9161d85fdd8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"note", ":", " ", 
    RowBox[{
    "the", " ", "\"\<Quiet\>\"", " ", "below", " ", "suppresses", " ", 
     "error", " ", "messages", " ", "that", " ", 
     RowBox[{"aren", "'"}], "t", " ", "important", " ", "for", " ", "the", 
     " ", "results"}]}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"shapPlotDecisionT", "=", 
   RowBox[{
    RowBox[{"PredictorMeasurements", "[", 
     RowBox[{"decisionT", ",", "train", ",", "\"\<SHAPPlots\>\""}], "]"}], "//",
     "Quiet"}]}]}]], "Input",
 CellChangeTimes->{{3.872773148251872*^9, 3.872773166779434*^9}, {
   3.872773382413253*^9, 3.872773386539563*^9}, {3.8727738686633377`*^9, 
   3.87277386955688*^9}, {3.8729608876255407`*^9, 3.872960912622465*^9}, {
   3.8733801677604704`*^9, 3.873380169062379*^9}, 3.880193905082678*^9, {
   3.8801940737400856`*^9, 3.8801940752292604`*^9}},
 CellLabel->"In[96]:=",ExpressionUUID->"635c5a92-2f4f-4c80-bce7-369505464328"],

Cell["\<\
The plot above can be interpreted by looking at the distance from the Feature \
Impact = 0 line and the displayed color of each point. The distance from the \
0 line reflects how much of an impact the feature had on the model for that \
particular data point. The displayed color shows whether the feature value \
was low/more negative (blue) or high/more positive (yellow) for that point. \
Features with points more distant from the 0 line were more important for the \
model. When points of the same color cluster on one side of the 0 line, it \
indicates that the feature value tended to shift the model prediction in a \
more consistent direction.

It can be simpler to omit the effect direction and just calculate the \
absolute value of the SHAP value for each feature. We can write a convenience \
function to extract the SHAP values for each feature, take the absolute \
values, and calculate the average.\
\>", "Text",
 CellChangeTimes->{{3.873380204903262*^9, 3.8733802320779066`*^9}, {
  3.873814240383162*^9, 3.8738144666122866`*^9}, {3.8738144967418737`*^9, 
  3.8738145142533865`*^9}, {3.8738147062784786`*^9, 
  3.873814735358677*^9}},ExpressionUUID->"9b3f1d6b-9d24-4982-8c98-\
18d873ad7438"],

Cell[BoxData[
 RowBox[{
  RowBox[{"shapSummary", "[", 
   RowBox[{"model_PredictorFunction", ",", "data_"}], "]"}], ":=", 
  RowBox[{"With", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"shapVals", "=", " ", 
      RowBox[{"Dataset", "@", 
       RowBox[{"PredictorMeasurements", "[", 
        RowBox[{"model", ",", "data", ",", "\"\<SHAPValues\>\""}], "]"}]}]}], 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"shapVals", "[", "Mean", "]"}], "[", "Abs", "]"}], "//", 
      "Normal"}], "//", "Sort"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.872773512468028*^9, 3.872773650299799*^9}},
 CellLabel->"In[97]:=",ExpressionUUID->"282601d6-1e11-4693-8181-d53b2fbc17d9"],

Cell["\<\
Now let\[CloseCurlyQuote]s calculate the mean absolute SHAP values for the \
Decision Tree regression and display them in a bar plot:\
\>", "Text",
 CellChangeTimes->{{3.8733802370779767`*^9, 3.873380247606368*^9}, {
  3.873814470310211*^9, 3.873814481070794*^9}, {3.873814520979724*^9, 
  3.873814525195868*^9}},ExpressionUUID->"896349cc-e1a6-4fce-bca5-\
1ca6f8e7094b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "calculate", " ", "mean", " ", "absolute", " ", "SHAP", " ", "values"}], 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{"SHAPresultDecisionT", "=", 
   RowBox[{"shapSummary", "[", 
    RowBox[{"decisionT", ",", "train"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.872773646412388*^9, 3.872773661443429*^9}, {
  3.872773776709008*^9, 3.872773778908493*^9}, {3.873380180345572*^9, 
  3.8733801814130845`*^9}, {3.8738145369658628`*^9, 3.8738145564213357`*^9}, {
  3.8801940528511796`*^9, 3.880194067513174*^9}},
 CellLabel->"In[98]:=",ExpressionUUID->"05c9cec2-16ff-42a9-a4d9-9b7fd2283a21"],

Cell[BoxData[
 RowBox[{"BarChart", "[", 
  RowBox[{"SHAPresultDecisionT", ",", "\[IndentingNewLine]", 
   RowBox[{"ChartLabels", "\[Rule]", "Automatic"}], ",", 
   RowBox[{"BarOrigin", "->", "Left"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Frame", "->", "True"}], ",", 
   RowBox[{
   "FrameLabel", "->", 
    "\"\<mean(|Shap value|) (average impact on model output \
magnitude)\>\""}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8727737544600267`*^9, 3.872773810996188*^9}, {
  3.880194056244484*^9, 3.8801940570297823`*^9}, {3.880194087584125*^9, 
  3.8801940889594584`*^9}},
 CellLabel->"In[99]:=",ExpressionUUID->"de0e449b-89b7-426b-9324-d1d9a1a58268"]
}, Open  ]],

Cell[CellGroupData[{

Cell["SHAP Analysis for Random Forest Regression", "Subsection",
 CellChangeTimes->{{3.8733802911819515`*^9, 3.8733802970826416`*^9}, {
  3.8801940948606176`*^9, 
  3.880194096637848*^9}},ExpressionUUID->"4cf9ade7-daec-411a-864c-\
c20e6a9a5386"],

Cell["\<\
Now follow the same approach to interpret our Random Forest model using the \
SHAP approach. Add a code block below to perform SHAP analysis and plot the \
results.\
\>", "Text",
 CellChangeTimes->{{3.873380510691733*^9, 3.8733805143320117`*^9}, {
  3.873380546367629*^9, 
  3.8733805483137536`*^9}},ExpressionUUID->"e8869b6d-bf56-4a4f-8813-\
7a7b430cd254"],

Cell[TextData[StyleBox["ADD A CODE BLOCK HERE TO PERFORM SHAP ANALYSIS FOR \
THE RANDOM FOREST MODEL AND GENERATE PLOTS OF FEATURE IMPORTANCE",
 FontWeight->"Bold"]], "Text",
 CellChangeTimes->{{3.8733805390107565`*^9, 
  3.8733805432374287`*^9}},ExpressionUUID->"0f59491f-be9c-470d-ab69-\
9e969cc9f904"],

Cell["\<\
Are these tree models relying on the same features as the linear regression \
models above?\
\>", "Text",
 CellChangeTimes->{{3.873380562761944*^9, 
  3.873380564868203*^9}},ExpressionUUID->"a444e8bc-580d-4d3a-8dfb-\
2e47c882a26d"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Conclusion", "Title",
 CellChangeTimes->{{3.873380581312546*^9, 
  3.873380582654478*^9}},ExpressionUUID->"5cfc28c8-2ab8-4680-82b7-\
4e0edec359f7"],

Cell["\<\
This exercise is just one example of how machine learning regression analysis \
can be applied to chemistry. As you continue in your chemistry studies or \
research, look for other opportunities to make predictions or generate \
hypotheses using these types of models!\
\>", "Text",
 CellChangeTimes->{
  3.8733805937088337`*^9},ExpressionUUID->"ef7c50dd-8223-4d27-88de-\
9bbd577342c6"]
}, Open  ]]
},
WindowSize->{1280.25, 651},
WindowMargins->{{Automatic, 23.25}, {3, Automatic}},
TaggingRules-><|"TryRealOnly" -> False|>,
SpellingDictionaries->{"CorrectWords"->{
 "Fordham", "Lipinski's", "Schrier", "Norquist", "cyanine"}},
FrontEndVersion->"13.3 for Microsoft Windows (64-bit) (June 3, 2023)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"e5da989f-1c5a-4a18-ac9d-6eb3c21d8a4f"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "assocHref"->{
  Cell[24795, 626, 934, 18, 58, "Text",ExpressionUUID->"53b37954-8871-4f58-a3a5-587149ae0751",
   CellTags->"assocHref"]},
 "splithref"->{
  Cell[74148, 1833, 238, 3, 54, "Subsection",ExpressionUUID->"5e105410-b066-4c5f-b81b-c04a8a06d8b6",
   CellTags->"splithref"]},
 "modeEvalHref"->{
  Cell[114024, 2787, 222, 3, 64, "Subsection",ExpressionUUID->"c3fa0085-d290-411b-8963-da6560275fc2",
   CellTags->"modeEvalHref"]},
 "featureSelectionHref"->{
  Cell[136586, 3321, 198, 4, 67, "Section",ExpressionUUID->"556598a1-e3f8-48ac-aef2-49f23c8627b9",
   CellTags->"featureSelectionHref"]},
 "penalizedRegressionHref"->{
  Cell[149535, 3651, 271, 5, 67, "Section",ExpressionUUID->"3ae17e3c-b934-45dc-a795-bc484c1baaf3",
   CellTags->"penalizedRegressionHref"]},
 "featureImportanceHref"->{
  Cell[167110, 4075, 197, 4, 67, "Section",ExpressionUUID->"171a1058-a0a8-4970-93b1-dde6c6d99fb1",
   CellTags->"featureImportanceHref"]},
 "treeModelsHref"->{
  Cell[181038, 4395, 185, 3, 67, "Section",ExpressionUUID->"6a5faae0-f57e-4b21-a9f9-d04ff224d6ce",
   CellTags->"treeModelsHref"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"assocHref", 198688, 4825},
 {"splithref", 198827, 4828},
 {"modeEvalHref", 198975, 4831},
 {"featureSelectionHref", 199135, 4834},
 {"penalizedRegressionHref", 199303, 4837},
 {"featureImportanceHref", 199472, 4840},
 {"treeModelsHref", 199632, 4843}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 270, 4, 35, "Text",ExpressionUUID->"5d8e92d3-f953-4c86-9914-ca5c2ed924a0"],
Cell[CellGroupData[{
Cell[853, 28, 215, 3, 98, "Title",ExpressionUUID->"e78cea1c-9510-4ff1-b7da-1e06c990e6c5"],
Cell[1071, 33, 179, 3, 98, "Title",ExpressionUUID->"e4bc22fc-ce52-463f-b9ef-47c19cad53f4"],
Cell[CellGroupData[{
Cell[1275, 40, 173, 4, 67, "Section",ExpressionUUID->"82a53d30-79e3-41e7-90ff-5b5600ac9493"],
Cell[1451, 46, 377, 8, 32, "Item",ExpressionUUID->"5845d42f-156c-4dc9-98eb-7668f1b86f39"],
Cell[1831, 56, 381, 7, 32, "Item",ExpressionUUID->"7f6147b8-9a0d-446f-b45e-50bfb8ca387b"],
Cell[2215, 65, 407, 8, 32, "Item",ExpressionUUID->"163625f1-74fb-45fa-948c-8f0bb7d0b1d5"],
Cell[2625, 75, 499, 9, 32, "Item",ExpressionUUID->"2f697c54-758b-4d1a-baf4-5be606cb27f4"],
Cell[3127, 86, 383, 8, 32, "Item",ExpressionUUID->"d1baa35a-be51-4558-b477-5805d3503148"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3547, 99, 185, 3, 67, "Section",ExpressionUUID->"426ecedc-3f25-4457-b7bf-48bdc37e1e02"],
Cell[3735, 104, 887, 17, 53, "Item",ExpressionUUID->"a0d22247-f172-4b29-80a3-6a06412b3a3f"],
Cell[4625, 123, 822, 19, 53, "Item",ExpressionUUID->"ca4f4368-3d17-4bfe-8245-80bd9741ca73"],
Cell[5450, 144, 373, 8, 35, "Text",ExpressionUUID->"cbe30ff3-81ac-4389-a928-6550567b9974"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5860, 157, 167, 3, 67, "Section",ExpressionUUID->"a7615bac-c2cf-489b-aa3c-865be226f48e"],
Cell[CellGroupData[{
Cell[6052, 164, 159, 3, 54, "Subsection",ExpressionUUID->"7eae000f-7f0f-4b8a-80f5-e46b9a61e7ba"],
Cell[6214, 169, 564, 10, 58, "Text",ExpressionUUID->"4b1ac693-939e-4969-9400-2cafa31ce268"],
Cell[6781, 181, 493, 7, 28, "Input",ExpressionUUID->"a69a7eb4-0588-42ff-9e6d-f459edf5ef6e"],
Cell[7277, 190, 188, 3, 35, "Text",ExpressionUUID->"5419f0fb-f9ee-489d-b812-cc09e315c320"],
Cell[7468, 195, 483, 7, 48, "Input",ExpressionUUID->"56488ee7-ec40-4a2a-9773-9df13e487dd6"],
Cell[7954, 204, 232, 4, 35, "Text",ExpressionUUID->"67cdca8b-f77b-4eb7-aae0-5e6357c270f0"],
Cell[8189, 210, 336, 8, 28, "Input",ExpressionUUID->"6bc22c94-d3df-4b19-8dee-dae36d5074a6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[8562, 223, 157, 3, 54, "Subsection",ExpressionUUID->"2bba8de4-c060-445a-bfbb-4dc0c973df8c"],
Cell[8722, 228, 872, 19, 104, "Text",ExpressionUUID->"848c2029-db7e-450f-bea1-0afc2f9784ac"],
Cell[9597, 249, 1371, 28, 105, "Input",ExpressionUUID->"8ce4830f-282b-4bd0-a088-3375a6080990"],
Cell[10971, 279, 238, 6, 35, "Text",ExpressionUUID->"2ee95303-b3d6-461d-ba62-c69016a7b165"],
Cell[11212, 287, 457, 7, 28, "Input",ExpressionUUID->"8ac5098f-3d1b-4165-a804-1ab828bf636e"],
Cell[11672, 296, 174, 3, 35, "Text",ExpressionUUID->"96fab1d4-f8d4-4731-895d-5c2a296859bc"],
Cell[11849, 301, 229, 4, 28, "Input",ExpressionUUID->"e2925dda-2f6f-4a69-8a09-83b13cba73fa"],
Cell[12081, 307, 346, 5, 35, "Text",ExpressionUUID->"ace56d17-9d17-4adb-a4a5-a4b7d49b14bb"],
Cell[12430, 314, 283, 5, 28, "Input",ExpressionUUID->"f7895eac-a2f5-430c-acd5-4c435b4f3ca9"],
Cell[12716, 321, 354, 7, 35, "Text",ExpressionUUID->"48eb0b2c-5b90-4fdf-9efc-41c0b5e94ba1"],
Cell[13073, 330, 359, 8, 28, "Input",ExpressionUUID->"b736d4f1-1914-4074-ba32-670ae3513301"],
Cell[13435, 340, 345, 7, 35, "Text",ExpressionUUID->"eab0bbe8-71ca-4af1-ba6f-599a5fdfc63c"],
Cell[13783, 349, 328, 7, 28, "Input",ExpressionUUID->"a7ac1285-4c7b-468e-acc6-b250fd2b7b68"]
}, Open  ]],
Cell[CellGroupData[{
Cell[14148, 361, 163, 3, 54, "Subsection",ExpressionUUID->"7dafd19e-ceb7-47c3-8e1e-c67bae0a806e"],
Cell[14314, 366, 380, 10, 35, "Text",ExpressionUUID->"65337ce9-5b2a-45e9-9d02-f5a57ed78cc2"],
Cell[CellGroupData[{
Cell[14719, 380, 685, 13, 32, "ItemNumbered",ExpressionUUID->"06c255ac-c48f-4fa6-a388-0de08730de9f"],
Cell[15407, 395, 1328, 32, 124, "Input",ExpressionUUID->"fe5775a6-677f-422f-80cb-181f3b2d3bc9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[16772, 432, 986, 21, 53, "ItemNumbered",ExpressionUUID->"6cd00602-91c4-4c46-a367-a5d4a8067005"],
Cell[17761, 455, 1034, 25, 48, "Input",ExpressionUUID->"d0d468f9-12dc-4fdf-bae2-59dbe4ad3caa"]
}, Open  ]],
Cell[CellGroupData[{
Cell[18832, 485, 797, 16, 32, "ItemNumbered",ExpressionUUID->"85601fc7-a619-466c-a066-8ed09f2195a2"],
Cell[19632, 503, 1555, 30, 67, "Input",ExpressionUUID->"ad7bdd12-8b89-4dc5-b450-fbec4be0d88b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[21224, 538, 1325, 24, 53, "ItemNumbered",ExpressionUUID->"90dc95ac-02da-49aa-ae9a-fce992270823"],
Cell[22552, 564, 1500, 37, 67, "Input",ExpressionUUID->"27288820-d70f-4f68-a173-9c53ec6c2c10"]
}, Open  ]],
Cell[24067, 604, 330, 9, 35, "Text",ExpressionUUID->"b6cf5b94-c872-4ee2-922e-c7c547af0364"],
Cell[24400, 615, 392, 9, 28, "Input",ExpressionUUID->"dd6bdd6a-9361-4aab-9509-4c97a871a26a"],
Cell[24795, 626, 934, 18, 58, "Text",ExpressionUUID->"53b37954-8871-4f58-a3a5-587149ae0751",
 CellTags->"assocHref"],
Cell[25732, 646, 589, 14, 28, "Input",ExpressionUUID->"82409608-e3dd-4f5c-8a6f-6667e1066f57"],
Cell[26324, 662, 224, 5, 35, "Text",ExpressionUUID->"1edf6e51-b931-4ec8-b7a0-590dcd679882"],
Cell[26551, 669, 272, 4, 28, "Input",ExpressionUUID->"8f39ef8b-83de-4ae4-b015-f666e71ef2e0"],
Cell[26826, 675, 305, 7, 35, "Text",ExpressionUUID->"44a806eb-202e-4e45-9b46-52de376f5edd"],
Cell[27134, 684, 280, 4, 48, "Input",ExpressionUUID->"7e32a5f0-6d9b-43a1-ae49-1bf77c8decf1"],
Cell[27417, 690, 430, 8, 35, "Text",ExpressionUUID->"d3e1d44f-8df7-4c1d-bb8e-a3b66d5a1759"],
Cell[27850, 700, 1012, 23, 105, "Input",ExpressionUUID->"ae7921ae-1be8-4fba-9a7c-3612442db967"],
Cell[28865, 725, 335, 8, 35, "Text",ExpressionUUID->"589ca580-a120-4938-9aee-c8f9c749a530"],
Cell[29203, 735, 306, 5, 67, "Input",ExpressionUUID->"8e5b797e-cdba-403b-93f2-0afecb0dee7d"],
Cell[29512, 742, 998, 24, 58, "Text",ExpressionUUID->"3b2362d4-671c-4c8d-a243-dbcc4ce087fb"],
Cell[30513, 768, 940, 19, 67, "Input",ExpressionUUID->"6038a2e0-0fdc-4bfa-8e0a-fbbf555b7704"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[31502, 793, 324, 5, 67, "Section",ExpressionUUID->"b3fd0f3c-1e3b-4be1-beb4-d9d9ffb6a74e"],
Cell[31829, 800, 863, 19, 58, "Text",ExpressionUUID->"7072bdf1-536a-4fae-a541-c466db339ce4"],
Cell[32695, 821, 1747, 29, 86, "Input",ExpressionUUID->"2b6b6293-1ee3-4ad3-93bb-74804bbda6f9"],
Cell[34445, 852, 866, 21, 81, "Text",ExpressionUUID->"a926d07b-5745-4550-84c5-0e4d0157879f"],
Cell[35314, 875, 543, 10, 28, "Input",ExpressionUUID->"c7eceeb2-6a89-46ba-86ff-e4809b7035cb"],
Cell[35860, 887, 323, 7, 35, "Text",ExpressionUUID->"e8527a4f-df4a-4300-827c-94fd8ba1ff38"],
Cell[36186, 896, 188, 3, 32, "Item",ExpressionUUID->"2216b9fa-170c-4b1e-b0b4-1d969c54badd"],
Cell[36377, 901, 402, 8, 32, "Item",ExpressionUUID->"e5aad24a-7b27-4507-8a2c-03ea1dad2ccf"],
Cell[36782, 911, 356, 7, 32, "Item",ExpressionUUID->"2ea6cd70-999f-4306-be1c-545a92547dba"],
Cell[37141, 920, 548, 10, 53, "Item",ExpressionUUID->"8c07e5ca-2d75-4387-a6a0-5a5e574933e6"],
Cell[37692, 932, 562, 10, 53, "Item",ExpressionUUID->"fd192e07-8dcc-4365-b9cf-eca1aff3c394"],
Cell[38257, 944, 396, 10, 58, "Text",ExpressionUUID->"ad58c7bc-5596-41e1-994d-7f43caee7f39"],
Cell[38656, 956, 203, 3, 32, "Item",ExpressionUUID->"1d104842-c982-4ea2-8ac4-3e98f18e9ad0"],
Cell[38862, 961, 215, 5, 32, "Item",ExpressionUUID->"78bed1c2-9aef-46eb-b8fd-f6384f4c4bfb"],
Cell[39080, 968, 221, 5, 32, "Item",ExpressionUUID->"42d91439-c943-481f-b4e9-9cd1c6691af7"],
Cell[39304, 975, 235, 6, 32, "Item",ExpressionUUID->"e927f10b-7ed2-41b1-b981-d5d12740d6ac"],
Cell[39542, 983, 310, 8, 32, "Item",ExpressionUUID->"464842d3-6351-4e1f-af39-4130b98c2e35"],
Cell[39855, 993, 319, 8, 32, "Item",ExpressionUUID->"99e074fe-2a23-47f3-a6c7-fadcfa34aaa2"],
Cell[40177, 1003, 316, 8, 32, "Item",ExpressionUUID->"2590f5f2-2117-445c-a8f0-793ae96b22fa"],
Cell[40496, 1013, 179, 3, 32, "Item",ExpressionUUID->"b558e433-68ff-4169-8ab3-dba37d5a64fd"],
Cell[40678, 1018, 226, 5, 32, "Item",ExpressionUUID->"09b72a7d-b6bc-4020-baef-2a4f6df81a01"],
Cell[40907, 1025, 283, 6, 32, "Item",ExpressionUUID->"0233a284-d162-4631-bc28-94aabb4bc425"],
Cell[41193, 1033, 250, 5, 32, "Item",ExpressionUUID->"70c25c2a-ee80-41f7-a11f-f94b4c56f5c0"],
Cell[41446, 1040, 269, 6, 32, "Item",ExpressionUUID->"c6ad8d4b-bb8a-4586-ae90-1d8af94e300b"],
Cell[41718, 1048, 322, 6, 32, "Item",ExpressionUUID->"01ee17b9-0c9a-4637-af00-062b6f642e69"],
Cell[42043, 1056, 845, 16, 81, "Text",ExpressionUUID->"534a778f-ba2a-4535-a749-e62c29e03d49"],
Cell[42891, 1074, 234, 4, 32, "Item",ExpressionUUID->"cee1334a-7793-454f-94f5-3f2f2c00a2d3"],
Cell[43128, 1080, 970, 20, 58, "Text",ExpressionUUID->"62fce50f-3d01-49ca-97fc-ce0c1946f204"],
Cell[44101, 1102, 604, 11, 67, "Input",ExpressionUUID->"24aa2a75-7347-4cfa-b8e7-1013b36ab1df"],
Cell[44708, 1115, 900, 17, 104, "Text",ExpressionUUID->"4835dcec-f2b5-49b6-9205-b4439c9300fd"],
Cell[45611, 1134, 401, 8, 67, "Input",ExpressionUUID->"aa1df625-a298-4d0d-9095-8c5996b02c4c"],
Cell[46015, 1144, 1520, 23, 150, "Text",ExpressionUUID->"510df9a1-eca4-463d-ad1c-b7d428dafdcf"],
Cell[47538, 1169, 575, 12, 28, "Input",ExpressionUUID->"43e8e350-0696-407e-9631-8505f1717a8b"],
Cell[48116, 1183, 402, 10, 35, "Text",ExpressionUUID->"730ab11e-9ddc-403e-b11b-d2bf41c72ceb"],
Cell[48521, 1195, 350, 6, 28, "Input",ExpressionUUID->"b47b2894-cfe1-4bd2-90c3-d139ebca0f61"],
Cell[48874, 1203, 1222, 27, 58, "Text",ExpressionUUID->"ab07599e-d074-406b-8295-ae0fbeb4164f"],
Cell[50099, 1232, 505, 10, 67, "Input",ExpressionUUID->"226308c3-4cd0-4a0a-b5f5-3ff0937f6b6a"],
Cell[CellGroupData[{
Cell[50629, 1246, 189, 3, 54, "Subsection",ExpressionUUID->"a4dbb9f8-d8e5-450b-b14e-c4fd2d4b678f"],
Cell[50821, 1251, 732, 15, 35, "Text",ExpressionUUID->"f369088d-439c-4768-ae4b-9f5b4531d086"],
Cell[51556, 1268, 322, 7, 28, "Input",ExpressionUUID->"e3e2283b-0261-4e6c-a2fe-16690d8e555a"],
Cell[51881, 1277, 398, 8, 58, "Text",ExpressionUUID->"142181a7-de72-4e99-840b-57b9549fa1ec"],
Cell[52282, 1287, 200, 3, 28, "Input",ExpressionUUID->"0f837ee5-347c-45fb-b0cc-3bc46d420f27"],
Cell[52485, 1292, 340, 8, 35, "Text",ExpressionUUID->"a395e22c-f560-4c99-aff7-cf5419f86f74"],
Cell[CellGroupData[{
Cell[52850, 1304, 420, 9, 32, "Item",ExpressionUUID->"f8467064-a3f3-4608-a3df-125f415b3365"],
Cell[53273, 1315, 355, 7, 26, "Subitem",ExpressionUUID->"a5286a8d-ea02-4ad8-8184-c230f740af52"]
}, Open  ]],
Cell[53643, 1325, 349, 9, 32, "Item",ExpressionUUID->"165057d2-4e9e-462e-89b7-a5ba63475291"],
Cell[53995, 1336, 384, 7, 32, "Item",ExpressionUUID->"ee900886-576d-4edd-b7ee-78b1c6ef6840"],
Cell[54382, 1345, 425, 10, 32, "Item",ExpressionUUID->"8e131fae-fed0-481a-aebf-32c6a93f2202"],
Cell[54810, 1357, 355, 7, 32, "Item",ExpressionUUID->"1522bf95-2871-44ec-b209-202cb2f7f349"],
Cell[55168, 1366, 130, 3, 35, "Text",ExpressionUUID->"470e91b1-d5fd-4537-9947-164a66e83f21"],
Cell[55301, 1371, 352, 8, 32, "Item",ExpressionUUID->"d30a26d8-cd1b-4b9e-b971-cedecd08d70c"],
Cell[55656, 1381, 378, 9, 32, "Item",ExpressionUUID->"418ef362-2638-4c6d-98f8-e2029ad32777"],
Cell[56037, 1392, 363, 8, 32, "Item",ExpressionUUID->"d5ed92a1-fe4e-4297-b99c-3ce969f2f3d2"],
Cell[56403, 1402, 221, 5, 35, "Text",ExpressionUUID->"c506b615-8af8-47ce-a8ac-55955b3e9adb"],
Cell[56627, 1409, 598, 14, 28, "Input",ExpressionUUID->"f691a4d8-286f-4272-ad6b-8a4ec042e59e"],
Cell[57228, 1425, 620, 14, 28, "Input",ExpressionUUID->"9e4ce3d9-c9fe-4b8d-b272-7a7277c12007"],
Cell[57851, 1441, 592, 15, 28, "Input",ExpressionUUID->"96e79342-33e3-455b-8fb1-16ca0bbac6e9"],
Cell[58446, 1458, 672, 15, 48, "Input",ExpressionUUID->"e8763933-77d2-4e0c-8d42-6cc902ff954e"],
Cell[59121, 1475, 263, 6, 35, "Text",ExpressionUUID->"67f18ed1-2f06-4e52-8a39-526d415d1a2e"],
Cell[59387, 1483, 341, 8, 28, "Input",ExpressionUUID->"4f9e27c8-5a28-4985-8cc7-316fd0ee0b81"],
Cell[59731, 1493, 245, 6, 35, "Text",ExpressionUUID->"d6713763-bd9d-4272-89ce-84165f24090e"],
Cell[59979, 1501, 497, 12, 28, "Input",ExpressionUUID->"e8011728-cbbd-4fd1-bb1e-992b6e31d780"]
}, Open  ]],
Cell[CellGroupData[{
Cell[60513, 1518, 279, 4, 54, "Subsection",ExpressionUUID->"def53aa9-b486-4e59-b4fc-3c7aae82815f"],
Cell[60795, 1524, 1598, 35, 81, "Text",ExpressionUUID->"99ec7554-c192-40bf-abde-8d461e746548"],
Cell[62396, 1561, 305, 5, 28, "Input",ExpressionUUID->"b9d8ee84-b330-427c-9349-bc0f137eb20e"],
Cell[62704, 1568, 527, 13, 35, "Text",ExpressionUUID->"2dd8dcfb-0037-47fc-975a-69051713573b"],
Cell[63234, 1583, 261, 4, 28, "Input",ExpressionUUID->"c81d5410-8cff-48fe-affb-76c43e572785"],
Cell[63498, 1589, 671, 16, 35, "Text",ExpressionUUID->"9f3b5f93-d2a5-4ed2-be45-87b536320f37"],
Cell[64172, 1607, 267, 4, 28, "Input",ExpressionUUID->"fab79c80-4a14-475d-97d5-224e09951b03"],
Cell[64442, 1613, 1146, 21, 104, "Text",ExpressionUUID->"d6682da8-7a65-435a-8dff-eca03e823709"],
Cell[65591, 1636, 1010, 23, 67, "Input",ExpressionUUID->"aa859fab-497d-4e8d-9bdf-b0fe5001af6f"],
Cell[66604, 1661, 518, 10, 58, "Text",ExpressionUUID->"510628dd-f643-4749-9e06-b2099c99c700"],
Cell[67125, 1673, 689, 14, 48, "Input",ExpressionUUID->"01bc5a84-a261-4cf8-b903-3b901b058126"],
Cell[67817, 1689, 602, 16, 48, "Input",ExpressionUUID->"8deeff9e-3920-44fa-b132-f1f53986c12a"],
Cell[68422, 1707, 598, 11, 58, "Text",ExpressionUUID->"2f56c57c-c217-4f6b-a739-9b37b03c16cd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[69057, 1723, 381, 5, 54, "Subsection",ExpressionUUID->"69fd5042-9ba6-41ee-a806-699169ceb939"],
Cell[69441, 1730, 629, 11, 58, "Text",ExpressionUUID->"22e2c23d-2937-44b1-83d2-ab25b8c03c45"],
Cell[70073, 1743, 361, 6, 32, "Item",ExpressionUUID->"7c8df0f1-df71-4f7f-80b5-d184da2b5181"],
Cell[70437, 1751, 369, 5, 32, "Item",ExpressionUUID->"b0fdf1d9-4ad0-4f62-afdb-4b62c5eef0a5"],
Cell[70809, 1758, 949, 20, 58, "Text",ExpressionUUID->"213f01a9-5ac6-4d86-a36e-f554a5b537e1"],
Cell[71761, 1780, 1332, 26, 86, "Input",ExpressionUUID->"0da29227-5ff1-4f11-a4eb-a8cf62090d58"],
Cell[73096, 1808, 312, 7, 35, "Text",ExpressionUUID->"0e6d87f7-d65e-4a5c-98d8-4d66c1812ef2"],
Cell[73411, 1817, 700, 11, 28, "Input",ExpressionUUID->"f78608e5-6411-4fca-ac2e-dfa8f89e4578"]
}, Open  ]],
Cell[CellGroupData[{
Cell[74148, 1833, 238, 3, 54, "Subsection",ExpressionUUID->"5e105410-b066-4c5f-b81b-c04a8a06d8b6",
 CellTags->"splithref"],
Cell[74389, 1838, 1382, 20, 104, "Text",ExpressionUUID->"8d1dcba8-5145-45b4-9094-daafe36098f8"],
Cell[75774, 1860, 778, 16, 48, "Input",ExpressionUUID->"30657f04-13e4-4e73-aac3-289a8efcbdff"]
}, Open  ]],
Cell[CellGroupData[{
Cell[76589, 1881, 159, 3, 54, "Subsection",ExpressionUUID->"c016aab2-4218-40fd-904b-ff2d8691f804"],
Cell[76751, 1886, 793, 13, 58, "Text",ExpressionUUID->"28e5c5af-bf9a-4df2-9a85-fcafbb75af96"],
Cell[77547, 1901, 187, 3, 32, "Item",ExpressionUUID->"53e4cb0e-b7d3-405b-ac99-8ded7c52b29f"],
Cell[77737, 1906, 252, 6, 35, "Text",ExpressionUUID->"6c2e66e3-6796-4e90-b258-ee615b625342"],
Cell[77992, 1914, 365, 9, 32, "Item",ExpressionUUID->"760b96bd-16d6-4c5f-b77c-c6937cb27d04"],
Cell[78360, 1925, 224, 5, 32, "Item",ExpressionUUID->"0667ec56-45bf-450d-a2fd-17b9efc204ef"],
Cell[78587, 1932, 673, 16, 58, "Text",ExpressionUUID->"d7f43391-ed43-4a3b-8191-83fac739149d"],
Cell[79263, 1950, 1901, 49, 178, "Input",ExpressionUUID->"f5d6a6f2-d5ff-4355-954d-cbd5d9e20b0c",
 InitializationCell->True],
Cell[81167, 2001, 216, 5, 35, "Text",ExpressionUUID->"2524932a-7ce3-4057-a040-44a728d63127"],
Cell[81386, 2008, 368, 6, 28, "Input",ExpressionUUID->"1f90197b-a8bd-4ed2-83d4-c753d4c5a2dc"],
Cell[81757, 2016, 1037, 25, 58, "Text",ExpressionUUID->"e30785e0-b54e-49af-b923-2a495af03335"],
Cell[82797, 2043, 536, 14, 48, "Input",ExpressionUUID->"9f8c50b1-41f1-4752-a926-889cb86dbe4d"],
Cell[83336, 2059, 457, 11, 28, "Input",ExpressionUUID->"273090b1-a844-447a-8be9-c3062e6c8feb"],
Cell[83796, 2072, 356, 7, 35, "Text",ExpressionUUID->"f5c97b6d-3113-4e72-89a5-d4e73b705fad"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[84201, 2085, 171, 3, 67, "Section",ExpressionUUID->"1a98574f-933a-4714-8e01-a56708a1fe66"],
Cell[84375, 2090, 1832, 42, 104, "Text",ExpressionUUID->"712ec36e-fc92-4fb0-8e25-a3c6bad15568"],
Cell[CellGroupData[{
Cell[86232, 2136, 150, 3, 54, "Subsection",ExpressionUUID->"b983b0b1-aca7-48cb-beba-cb3ac6654b10"],
Cell[86385, 2141, 519, 10, 58, "Text",ExpressionUUID->"a48ec159-1aa1-4aa2-991b-e2461b338972"],
Cell[86907, 2153, 198, 3, 32, "Item",ExpressionUUID->"ef22add8-94f4-4643-ae26-0125f0a09c4f"],
Cell[87108, 2158, 232, 6, 32, "Item",ExpressionUUID->"ce52fdcd-e0b9-45cb-958f-13470a8c9b37"],
Cell[87343, 2166, 252, 6, 35, "Text",ExpressionUUID->"4b665aed-0810-4c07-9cb0-34771acc9800"],
Cell[87598, 2174, 587, 13, 33, "Text",ExpressionUUID->"e961629e-b917-4561-a3ca-5566660b9fca"],
Cell[88188, 2189, 203, 4, 35, "Text",ExpressionUUID->"290086bd-98ea-4830-950c-b1920f944301"],
Cell[88394, 2195, 705, 17, 104, "Text",ExpressionUUID->"370a9d34-c8f7-47e8-b091-5eac0a42cdca"],
Cell[89102, 2214, 1051, 27, 60, "Text",ExpressionUUID->"2d16106c-2ae5-4181-81e1-50c844556b8e"],
Cell[90156, 2243, 1048, 23, 58, "Text",ExpressionUUID->"4be60eb4-9b7f-4e61-8668-216a564cfab1"],
Cell[91207, 2268, 219, 3, 32, "Item",ExpressionUUID->"e3558a00-d462-4cf4-97a0-7b7f0a0abf45"],
Cell[91429, 2273, 213, 2, 32, "Item",ExpressionUUID->"5fb79673-958d-474f-a169-0d8a69d0e44f"],
Cell[91645, 2277, 887, 16, 104, "Text",ExpressionUUID->"a0d6aa08-b235-4f36-9a5e-e4d8085d25b1"],
Cell[92535, 2295, 1787, 44, 197, "Input",ExpressionUUID->"4358bf76-31ec-4525-a0f6-1a2bedd670ce",
 InitializationCell->True],
Cell[94325, 2341, 881, 19, 58, "Text",ExpressionUUID->"375d9bcc-fa37-4499-ab96-a9152054ff1a"],
Cell[95209, 2362, 1533, 34, 105, "Input",ExpressionUUID->"684719a9-71f3-4808-b585-8913d1c65389"],
Cell[96745, 2398, 948, 17, 81, "Text",ExpressionUUID->"3596caae-21de-449f-8eb5-fcea71f23e94"],
Cell[97696, 2417, 2384, 50, 181, "Input",ExpressionUUID->"d35daaad-a3ee-4a8a-8927-6ee0c03585df"],
Cell[100083, 2469, 1137, 22, 58, "Text",ExpressionUUID->"53a4b30e-cf69-48fe-b33e-75e55d646b0b"],
Cell[101223, 2493, 607, 11, 28, "Input",ExpressionUUID->"78558bb8-c70b-434e-ad5a-2cc5880eca56"],
Cell[101833, 2506, 945, 17, 127, "Text",ExpressionUUID->"40494868-0701-4efe-b0dc-1d47d7fb6db2"],
Cell[102781, 2525, 2076, 44, 162, "Input",ExpressionUUID->"938e493b-03c3-4e4e-b00f-fc92255c3b12"],
Cell[104860, 2571, 1056, 20, 150, "Text",ExpressionUUID->"96c65c73-58d1-47fc-9a23-d1d1835e4746"],
Cell[105919, 2593, 909, 17, 124, "Input",ExpressionUUID->"f63d6a64-740f-4a33-8949-07d407f9e534"],
Cell[106831, 2612, 1098, 18, 127, "Text",ExpressionUUID->"eb6e26e9-6c67-479d-b306-80d48cba988a"],
Cell[107932, 2632, 247, 5, 35, "Text",ExpressionUUID->"61602891-1751-4552-b5af-0c633f6cee4e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[108216, 2642, 168, 3, 54, "Subsection",ExpressionUUID->"874fe596-ee56-434e-a4e9-e097b492e93d"],
Cell[108387, 2647, 458, 9, 58, "Text",ExpressionUUID->"ead7751f-2f61-48f4-8ce5-3a565a600708"],
Cell[108848, 2658, 235, 6, 32, "Item",ExpressionUUID->"f57cdc32-a1f7-4950-9679-750baf759a6f"],
Cell[109086, 2666, 226, 5, 35, "Text",ExpressionUUID->"64ae3b0a-633b-4fd8-bbc0-5299872215c5"],
Cell[109315, 2673, 945, 24, 33, "Text",ExpressionUUID->"6021c4d6-f682-42ed-8d23-860bb125720e"],
Cell[110263, 2699, 201, 4, 35, "Text",ExpressionUUID->"c43043e4-1852-4f20-9bda-73c3a5d520d2"],
Cell[110467, 2705, 1390, 31, 173, "Text",ExpressionUUID->"82a14b9f-ceb4-4111-a7cb-c9052798ed68"],
Cell[111860, 2738, 930, 21, 67, "Input",ExpressionUUID->"c83ae3c8-bd0e-47f2-9d22-38ff9c03c03a"],
Cell[112793, 2761, 345, 6, 28, "Input",ExpressionUUID->"5394e4dd-d574-4704-adbb-14b4b0bff701"],
Cell[113141, 2769, 846, 13, 81, "Text",ExpressionUUID->"2a7c865b-d5c4-4eb9-a34f-5745c943f4a1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[114024, 2787, 222, 3, 64, "Subsection",ExpressionUUID->"c3fa0085-d290-411b-8963-da6560275fc2",
 CellTags->"modeEvalHref"],
Cell[114249, 2792, 1994, 36, 104, "Text",ExpressionUUID->"08f602d1-d5ad-4168-a8d5-dcdc93549912"],
Cell[116246, 2830, 696, 12, 53, "ItemNumbered",ExpressionUUID->"85524f0d-149c-4407-ae6a-03491821b104"],
Cell[116945, 2844, 1061, 27, 60, "Text",ExpressionUUID->"4789ebf4-0396-4577-b77a-9d53b30bf7f7"],
Cell[118009, 2873, 666, 11, 74, "ItemNumbered",ExpressionUUID->"d9a4f453-9f92-4e2d-addd-b8a2a6d5b631"],
Cell[118678, 2886, 1126, 30, 60, "Text",ExpressionUUID->"983be94f-64aa-43aa-a100-46800e1e99a9"],
Cell[119807, 2918, 628, 12, 74, "ItemNumbered",ExpressionUUID->"efa9b1bd-734e-4512-9c77-2c3e28308807"],
Cell[120438, 2932, 1251, 32, 66, "Text",ExpressionUUID->"eb7350f5-4ae4-4f6d-abe0-daced19476de"],
Cell[121692, 2966, 1158, 24, 95, "ItemNumbered",ExpressionUUID->"2e9ebfa9-9479-451b-986c-d2f118139f78"],
Cell[122853, 2992, 1675, 43, 60, "Text",ExpressionUUID->"07d3cbb6-f760-46ed-9984-a207533bc4a9"],
Cell[124531, 3037, 1011, 17, 104, "Text",ExpressionUUID->"e706cddb-e98f-44e1-96b6-b055336db3b1"],
Cell[125545, 3056, 294, 5, 28, "Input",ExpressionUUID->"b5f3f1c4-496e-47af-8d8a-130c2a01eff7"],
Cell[125842, 3063, 298, 4, 35, "Text",ExpressionUUID->"8ecee30d-7fe5-4684-a840-a619f295c513"],
Cell[126143, 3069, 294, 5, 28, "Input",ExpressionUUID->"294163f5-dc0a-4caf-b2ac-31bf279771e5"],
Cell[126440, 3076, 248, 4, 35, "Text",ExpressionUUID->"13936d19-f491-470b-b093-fc6b6c870428"],
Cell[126691, 3082, 407, 9, 28, "Input",ExpressionUUID->"a212aa3a-4ae0-4c96-838f-4c5600b8f121"],
Cell[127101, 3093, 404, 7, 35, "Text",ExpressionUUID->"719925a9-876f-4f15-881b-ddc99c38411d"],
Cell[127508, 3102, 1022, 22, 67, "Input",ExpressionUUID->"008dcec5-e00f-43f6-847e-fef2e72c0f85"],
Cell[128533, 3126, 618, 14, 58, "Text",ExpressionUUID->"e9a0cbbb-c9ae-42c3-b8e4-d2732434a0a6"],
Cell[129154, 3142, 712, 14, 28, "Input",ExpressionUUID->"d49cd77e-f387-495e-8af1-b10a4eb76911"],
Cell[129869, 3158, 552, 12, 35, "Text",ExpressionUUID->"3e244f4c-c5a5-4867-953e-f3978885b8b9"],
Cell[130424, 3172, 1741, 36, 105, "Input",ExpressionUUID->"1f2fbe7e-9449-44f4-a8f6-3900b2d08e28"],
Cell[132168, 3210, 586, 13, 35, "Text",ExpressionUUID->"21aedda3-028f-4bbc-9fd8-6419af23fcc1"],
Cell[132757, 3225, 377, 8, 28, "Input",ExpressionUUID->"f13933c6-601d-479c-903c-57a08dc0c1bb"],
Cell[133137, 3235, 964, 16, 127, "Text",ExpressionUUID->"fe70b076-feea-42f2-8ff0-fec105a29044"],
Cell[134104, 3253, 392, 7, 35, "Text",ExpressionUUID->"cb8c5f1c-2e67-498a-9e4c-a24adeafd5cc"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[134545, 3266, 221, 4, 67, "Section",ExpressionUUID->"7392dc4f-b054-48d9-bb72-edad10809c24"],
Cell[134769, 3272, 691, 13, 58, "Text",ExpressionUUID->"59aaa868-281b-4fc8-8037-a581352d88da"],
Cell[135463, 3287, 283, 6, 32, "Item",ExpressionUUID->"16e7d91f-d991-4892-ad14-83ecba0f00c8"],
Cell[135749, 3295, 187, 3, 32, "Item",ExpressionUUID->"e6c0ba78-9c0a-461d-851d-d2a1bfba806c"],
Cell[135939, 3300, 220, 6, 35, "Text",ExpressionUUID->"47140bec-c33b-420c-91a2-66e88c3e4b01"],
Cell[136162, 3308, 196, 3, 32, "ItemNumbered",ExpressionUUID->"0f3bf4f6-f0b5-4980-a8ed-519dc027d8cf"],
Cell[136361, 3313, 188, 3, 32, "ItemNumbered",ExpressionUUID->"99e70f25-4ff6-442c-9ac9-a8f929325935"]
}, Open  ]],
Cell[CellGroupData[{
Cell[136586, 3321, 198, 4, 67, "Section",ExpressionUUID->"556598a1-e3f8-48ac-aef2-49f23c8627b9",
 CellTags->"featureSelectionHref"],
Cell[136787, 3327, 561, 11, 58, "Text",ExpressionUUID->"e2aeb52c-8dad-4e8d-b26a-f090a1ea3b81"],
Cell[137351, 3340, 237, 4, 32, "Item",ExpressionUUID->"172a7d62-1810-4e72-b721-79dd26ccb31c"],
Cell[137591, 3346, 237, 6, 35, "Text",ExpressionUUID->"12bbb5f1-78b0-4858-b2de-92c7e3809be1"],
Cell[CellGroupData[{
Cell[137853, 3356, 167, 3, 54, "Subsection",ExpressionUUID->"87dcf77a-99d7-4bc3-a131-13bf9d601531"],
Cell[138023, 3361, 585, 10, 35, "Text",ExpressionUUID->"80c6bd28-fd80-4c14-87e0-fb102c8fed60"],
Cell[138611, 3373, 250, 4, 32, "Item",ExpressionUUID->"1de67431-788a-4b4d-a533-d0818e0f772c"],
Cell[138864, 3379, 247, 4, 32, "Item",ExpressionUUID->"cd6b0ac1-229e-4a1c-b508-037768c45f25"],
Cell[139114, 3385, 217, 5, 32, "Item",ExpressionUUID->"f791fa14-6f5d-4796-b6bd-99d555e2c6d4"],
Cell[139334, 3392, 218, 5, 32, "Item",ExpressionUUID->"91562561-587b-4e9d-a1f2-f010fc8a119f"],
Cell[139555, 3399, 562, 10, 35, "Text",ExpressionUUID->"3469f1be-45f0-4809-b453-2d17c95aa6aa"],
Cell[140120, 3411, 263, 7, 32, "Item",ExpressionUUID->"1db7e209-3bfa-41d7-bb92-0a8ba8c39918"],
Cell[140386, 3420, 817, 19, 81, "Text",ExpressionUUID->"d0029ca9-4a54-4a04-93b1-01426b435140"],
Cell[141206, 3441, 1027, 26, 86, "Input",ExpressionUUID->"843012bd-0649-43ff-ab4b-13ab8727cd66"],
Cell[142236, 3469, 252, 6, 35, "Text",ExpressionUUID->"88fb4a3e-8025-4136-b615-e24af103e0a4"],
Cell[142491, 3477, 234, 4, 28, "Input",ExpressionUUID->"9e086916-372b-4636-9dc5-8f30cebfe23a"],
Cell[142728, 3483, 243, 4, 35, "Text",ExpressionUUID->"d8c39ed8-41e1-4468-bbf2-558788e5b297"],
Cell[142974, 3489, 236, 4, 28, "Input",ExpressionUUID->"7d4c1ef3-5842-4421-b7d6-eb42c5099a3c"],
Cell[143213, 3495, 389, 8, 35, "Text",ExpressionUUID->"3480e052-4b6d-4670-89b9-639c0c0c6b4a"],
Cell[143605, 3505, 233, 4, 28, "Input",ExpressionUUID->"3c11dbce-2763-41e9-b9a3-5c48bd91a4f0"],
Cell[143841, 3511, 222, 5, 35, "Text",ExpressionUUID->"2139ae1b-e122-4f1e-87e9-b66b3080f37f"],
Cell[144066, 3518, 498, 11, 48, "Input",ExpressionUUID->"f1331749-60d0-4953-aaac-96be148a45e1"],
Cell[144567, 3531, 523, 9, 58, "Text",ExpressionUUID->"8b99ed2f-f074-414b-820f-15de41eaa18d"],
Cell[145093, 3542, 1190, 29, 121, "Input",ExpressionUUID->"95499a59-12a1-4a1f-83ae-4c0ae3d7de45",
 InitializationCell->True],
Cell[146286, 3573, 269, 4, 28, "Input",ExpressionUUID->"8c531bf2-d014-4e46-8b4f-2048ff2f095f"],
Cell[146558, 3579, 534, 12, 35, "Text",ExpressionUUID->"d462593b-e193-4439-9a1a-221dd6f82cc8"],
Cell[147095, 3593, 451, 9, 67, "Input",ExpressionUUID->"67a4f1cf-730b-48a5-a814-3906d8df32d9"],
Cell[147549, 3604, 412, 8, 58, "Text",ExpressionUUID->"1180aa49-256f-4d71-b096-db62abb2ad6d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[147998, 3617, 229, 4, 54, "Subsection",ExpressionUUID->"a570b489-af8f-4efe-99eb-94816fafec58"],
Cell[148230, 3623, 817, 13, 81, "Text",ExpressionUUID->"ddd33171-90d8-4647-a45c-e2853df9921f"],
Cell[149050, 3638, 436, 7, 35, "Text",ExpressionUUID->"1050dfd8-eebf-4b79-93d0-a51283785b0a"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[149535, 3651, 271, 5, 67, "Section",ExpressionUUID->"3ae17e3c-b934-45dc-a795-bc484c1baaf3",
 CellTags->"penalizedRegressionHref"],
Cell[149809, 3658, 950, 15, 58, "Text",ExpressionUUID->"85f57e61-c5df-4dc9-bd35-2d0098f2d256"],
Cell[150762, 3675, 247, 6, 32, "Item",ExpressionUUID->"e5c9416e-b248-4e7e-aa5c-38f2e7be30b1"],
Cell[151012, 3683, 202, 3, 32, "Item",ExpressionUUID->"7c71521c-1cde-4786-9c25-9dc705f13cc3"],
Cell[151217, 3688, 421, 8, 35, "Text",ExpressionUUID->"89456c1e-69b4-40fc-8d1e-e3ab3bf8118b"],
Cell[151641, 3698, 253, 8, 32, "ItemNumbered",ExpressionUUID->"7e8c22ff-7151-4050-99ce-a55979f1a0fb"],
Cell[151897, 3708, 304, 9, 32, "ItemNumbered",ExpressionUUID->"0437c23b-63aa-4583-95b8-e46a4ae0f83c"],
Cell[CellGroupData[{
Cell[152226, 3721, 164, 3, 54, "Subsection",ExpressionUUID->"8da5c946-9317-44bd-b320-fc9dbde82a1e"],
Cell[152393, 3726, 600, 11, 35, "Text",ExpressionUUID->"c7455113-db23-45cb-b00c-02526d881216"],
Cell[152996, 3739, 749, 17, 62, "Text",ExpressionUUID->"9af25c6c-76a8-4fd4-bc7a-7ba3c576c95e"],
Cell[153748, 3758, 449, 8, 58, "Text",ExpressionUUID->"9251f432-e3b8-4d60-9074-b75a7863dd11"],
Cell[154200, 3768, 274, 6, 32, "Item",ExpressionUUID->"07caca55-917f-43a5-8d46-208a84cd212e"],
Cell[154477, 3776, 190, 3, 32, "Item",ExpressionUUID->"8c22a711-f676-49da-be89-e4ebd0ed7059"],
Cell[154670, 3781, 754, 15, 104, "Text",ExpressionUUID->"177d1001-a6f1-4a74-978b-4d09ea8f8cb9"],
Cell[155427, 3798, 230, 4, 28, "Input",ExpressionUUID->"0d59e6eb-ec06-4c27-9ff0-9b9cec1f5e63"],
Cell[155660, 3804, 1089, 22, 86, "Input",ExpressionUUID->"0b9d20a1-238e-4edb-9cfe-c518a2d7ee39"],
Cell[156752, 3828, 829, 15, 104, "Text",ExpressionUUID->"ec54f288-8c24-4eec-894f-22a3a10b1357"],
Cell[157584, 3845, 994, 20, 86, "Input",ExpressionUUID->"6ffeb883-d870-494f-9881-cf0b9e6a7336"],
Cell[158581, 3867, 397, 10, 35, "Text",ExpressionUUID->"bce5dbe4-190a-42de-88e4-8081c6e514b2"],
Cell[158981, 3879, 293, 5, 28, "Input",ExpressionUUID->"3e399ee7-0413-4eb1-a08d-0535ce81dba0"],
Cell[159277, 3886, 727, 14, 81, "Text",ExpressionUUID->"4440334d-f836-43eb-8ea5-8a31a6b5a742"],
Cell[160007, 3902, 201, 3, 32, "ItemNumbered",ExpressionUUID->"157ff4bc-c8f7-49e7-b01e-bc034592e9b0"],
Cell[160211, 3907, 229, 4, 32, "ItemNumbered",ExpressionUUID->"f55e31af-8506-4246-bf07-e24a6f05dd12"],
Cell[160443, 3913, 374, 6, 58, "Text",ExpressionUUID->"a2aafd03-9394-46ad-89ee-bbbc6e211284"],
Cell[160820, 3921, 336, 6, 35, "Text",ExpressionUUID->"3563ad0f-2aa5-40f0-8e4a-62b26cd02755"]
}, Open  ]],
Cell[CellGroupData[{
Cell[161193, 3932, 219, 4, 54, "Subsection",ExpressionUUID->"681aaeba-0c02-4d9d-9c25-bc3d9b4efc5c"],
Cell[161415, 3938, 756, 13, 35, "Text",ExpressionUUID->"ff3abbce-eb39-4fb9-9e0c-2aef7558d922"],
Cell[162174, 3953, 794, 17, 62, "Text",ExpressionUUID->"7869b203-336a-4022-b2eb-40ba25ca48da"],
Cell[162971, 3972, 376, 7, 35, "Text",ExpressionUUID->"bcaf8d26-bbdc-4867-a5ec-c6b21825d64c"],
Cell[163350, 3981, 276, 6, 32, "Item",ExpressionUUID->"6c88b74b-9859-4c56-b1c8-2a3680978f1e"],
Cell[163629, 3989, 194, 3, 32, "Item",ExpressionUUID->"5cfbdad2-5e2a-40bf-b634-062d1ea26290"],
Cell[163826, 3994, 866, 15, 81, "Text",ExpressionUUID->"4ef18f13-e64d-48c4-89a4-9a2893bd98bc"],
Cell[164695, 4011, 621, 15, 58, "Text",ExpressionUUID->"3ec5b188-efed-4337-87bd-6c5e38d7a891"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[165365, 4032, 246, 4, 57, "Section",ExpressionUUID->"e2d13518-2cb1-4b99-9ddd-3b37b7ca67ee"],
Cell[165614, 4038, 425, 9, 35, "Text",ExpressionUUID->"f5be6bfa-3b09-473e-8b5e-fa1316045f46"],
Cell[166042, 4049, 211, 3, 28, "Input",ExpressionUUID->"b77b2d44-6941-4187-a69b-0c6f81136a47"],
Cell[166256, 4054, 817, 16, 104, "Text",ExpressionUUID->"a794447e-f796-488e-8bde-c145c3711217"]
}, Open  ]],
Cell[CellGroupData[{
Cell[167110, 4075, 197, 4, 67, "Section",ExpressionUUID->"171a1058-a0a8-4970-93b1-dde6c6d99fb1",
 CellTags->"featureImportanceHref"],
Cell[167310, 4081, 969, 15, 81, "Text",ExpressionUUID->"d174c8f4-735f-488b-9b98-9b826d96f6da"],
Cell[CellGroupData[{
Cell[168304, 4100, 187, 3, 54, "Subsection",ExpressionUUID->"bef9533e-aacd-4542-ba5f-14b3c92eb70c"],
Cell[168494, 4105, 742, 13, 58, "Text",ExpressionUUID->"3c428353-41fb-47e6-85f1-dcb349728fc9"],
Cell[169239, 4120, 1516, 37, 121, "Input",ExpressionUUID->"494a4b12-e12e-466b-8924-2867d8fc0ae8",
 InitializationCell->True],
Cell[170758, 4159, 383, 8, 28, "Input",ExpressionUUID->"270a789c-608a-4bb9-8a5b-ed4f1cec0e4e"],
Cell[171144, 4169, 403, 7, 48, "Input",ExpressionUUID->"18a8083b-ecc2-418f-a6ce-43866e00d4a1"],
Cell[171550, 4178, 314, 6, 35, "Text",ExpressionUUID->"ed3f1bf0-48c4-4721-89c9-5b6e494e6c21"],
Cell[171867, 4186, 682, 11, 48, "Input",ExpressionUUID->"162be6cb-1a78-4bbd-9cc1-44f15d34e7fe"],
Cell[172552, 4199, 1159, 19, 150, "Text",ExpressionUUID->"2115cdd5-6dd4-4dcd-8da7-266c5dcfc6fd"],
Cell[173714, 4220, 295, 5, 35, "Text",ExpressionUUID->"7aaeb365-93e1-461c-8175-692d5ee75c2d"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[174058, 4231, 183, 3, 67, "Section",ExpressionUUID->"63834e50-8412-4017-bb9e-27c3a68749bc"],
Cell[174244, 4236, 862, 16, 127, "Text",ExpressionUUID->"1b1d8bdb-314e-4c9e-beab-5f3edd51b95e"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[175155, 4258, 155, 3, 98, "Title",ExpressionUUID->"e8c7acfa-d0ca-4ea1-ba98-ca5db73b1671"],
Cell[CellGroupData[{
Cell[175335, 4265, 215, 4, 67, "Section",ExpressionUUID->"423bcf50-2e7d-477a-b016-2928078e0c4d"],
Cell[175553, 4271, 720, 12, 58, "Text",ExpressionUUID->"7325ecf6-3e40-4a70-a919-b5f839f61ffd"],
Cell[176276, 4285, 236, 6, 32, "Item",ExpressionUUID->"2e7535a4-e952-40d1-8b6c-7a31090cf17f"],
Cell[176515, 4293, 191, 3, 32, "Item",ExpressionUUID->"a878a7ac-b29c-4130-bff1-90681d06d55e"],
Cell[176709, 4298, 365, 7, 35, "Text",ExpressionUUID->"3210526b-0434-4ba1-922b-c317b00aca72"],
Cell[177077, 4307, 886, 16, 58, "Text",ExpressionUUID->"ec19ce3a-530d-40d8-a359-7ac836738ee5"],
Cell[177966, 4325, 790, 17, 48, "Input",ExpressionUUID->"b9a048ba-e0e1-492b-a090-e042373961bd"],
Cell[178759, 4344, 516, 9, 58, "Text",ExpressionUUID->"38b74fe4-6b65-41af-b465-f553132dca8c"],
Cell[179278, 4355, 329, 6, 35, "Text",ExpressionUUID->"44bda71e-c72b-4b1a-b8a6-519755fd4a33"],
Cell[179610, 4363, 703, 12, 58, "Text",ExpressionUUID->"cc18223a-86dc-4e33-b5fd-b7e1633b43a6"],
Cell[180316, 4377, 460, 7, 58, "Text",ExpressionUUID->"73e1fbfc-f210-41de-b613-f22cd3f7b558"],
Cell[180779, 4386, 222, 4, 35, "Text",ExpressionUUID->"9dff8c53-2f7b-4982-878b-78899325e566"]
}, Open  ]],
Cell[CellGroupData[{
Cell[181038, 4395, 185, 3, 67, "Section",ExpressionUUID->"6a5faae0-f57e-4b21-a9f9-d04ff224d6ce",
 CellTags->"treeModelsHref"],
Cell[181226, 4400, 466, 9, 81, "Text",ExpressionUUID->"0addd1dc-8122-4b3d-84e3-7fd8d0bbcf5c"],
Cell[181695, 4411, 167, 3, 32, "ItemNumbered",ExpressionUUID->"6f7692d9-c8d9-4415-a416-65c497a36893"],
Cell[181865, 4416, 165, 3, 32, "ItemNumbered",ExpressionUUID->"ae7b1519-28d8-4801-b9a3-2fa25d31462e"],
Cell[CellGroupData[{
Cell[182055, 4423, 174, 3, 54, "Subsection",ExpressionUUID->"393c525e-17f6-4fb7-9277-fbe018893303"],
Cell[182232, 4428, 809, 13, 58, "Text",ExpressionUUID->"850445a9-ef68-4028-90e5-b7b647d7d458"],
Cell[183044, 4443, 229, 6, 32, "Item",ExpressionUUID->"64c7f920-7172-46f5-ab7a-c2cb04ad2e99"],
Cell[183276, 4451, 194, 3, 32, "Item",ExpressionUUID->"842f9036-2368-42d4-a7bc-bfdc938f0f92"],
Cell[183473, 4456, 447, 9, 58, "Text",ExpressionUUID->"471afb6b-8392-49ea-b6b0-2cddd1da9b9b"],
Cell[183923, 4467, 416, 8, 28, "Input",ExpressionUUID->"e4051ce5-b29a-4cf4-ad00-ea7bf86e7da3"],
Cell[184342, 4477, 273, 5, 35, "Text",ExpressionUUID->"3163f39c-4971-4cb8-87bb-15179432382a"],
Cell[184618, 4484, 304, 5, 28, "Input",ExpressionUUID->"42342caf-6d39-415c-ad50-b01b82244be5"],
Cell[184925, 4491, 283, 7, 35, "Text",ExpressionUUID->"016bf3b7-aa98-450a-8669-5545c5fb83d9"],
Cell[185211, 4500, 308, 5, 28, "Input",ExpressionUUID->"0b3c926c-4f46-4965-84aa-e2c55577e97e"],
Cell[185522, 4507, 322, 9, 35, "Text",ExpressionUUID->"773ff85b-8018-4ad7-9cb8-caece0c127c0"],
Cell[185847, 4518, 274, 5, 35, "Text",ExpressionUUID->"a0a7682d-749e-44ee-903e-bd67dbaa0ffa"]
}, Open  ]],
Cell[CellGroupData[{
Cell[186158, 4528, 225, 4, 54, "Subsection",ExpressionUUID->"2c0b70d5-aae2-4e09-879a-37587e647e03"],
Cell[186386, 4534, 803, 13, 58, "Text",ExpressionUUID->"75cca9ba-06b9-48b2-9dea-03b08fbf6f59"],
Cell[187192, 4549, 256, 6, 32, "Item",ExpressionUUID->"14a2d590-1745-44f9-a38c-60f805693d59"],
Cell[187451, 4557, 189, 3, 32, "Item",ExpressionUUID->"0dedf8fa-a6c4-488e-8121-0654e1ebc60a"],
Cell[187643, 4562, 791, 16, 58, "Text",ExpressionUUID->"09ddaa22-f89e-4b36-84a5-400685228a7b"],
Cell[188437, 4580, 351, 6, 35, "Text",ExpressionUUID->"86c4612f-d718-41d1-827d-c25c02c05ff7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[188825, 4591, 242, 4, 64, "Subsection",ExpressionUUID->"cc614a22-1692-4853-9464-d4a1340bfb65"],
Cell[189070, 4597, 1091, 18, 150, "Text",ExpressionUUID->"3eb140ed-ed95-40a6-99d7-fdb9f53966a1"],
Cell[190164, 4617, 500, 9, 53, "Item",ExpressionUUID->"7887d003-e413-4c72-81c2-2ed878f4c8f0"],
Cell[190667, 4628, 293, 4, 32, "Item",ExpressionUUID->"066e0d5a-ae2a-4523-bb46-2251b94cb802"]
}, Open  ]],
Cell[CellGroupData[{
Cell[190997, 4637, 194, 3, 54, "Subsection",ExpressionUUID->"424c011d-4690-4dcb-a3c3-21156d720794"],
Cell[191194, 4642, 511, 9, 58, "Text",ExpressionUUID->"047cdf4e-1be5-403a-be4c-d9161d85fdd8"],
Cell[191708, 4653, 963, 19, 48, "Input",ExpressionUUID->"635c5a92-2f4f-4c80-bce7-369505464328"],
Cell[192674, 4674, 1218, 20, 173, "Text",ExpressionUUID->"9b3f1d6b-9d24-4982-8c98-18d873ad7438"],
Cell[193895, 4696, 774, 19, 83, "Input",ExpressionUUID->"282601d6-1e11-4693-8181-d53b2fbc17d9",
 InitializationCell->True],
Cell[194672, 4717, 380, 7, 35, "Text",ExpressionUUID->"896349cc-e1a6-4fce-bca5-1ca6f8e7094b"],
Cell[195055, 4726, 643, 13, 48, "Input",ExpressionUUID->"05c9cec2-16ff-42a9-a4d9-9b7fd2283a21"],
Cell[195701, 4741, 656, 13, 67, "Input",ExpressionUUID->"de0e449b-89b7-426b-9324-d1d9a1a58268"]
}, Open  ]],
Cell[CellGroupData[{
Cell[196394, 4759, 245, 4, 54, "Subsection",ExpressionUUID->"4cf9ade7-daec-411a-864c-c20e6a9a5386"],
Cell[196642, 4765, 367, 8, 35, "Text",ExpressionUUID->"e8869b6d-bf56-4a4f-8813-7a7b430cd254"],
Cell[197012, 4775, 304, 5, 35, "Text",ExpressionUUID->"0f59491f-be9c-470d-ab69-9e969cc9f904"],
Cell[197319, 4782, 241, 6, 35, "Text",ExpressionUUID->"a444e8bc-580d-4d3a-8dfb-2e47c882a26d"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[197621, 4795, 153, 3, 98, "Title",ExpressionUUID->"5cfc28c8-2ab8-4680-82b7-4e0edec359f7"],
Cell[197777, 4800, 396, 8, 58, "Text",ExpressionUUID->"ef7c50dd-8223-4d27-88de-9bbd577342c6"]
}, Open  ]]
}
]
*)

